; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=loop-vectorize \
; RUN: -prefer-predicate-with-vp-intrinsics=if-explicit-vector-length-support \
; RUN: -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN: -force-target-supports-scalable-vectors -scalable-vectorization=on -S < %s | FileCheck --check-prefix=IF-EVL %s

; RUN: opt -passes=loop-vectorize \
; RUN: -prefer-predicate-with-vp-intrinsics=force-explicit-vector-length-support \
; RUN: -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN: -force-target-supports-scalable-vectors -scalable-vectorization=on -S < %s | FileCheck --check-prefix=FORCE-EVL %s

; RUN: opt -passes=loop-vectorize \
; RUN: -prefer-predicate-with-vp-intrinsics=no-predication \
; RUN: -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN: -force-target-supports-scalable-vectors -scalable-vectorization=on -S < %s | FileCheck --check-prefix=NO-VP %s

define void @reverse_load_store(i64 %startval, ptr noalias %ptr, ptr noalias %ptr2) {
; IF-EVL-LABEL: @reverse_load_store(
; IF-EVL-NEXT:  entry:
; IF-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; IF-EVL:       for.body:
; IF-EVL-NEXT:    [[ADD_PHI:%.*]] = phi i64 [ [[STARTVAL:%.*]], [[ENTRY:%.*]] ], [ [[ADD:%.*]], [[FOR_BODY]] ]
; IF-EVL-NEXT:    [[I:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[INC:%.*]], [[FOR_BODY]] ]
; IF-EVL-NEXT:    [[ADD]] = add i64 [[ADD_PHI]], -1
; IF-EVL-NEXT:    [[GEPL:%.*]] = getelementptr inbounds i32, ptr [[PTR:%.*]], i64 [[ADD]]
; IF-EVL-NEXT:    [[TMP:%.*]] = load i32, ptr [[GEPL]], align 4
; IF-EVL-NEXT:    [[GEPS:%.*]] = getelementptr inbounds i32, ptr [[PTR2:%.*]], i64 [[ADD]]
; IF-EVL-NEXT:    store i32 [[TMP]], ptr [[GEPS]], align 4
; IF-EVL-NEXT:    [[INC]] = add i32 [[I]], 1
; IF-EVL-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[INC]], 1024
; IF-EVL-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[LOOPEND:%.*]]
; IF-EVL:       loopend:
; IF-EVL-NEXT:    ret void
;
; FORCE-EVL-LABEL: @reverse_load_store(
; FORCE-EVL-NEXT:  entry:
; FORCE-EVL-NEXT:    br label [[FOR_BODY:%.*]]
; FORCE-EVL:       for.body:
; FORCE-EVL-NEXT:    [[ADD_PHI:%.*]] = phi i64 [ [[STARTVAL:%.*]], [[ENTRY:%.*]] ], [ [[ADD:%.*]], [[FOR_BODY]] ]
; FORCE-EVL-NEXT:    [[I:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[INC:%.*]], [[FOR_BODY]] ]
; FORCE-EVL-NEXT:    [[ADD]] = add i64 [[ADD_PHI]], -1
; FORCE-EVL-NEXT:    [[GEPL:%.*]] = getelementptr inbounds i32, ptr [[PTR:%.*]], i64 [[ADD]]
; FORCE-EVL-NEXT:    [[TMP:%.*]] = load i32, ptr [[GEPL]], align 4
; FORCE-EVL-NEXT:    [[GEPS:%.*]] = getelementptr inbounds i32, ptr [[PTR2:%.*]], i64 [[ADD]]
; FORCE-EVL-NEXT:    store i32 [[TMP]], ptr [[GEPS]], align 4
; FORCE-EVL-NEXT:    [[INC]] = add i32 [[I]], 1
; FORCE-EVL-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[INC]], 1024
; FORCE-EVL-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[LOOPEND:%.*]]
; FORCE-EVL:       loopend:
; FORCE-EVL-NEXT:    ret void
;
; NO-VP-LABEL: @reverse_load_store(
; NO-VP-NEXT:  entry:
; NO-VP-NEXT:    br label [[FOR_BODY:%.*]]
; NO-VP:       for.body:
; NO-VP-NEXT:    [[ADD_PHI:%.*]] = phi i64 [ [[STARTVAL:%.*]], [[ENTRY:%.*]] ], [ [[ADD:%.*]], [[FOR_BODY]] ]
; NO-VP-NEXT:    [[I:%.*]] = phi i32 [ 0, [[ENTRY]] ], [ [[INC:%.*]], [[FOR_BODY]] ]
; NO-VP-NEXT:    [[ADD]] = add i64 [[ADD_PHI]], -1
; NO-VP-NEXT:    [[GEPL:%.*]] = getelementptr inbounds i32, ptr [[PTR:%.*]], i64 [[ADD]]
; NO-VP-NEXT:    [[TMP:%.*]] = load i32, ptr [[GEPL]], align 4
; NO-VP-NEXT:    [[GEPS:%.*]] = getelementptr inbounds i32, ptr [[PTR2:%.*]], i64 [[ADD]]
; NO-VP-NEXT:    store i32 [[TMP]], ptr [[GEPS]], align 4
; NO-VP-NEXT:    [[INC]] = add i32 [[I]], 1
; NO-VP-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[INC]], 1024
; NO-VP-NEXT:    br i1 [[EXITCOND]], label [[FOR_BODY]], label [[LOOPEND:%.*]]
; NO-VP:       loopend:
; NO-VP-NEXT:    ret void
;
entry:
  br label %for.body

for.body:
  %add.phi = phi i64 [ %startval, %entry ], [ %add, %for.body ]
  %i = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %add = add i64 %add.phi, -1
  %gepl = getelementptr inbounds i32, ptr %ptr, i64 %add
  %tmp = load i32, ptr %gepl, align 4
  %geps = getelementptr inbounds i32, ptr %ptr2, i64 %add
  store i32 %tmp, ptr %geps, align 4
  %inc = add i32 %i, 1
  %exitcond = icmp ne i32 %inc, 1024
  br i1 %exitcond, label %for.body, label %loopend

loopend:
  ret void
}
