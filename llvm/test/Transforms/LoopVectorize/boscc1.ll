; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=loop-vectorize -enable-boscc-vectorization -S %s | FileCheck %s
;
;  for (unsigned i = 0; i < len; i++)
;    if (X[i])
;      A[i] = B[i] + C[i];
;    else
;      A[i] = E[i] * F[i];
;

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @foo(ptr noalias %A, ptr %B, ptr %C, ptr %D, ptr %E, ptr %X, i64 noundef %len) local_unnamed_addr #0 {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP16_NOT:%.*]] = icmp eq i64 [[LEN:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP16_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[LEN]], 8
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[LEN]], 8
; CHECK-NEXT:    [[N_VEC:%.*]] = sub i64 [[LEN]], [[N_MOD_VF]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[IF_ELSE_BOSCC_JOIN:%.*]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = add i64 [[INDEX]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i32, ptr [[X:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 0
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <8 x i32>, ptr [[TMP2]], align 4, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq <8 x i32> [[WIDE_LOAD]], zeroinitializer
; CHECK-NEXT:    br label [[IF_THEN_BOSCC_GUARD:%.*]]
; CHECK:       if.then.boscc.guard:
; CHECK-NEXT:    [[TMP4:%.*]] = xor <8 x i1> [[TMP3]], <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i1> [[TMP4]] to i8
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ne i8 [[TMP5]], 0
; CHECK-NEXT:    br i1 [[TMP6]], label [[IF_THEN_BOSCC:%.*]], label [[IF_THEN_BOSCC_JOIN:%.*]]
; CHECK:       if.then.boscc:
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i32, ptr [[B:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i32, ptr [[TMP7]], i32 0
; CHECK-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr [[TMP8]], i32 4, <8 x i1> [[TMP4]], <8 x i32> poison), !tbaa [[TBAA5]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i32, ptr [[C:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i32, ptr [[TMP9]], i32 0
; CHECK-NEXT:    [[WIDE_MASKED_LOAD1:%.*]] = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr [[TMP10]], i32 4, <8 x i1> [[TMP4]], <8 x i32> poison), !tbaa [[TBAA5]]
; CHECK-NEXT:    [[TMP11:%.*]] = add nsw <8 x i32> [[WIDE_MASKED_LOAD1]], [[WIDE_MASKED_LOAD]]
; CHECK-NEXT:    br label [[IF_THEN_BOSCC_VEC_CONTINUE:%.*]]
; CHECK:       if.then.boscc.vec.continue:
; CHECK-NEXT:    br label [[IF_THEN_BOSCC_JOIN]]
; CHECK:       if.then.boscc.join:
; CHECK-NEXT:    [[TMP12:%.*]] = phi <8 x i32> [ [[TMP11]], [[IF_THEN_BOSCC_VEC_CONTINUE]] ], [ poison, [[IF_THEN_BOSCC_GUARD]] ]
; CHECK-NEXT:    br label [[IF_ELSE_BOSCC_GUARD:%.*]]
; CHECK:       if.else.boscc.guard:
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <8 x i1> [[TMP3]] to i8
; CHECK-NEXT:    [[TMP14:%.*]] = icmp ne i8 [[TMP13]], 0
; CHECK-NEXT:    br i1 [[TMP14]], label [[IF_ELSE_BOSCC:%.*]], label [[IF_ELSE_BOSCC_JOIN]]
; CHECK:       if.else.boscc:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i32, ptr [[D:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i32, ptr [[TMP15]], i32 0
; CHECK-NEXT:    [[WIDE_MASKED_LOAD2:%.*]] = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr [[TMP16]], i32 4, <8 x i1> [[TMP3]], <8 x i32> poison), !tbaa [[TBAA5]]
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i32, ptr [[E:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i32, ptr [[TMP17]], i32 0
; CHECK-NEXT:    [[WIDE_MASKED_LOAD3:%.*]] = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr [[TMP18]], i32 4, <8 x i1> [[TMP3]], <8 x i32> poison), !tbaa [[TBAA5]]
; CHECK-NEXT:    [[TMP19:%.*]] = mul nsw <8 x i32> [[WIDE_MASKED_LOAD3]], [[WIDE_MASKED_LOAD2]]
; CHECK-NEXT:    br label [[IF_ELSE_BOSCC_VEC_CONTINUE:%.*]]
; CHECK:       if.else.boscc.vec.continue:
; CHECK-NEXT:    br label [[IF_ELSE_BOSCC_JOIN]]
; CHECK:       if.else.boscc.join:
; CHECK-NEXT:    [[TMP20:%.*]] = phi <8 x i32> [ [[TMP19]], [[IF_ELSE_BOSCC_VEC_CONTINUE]] ], [ poison, [[IF_ELSE_BOSCC_GUARD]] ]
; CHECK-NEXT:    [[PREDPHI:%.*]] = select <8 x i1> [[TMP4]], <8 x i32> [[TMP12]], <8 x i32> [[TMP20]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds i32, ptr [[TMP21]], i32 0
; CHECK-NEXT:    store <8 x i32> [[PREDPHI]], ptr [[TMP22]], align 4
; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 8
; CHECK-NEXT:    [[TMP23:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP23]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[LEN]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[I_017:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_INC:%.*]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[X]], i64 [[I_017]]
; CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[ARRAYIDX]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i32 [[TMP24]], 0
; CHECK-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_ELSE:%.*]], label [[IF_THEN:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[I_017]]
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[ARRAYIDX1]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[I_017]]
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP26]], [[TMP25]]
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       if.else:
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[D]], i64 [[I_017]]
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ARRAYIDX4]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i32, ptr [[E]], i64 [[I_017]]
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[ARRAYIDX5]], align 4, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP28]], [[TMP27]]
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[ADD_SINK:%.*]] = phi i32 [ [[MUL]], [[IF_ELSE]] ], [ [[ADD]], [[IF_THEN]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[I_017]]
; CHECK-NEXT:    store i32 [[ADD_SINK]], ptr [[TMP29]], align 4
; CHECK-NEXT:    [[INC]] = add nuw i64 [[I_017]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP14:![0-9]+]]
;
entry:
  %cmp16.not = icmp eq i64 %len, 0
  br i1 %cmp16.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  ret void

for.body:                                         ; preds = %entry, %for.inc
  %i.017 = phi i64 [ %inc, %for.inc ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32, ptr %X, i64 %i.017
  %0 = load i32, ptr %arrayidx, align 4, !tbaa !5
  %tobool.not = icmp eq i32 %0, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx1 = getelementptr inbounds i32, ptr %B, i64 %i.017
  %1 = load i32, ptr %arrayidx1, align 4, !tbaa !5
  %arrayidx2 = getelementptr inbounds i32, ptr %C, i64 %i.017
  %2 = load i32, ptr %arrayidx2, align 4, !tbaa !5
  %add = add nsw i32 %2, %1
  br label %for.inc

if.else:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds i32, ptr %D, i64 %i.017
  %3 = load i32, ptr %arrayidx4, align 4, !tbaa !5
  %arrayidx5 = getelementptr inbounds i32, ptr %E, i64 %i.017
  %4 = load i32, ptr %arrayidx5, align 4, !tbaa !5
  %mul = mul nsw i32 %4, %3
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %add.sink = phi i32 [ %mul, %if.else ], [ %add, %if.then ]
  %5 = getelementptr inbounds i32, ptr %A, i64 %i.017
  store i32 %add.sink, ptr %5, align 4
  %inc = add nuw i64 %i.017, 1
  %exitcond.not = icmp eq i64 %inc, %len
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !9
}

attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.0 (https://github.com/llvm/llvm-project.git 170277ce39677d5a64139b9848a53fd85b74d29d)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.unroll.disable"}
