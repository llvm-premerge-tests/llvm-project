; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=loop-vectorize \
; RUN: -prefer-predicate-with-vp-intrinsics=if-explicit-vector-length-support \
; RUN: -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN: -force-target-supports-scalable-vectors -scalable-vectorization=on -S < %s | FileCheck --check-prefix=IF-EVL %s

; RUN: opt -passes=loop-vectorize \
; RUN: -prefer-predicate-with-vp-intrinsics=force-explicit-vector-length-support \
; RUN: -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN: -force-target-supports-scalable-vectors -scalable-vectorization=on -S < %s | FileCheck --check-prefix=FORCE-EVL %s

; RUN: opt -passes=loop-vectorize \
; RUN: -prefer-predicate-with-vp-intrinsics=no-predication \
; RUN: -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN: -force-target-supports-scalable-vectors -scalable-vectorization=on -S < %s | FileCheck --check-prefix=NO-VP %s

define i32 @no_masking() {
; IF-EVL-LABEL: @no_masking(
; IF-EVL-NEXT:  entry:
; IF-EVL-NEXT:    br label [[BODY:%.*]]
; IF-EVL:       body:
; IF-EVL-NEXT:    [[P:%.*]] = phi i32 [ 1, [[ENTRY:%.*]] ], [ [[INC:%.*]], [[BODY]] ]
; IF-EVL-NEXT:    [[INC]] = add i32 [[P]], 1
; IF-EVL-NEXT:    [[CMP:%.*]] = icmp eq i32 [[INC]], 0
; IF-EVL-NEXT:    br i1 [[CMP]], label [[END:%.*]], label [[BODY]]
; IF-EVL:       end:
; IF-EVL-NEXT:    ret i32 0
;
; FORCE-EVL-LABEL: @no_masking(
; FORCE-EVL-NEXT:  entry:
; FORCE-EVL-NEXT:    br label [[BODY:%.*]]
; FORCE-EVL:       body:
; FORCE-EVL-NEXT:    [[P:%.*]] = phi i32 [ 1, [[ENTRY:%.*]] ], [ [[INC:%.*]], [[BODY]] ]
; FORCE-EVL-NEXT:    [[INC]] = add i32 [[P]], 1
; FORCE-EVL-NEXT:    [[CMP:%.*]] = icmp eq i32 [[INC]], 0
; FORCE-EVL-NEXT:    br i1 [[CMP]], label [[END:%.*]], label [[BODY]]
; FORCE-EVL:       end:
; FORCE-EVL-NEXT:    ret i32 0
;
; NO-VP-LABEL: @no_masking(
; NO-VP-NEXT:  entry:
; NO-VP-NEXT:    br label [[BODY:%.*]]
; NO-VP:       body:
; NO-VP-NEXT:    [[P:%.*]] = phi i32 [ 1, [[ENTRY:%.*]] ], [ [[INC:%.*]], [[BODY]] ]
; NO-VP-NEXT:    [[INC]] = add i32 [[P]], 1
; NO-VP-NEXT:    [[CMP:%.*]] = icmp eq i32 [[INC]], 0
; NO-VP-NEXT:    br i1 [[CMP]], label [[END:%.*]], label [[BODY]]
; NO-VP:       end:
; NO-VP-NEXT:    ret i32 0
;
entry:
  br label %body

body:
  %p = phi i32 [ 1, %entry ], [ %inc, %body ]
  %inc = add i32 %p, 1
  %cmp = icmp eq i32 %inc, 0
  br i1 %cmp, label %end, label %body

end:
  ret i32 0
}
