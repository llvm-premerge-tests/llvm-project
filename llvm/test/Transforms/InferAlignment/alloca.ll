; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt < %s -passes=infer-alignment -S | FileCheck %s

; ------------------------------------------------------------------------------
; Scalar type
; ------------------------------------------------------------------------------

define i8 @alloca_local(i8 %x, i32 %y) {
; CHECK-LABEL: define i8 @alloca_local
; CHECK-SAME: (i8 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[LOAD_I8:%.*]] = load i8, ptr [[ALLOCA]], align 4
; CHECK-NEXT:    [[LOAD_I32:%.*]] = load i32, ptr [[ALLOCA]], align 4
; CHECK-NEXT:    store i8 [[X]], ptr [[ALLOCA]], align 4
; CHECK-NEXT:    store i32 [[Y]], ptr [[ALLOCA]], align 4
; CHECK-NEXT:    ret i8 [[LOAD_I8]]
;
  %alloca = alloca i32

  %load.i8 = load i8, ptr %alloca
  %load.i32 = load i32, ptr %alloca

  store i8 %x, ptr %alloca
  store i32 %y, ptr %alloca

  ret i8 %load.i8
}

; ------------------------------------------------------------------------------
; Struct type
; ------------------------------------------------------------------------------

%struct.pair = type { { i32, i32 } }

define void @alloca_struct(i64 %x) nounwind {
; CHECK-LABEL: define void @alloca_struct
; CHECK-SAME: (i64 [[X:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[ALLOCA_STRUCT:%.*]] = alloca [[STRUCT_PAIR:%.*]], align 8
; CHECK-NEXT:    [[ALLOCA_I32:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[GEP_0:%.*]] = getelementptr [[STRUCT_PAIR]], ptr [[ALLOCA_STRUCT]], i32 0, i32 0
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr { i32, i32 }, ptr [[GEP_0]], i32 0, i32 0
; CHECK-NEXT:    [[LOAD_0:%.*]] = load i32, ptr [[ALLOCA_I32]], align 4
; CHECK-NEXT:    store i32 0, ptr [[ALLOCA_I32]], align 4
; CHECK-NEXT:    [[LOAD_1:%.*]] = load i32, ptr [[GEP_1]], align 8
; CHECK-NEXT:    store i32 0, ptr [[GEP_1]], align 8
; CHECK-NEXT:    ret void
;
  %alloca.struct = alloca %struct.pair
  %alloca.i32 = alloca i32

  %gep.0 = getelementptr %struct.pair, ptr %alloca.struct, i32 0, i32 0
  %gep.1 = getelementptr { i32, i32 }, ptr %gep.0, i32 0, i32 0

  %load.0 = load i32, ptr %alloca.i32, align 1
  store i32 0, ptr %alloca.i32, align 1

  %load.1 = load i32, ptr %gep.1, align 1
  store i32 0, ptr %gep.1, align 1

  ret void
}

declare i32 @foo(ptr, ptr)
