; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S -passes=no-op-function %s -o - | FileCheck %s

; ------------------------------------------------------------------------------
; Vector type
; ------------------------------------------------------------------------------

@v4f_as3 = addrspace(3) global <4 x float> zeroinitializer

define <4 x float> @constant_fold_bitcast_vector_as() {
; CHECK-LABEL: define <4 x float> @constant_fold_bitcast_vector_as() {
; CHECK-NEXT:    [[A:%.*]] = load <4 x float>, ptr addrspace(3) @v4f_as3, align 4
; CHECK-NEXT:    ret <4 x float> [[A]]
;
  %a = load <4 x float>, ptr addrspace(3) @v4f_as3, align 4
  ret <4 x float> %a
}

; ------------------------------------------------------------------------------
; Array type
; ------------------------------------------------------------------------------

@i32_array_as3 = addrspace(3) global [10 x i32] zeroinitializer

define i32 @test_cast_gep_small_indices_as() {
; CHECK-LABEL: define i32 @test_cast_gep_small_indices_as() {
; CHECK-NEXT:    [[X:%.*]] = load i32, ptr addrspace(3) @i32_array_as3, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load i32, ptr addrspace(3) @i32_array_as3, align 4
  ret i32 %x
}

define i32 @test_cast_gep_large_indices_as() {
; CHECK-LABEL: define i32 @test_cast_gep_large_indices_as() {
; CHECK-NEXT:    [[X:%.*]] = load i32, ptr addrspace(3) @i32_array_as3, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load i32, ptr addrspace(3) @i32_array_as3, align 4
  ret i32 %x
}

; ------------------------------------------------------------------------------
; Struct type
; ------------------------------------------------------------------------------

%struct.foo = type { float, float, [4 x i32], ptr addrspace(3) }

@global_ptr = addrspace(3) global %struct.foo {
  float 0.0,
  float 0.0,
  [4 x i32] zeroinitializer,
  ptr addrspace(3) @i32_array_as3
}

define i32 @test_constant_cast_gep_struct_indices_as() {
; CHECK-LABEL: define i32 @test_constant_cast_gep_struct_indices_as() {
; CHECK-NEXT:    [[X:%.*]] = getelementptr [[STRUCT_FOO:%.*]], ptr addrspace(3) @global_ptr, i18 0, i32 2, i12 2
; CHECK-NEXT:    [[Y:%.*]] = load i32, ptr addrspace(3) [[X]], align 4
; CHECK-NEXT:    ret i32 [[Y]]
;
  %x = getelementptr %struct.foo, ptr addrspace(3) @global_ptr, i18 0, i32 2, i12 2
  %y = load i32, ptr addrspace(3) %x, align 4
  ret i32 %y
}
