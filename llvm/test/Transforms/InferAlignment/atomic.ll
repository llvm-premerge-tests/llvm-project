; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S < %s -passes=no-op-function | FileCheck %s
target triple = "x86_64-apple-macosx10.7.0"

; Check transforms involving atomic operations

; ------------------------------------------------------------------------------
; load instructions
; ------------------------------------------------------------------------------

@c = constant i64 42

define i8 @test_atomic_global_load() {
; CHECK-LABEL: define i8 @test_atomic_global_load() {
; CHECK-NEXT:    [[V:%.*]] = load atomic i8, ptr @c seq_cst, align 1
; CHECK-NEXT:    ret i8 [[V]]
;
  %v = load atomic i8, ptr @c seq_cst, align 1
  ret i8 %v
}

define i32 @test1() {
; CHECK-LABEL: define i32 @test1() {
; CHECK-NEXT:    [[X:%.*]] = load atomic i32, ptr @c unordered, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load atomic i32, ptr @c unordered, align 4
  ret i32 %x
}

define i32 @test2() {
; CHECK-LABEL: define i32 @test2() {
; CHECK-NEXT:    [[X:%.*]] = load atomic i32, ptr @c monotonic, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load atomic i32, ptr @c monotonic, align 4
  ret i32 %x
}

define i32 @test3() {
; CHECK-LABEL: define i32 @test3() {
; CHECK-NEXT:    [[X:%.*]] = load atomic i32, ptr @c seq_cst, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load atomic i32, ptr @c seq_cst, align 4
  ret i32 %x
}

; ------------------------------------------------------------------------------
; store instructions
; ------------------------------------------------------------------------------

; An unordered access to null is still unreachable.  There's no
; ordering imposed.
define i32 @test4() {
; CHECK-LABEL: define i32 @test4() {
; CHECK-NEXT:    store atomic i32 0, ptr @c unordered, align 4
; CHECK-NEXT:    ret i32 0
;
  store atomic i32 0, ptr @c unordered, align 4
  ret i32 0
}

define i32 @test5() {
; CHECK-LABEL: define i32 @test5() {
; CHECK-NEXT:    store atomic i32 0, ptr @c monotonic, align 4
; CHECK-NEXT:    ret i32 0
;
  store atomic i32 0, ptr @c monotonic, align 4
  ret i32 0
}

define i32 @test6() {
; CHECK-LABEL: define i32 @test6() {
; CHECK-NEXT:    store atomic i32 0, ptr @c seq_cst, align 4
; CHECK-NEXT:    ret i32 0
;
  store atomic i32 0, ptr @c seq_cst, align 4
  ret i32 0
}

; ------------------------------------------------------------------------------
; load of null
; ------------------------------------------------------------------------------

define i32 @test1_null() {
; CHECK-LABEL: define i32 @test1_null() {
; CHECK-NEXT:    [[X:%.*]] = load atomic i32, ptr null unordered, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load atomic i32, ptr null unordered, align 4
  ret i32 %x
}

define i32 @test2_null() {
; CHECK-LABEL: define i32 @test2_null() {
; CHECK-NEXT:    [[X:%.*]] = load atomic i32, ptr null monotonic, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load atomic i32, ptr null monotonic, align 4
  ret i32 %x
}

define i32 @test3_null() {
; CHECK-LABEL: define i32 @test3_null() {
; CHECK-NEXT:    [[X:%.*]] = load atomic i32, ptr null seq_cst, align 4
; CHECK-NEXT:    ret i32 [[X]]
;
  %x = load atomic i32, ptr null seq_cst, align 4
  ret i32 %x
}

; ------------------------------------------------------------------------------
; store of null
; ------------------------------------------------------------------------------

define i32 @test4_null() {
; CHECK-LABEL: define i32 @test4_null() {
; CHECK-NEXT:    store atomic i32 0, ptr null unordered, align 4
; CHECK-NEXT:    ret i32 0
;
  store atomic i32 0, ptr null unordered, align 4
  ret i32 0
}

define i32 @test5_null() {
; CHECK-LABEL: define i32 @test5_null() {
; CHECK-NEXT:    store atomic i32 0, ptr null monotonic, align 4
; CHECK-NEXT:    ret i32 0
;
  store atomic i32 0, ptr null monotonic, align 4
  ret i32 0
}

define i32 @test6_null() {
; CHECK-LABEL: define i32 @test6_null() {
; CHECK-NEXT:    store atomic i32 0, ptr null seq_cst, align 4
; CHECK-NEXT:    ret i32 0
;
  store atomic i32 0, ptr null seq_cst, align 4
  ret i32 0
}
