; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve < %s | FileCheck %s -check-prefixes=CHECK,CHECK_SVE
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve -aarch64-sve-vector-bits-min=128 -aarch64-sve-vector-bits-max=128  < %s | FileCheck %s -check-prefixes=CHECK,SVE2_128
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve -aarch64-sve-vector-bits-min=256 -aarch64-sve-vector-bits-max=256  < %s | FileCheck %s -check-prefixes=CHECK,SVE2_256
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve -aarch64-sve-vector-bits-min=128 < %s | FileCheck %s -check-prefixes=CHECK,SVE2_128_NOMAX

target triple = "aarch64-unknown-linux-gnu"

; SVE2_128: .LCPI0_0:
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   2                               // 0x2
; SVE2_128-NEXT:        .byte   3                               // 0x3
; SVE2_128-NEXT:        .byte   4                               // 0x4
; SVE2_128-NEXT:        .byte   5                               // 0x5
; SVE2_128-NEXT:        .byte   6                               // 0x6
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
define <8 x i8> @shuffle_index_size_acceptable_op1(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_op1:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x0]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[6]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[5]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE-NEXT:    mov z4.b, z0.b[3]
; CHECK_SVE-NEXT:    strb w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[2]
; CHECK_SVE-NEXT:    strb w8, [sp, #14]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strb w9, [sp, #13]
; CHECK_SVE-NEXT:    fmov w9, s4
; CHECK_SVE-NEXT:    strb w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #11]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    strb w9, [sp, #10]
; CHECK_SVE-NEXT:    strb w8, [sp, #9]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_op1:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI0_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI0_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_256-LABEL: shuffle_index_size_acceptable_op1:
; SVE2_256:       // %bb.0:
; SVE2_256-NEXT:    ptrue p0.b
; SVE2_256-NEXT:    adrp x8, .LCPI0_0
; SVE2_256-NEXT:    add x8, x8, :lo12:.LCPI0_0
; SVE2_256-NEXT:    ldr d0, [x0]
; SVE2_256-NEXT:    ld1b { z1.b }, p0/z, [x8]
; SVE2_256-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_256-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_256-NEXT:    ret
;
; SVE2_128_NOMAX-LABEL: shuffle_index_size_acceptable_op1:
; SVE2_128_NOMAX:       // %bb.0:
; SVE2_128_NOMAX-NEXT:    adrp x8, .LCPI0_0
; SVE2_128_NOMAX-NEXT:    ldr d0, [x0]
; SVE2_128_NOMAX-NEXT:    ldr q1, [x8, :lo12:.LCPI0_0]
; SVE2_128_NOMAX-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_128_NOMAX-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128_NOMAX-NEXT:    ret
; CHECK_SVE2-LABEL: shuffle_index_size_acceptable_op1:
; CHECK_SVE2:       // %bb.0:
; CHECK_SVE2-NEXT:    sub sp, sp, #16
; CHECK_SVE2-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE2-NEXT:    ldr d0, [x0]
; CHECK_SVE2-NEXT:    mov z1.b, z0.b[6]
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[5]
; CHECK_SVE2-NEXT:    fmov w8, s0
; CHECK_SVE2-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE2-NEXT:    mov z4.b, z0.b[3]
; CHECK_SVE2-NEXT:    strb w8, [sp, #8]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    fmov w9, s2
; CHECK_SVE2-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE2-NEXT:    mov z0.b, z0.b[2]
; CHECK_SVE2-NEXT:    strb w8, [sp, #14]
; CHECK_SVE2-NEXT:    fmov w8, s3
; CHECK_SVE2-NEXT:    strb w9, [sp, #13]
; CHECK_SVE2-NEXT:    fmov w9, s4
; CHECK_SVE2-NEXT:    strb w8, [sp, #12]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    strb w9, [sp, #11]
; CHECK_SVE2-NEXT:    fmov w9, s0
; CHECK_SVE2-NEXT:    strb w8, [sp, #15]
; CHECK_SVE2-NEXT:    strb w9, [sp, #10]
; CHECK_SVE2-NEXT:    strb w8, [sp, #9]
; CHECK_SVE2-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE2-NEXT:    add sp, sp, #16
; CHECK_SVE2-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 0, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i8> %1
}

; SVE2_128: .LCPI1_0:
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   1                               // 0x1
; SVE2_128-NEXT:        .byte   1                               // 0x1
; SVE2_128-NEXT:        .byte   3                               // 0x3
; SVE2_128-NEXT:        .byte   4                               // 0x4
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   6                               // 0x6
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
define <8 x i8> @shuffle_index_size_acceptable_op2(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_op2:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x1]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    mov z1.b, z0.b[3]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    strb w9, [sp, #14]
; CHECK_SVE-NEXT:    fmov w9, s3
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #12]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #11]
; CHECK_SVE-NEXT:    strb w9, [sp, #10]
; CHECK_SVE-NEXT:    strb w9, [sp, #9]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_op2:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI1_0
; SVE2_128-NEXT:    ldr d0, [x1]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI1_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_256-LABEL: shuffle_index_size_acceptable_op2:
; SVE2_256:       // %bb.0:
; SVE2_256-NEXT:    ptrue p0.b
; SVE2_256-NEXT:    adrp x8, .LCPI1_0
; SVE2_256-NEXT:    add x8, x8, :lo12:.LCPI1_0
; SVE2_256-NEXT:    ldr d0, [x1]
; SVE2_256-NEXT:    ld1b { z1.b }, p0/z, [x8]
; SVE2_256-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_256-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_256-NEXT:    ret
;
; SVE2_128_NOMAX-LABEL: shuffle_index_size_acceptable_op2:
; SVE2_128_NOMAX:       // %bb.0:
; SVE2_128_NOMAX-NEXT:    adrp x8, .LCPI1_0
; SVE2_128_NOMAX-NEXT:    ldr d0, [x1]
; SVE2_128_NOMAX-NEXT:    ldr q1, [x8, :lo12:.LCPI1_0]
; SVE2_128_NOMAX-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_128_NOMAX-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128_NOMAX-NEXT:    ret
; CHECK_SVE2-LABEL: shuffle_index_size_acceptable_op2:
; CHECK_SVE2:       // %bb.0:
; CHECK_SVE2-NEXT:    sub sp, sp, #16
; CHECK_SVE2-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE2-NEXT:    ldr d0, [x1]
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE2-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE2-NEXT:    fmov w8, s0
; CHECK_SVE2-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE2-NEXT:    fmov w9, s2
; CHECK_SVE2-NEXT:    strb w8, [sp, #8]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    mov z1.b, z0.b[3]
; CHECK_SVE2-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE2-NEXT:    strb w9, [sp, #14]
; CHECK_SVE2-NEXT:    fmov w9, s3
; CHECK_SVE2-NEXT:    strb w8, [sp, #15]
; CHECK_SVE2-NEXT:    strb w8, [sp, #13]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    strb w9, [sp, #12]
; CHECK_SVE2-NEXT:    fmov w9, s0
; CHECK_SVE2-NEXT:    strb w8, [sp, #11]
; CHECK_SVE2-NEXT:    strb w9, [sp, #10]
; CHECK_SVE2-NEXT:    strb w9, [sp, #9]
; CHECK_SVE2-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE2-NEXT:    add sp, sp, #16
; CHECK_SVE2-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 8, i32 9, i32 9, i32 11, i32 12, i32 15, i32 14, i32 15>
  ret <8 x i8> %1
}

; SVE2_128: .LCPI2_0:
; SVE2_128-NEXT:        .byte   1                               // 0x1
; SVE2_128-NEXT:        .byte   17                              // 0x11
; SVE2_128-NEXT:        .byte   18                              // 0x12
; SVE2_128-NEXT:        .byte   19                              // 0x13
; SVE2_128-NEXT:        .byte   20                              // 0x14
; SVE2_128-NEXT:        .byte   20                              // 0x14
; SVE2_128-NEXT:        .byte   22                              // 0x16
; SVE2_128-NEXT:        .byte   23                              // 0x17
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
define <8 x i8> @shuffle_index_size_acceptable_op_both(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_op_both:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x1]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    ldr d1, [x0]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE-NEXT:    mov z1.b, z1.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    mov z3.b, z0.b[2]
; CHECK_SVE-NEXT:    strb w9, [sp, #14]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    strb w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strb w9, [sp, #11]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #10]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #9]
; CHECK_SVE-NEXT:    strb w8, [sp, #8]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_op_both:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI2_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr d1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI2_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_256-LABEL: shuffle_index_size_acceptable_op_both:
; SVE2_256:       // %bb.0:
; SVE2_256-NEXT:    ptrue p0.b
; SVE2_256-NEXT:    ldr d0, [x0]
; SVE2_256-NEXT:    adrp x8, .LCPI2_0
; SVE2_256-NEXT:    add x8, x8, :lo12:.LCPI2_0
; SVE2_256-NEXT:    ldr d1, [x1]
; SVE2_256-NEXT:    ld1b { z2.b }, p0/z, [x8]
; SVE2_256-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_256-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_256-NEXT:    ret
;
; SVE2_128_NOMAX-LABEL: shuffle_index_size_acceptable_op_both:
; SVE2_128_NOMAX:       // %bb.0:
; SVE2_128_NOMAX-NEXT:    sub sp, sp, #16
; SVE2_128_NOMAX-NEXT:    .cfi_def_cfa_offset 16
; SVE2_128_NOMAX-NEXT:    ldr d0, [x1]
; SVE2_128_NOMAX-NEXT:    mov z1.b, z0.b[7]
; SVE2_128_NOMAX-NEXT:    mov z2.b, z0.b[6]
; SVE2_128_NOMAX-NEXT:    mov z3.b, z0.b[4]
; SVE2_128_NOMAX-NEXT:    fmov w8, s1
; SVE2_128_NOMAX-NEXT:    ldr d1, [x0]
; SVE2_128_NOMAX-NEXT:    fmov w9, s2
; SVE2_128_NOMAX-NEXT:    mov z2.b, z0.b[3]
; SVE2_128_NOMAX-NEXT:    mov z1.b, z1.b[1]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #15]
; SVE2_128_NOMAX-NEXT:    fmov w8, s3
; SVE2_128_NOMAX-NEXT:    mov z3.b, z0.b[2]
; SVE2_128_NOMAX-NEXT:    strb w9, [sp, #14]
; SVE2_128_NOMAX-NEXT:    mov z0.b, z0.b[1]
; SVE2_128_NOMAX-NEXT:    fmov w9, s2
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #13]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #12]
; SVE2_128_NOMAX-NEXT:    fmov w8, s3
; SVE2_128_NOMAX-NEXT:    strb w9, [sp, #11]
; SVE2_128_NOMAX-NEXT:    fmov w9, s0
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #10]
; SVE2_128_NOMAX-NEXT:    fmov w8, s1
; SVE2_128_NOMAX-NEXT:    strb w9, [sp, #9]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #8]
; SVE2_128_NOMAX-NEXT:    ldr d0, [sp, #8]
; SVE2_128_NOMAX-NEXT:    add sp, sp, #16
; SVE2_128_NOMAX-NEXT:    ret
; CHECK_SVE2-LABEL: shuffle_index_size_acceptable_op_both:
; CHECK_SVE2:       // %bb.0:
; CHECK_SVE2-NEXT:    sub sp, sp, #16
; CHECK_SVE2-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE2-NEXT:    ldr d0, [x1]
; CHECK_SVE2-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE2-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    ldr d1, [x0]
; CHECK_SVE2-NEXT:    fmov w9, s2
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE2-NEXT:    mov z1.b, z1.b[1]
; CHECK_SVE2-NEXT:    strb w8, [sp, #15]
; CHECK_SVE2-NEXT:    fmov w8, s3
; CHECK_SVE2-NEXT:    mov z3.b, z0.b[2]
; CHECK_SVE2-NEXT:    strb w9, [sp, #14]
; CHECK_SVE2-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE2-NEXT:    fmov w9, s2
; CHECK_SVE2-NEXT:    strb w8, [sp, #13]
; CHECK_SVE2-NEXT:    strb w8, [sp, #12]
; CHECK_SVE2-NEXT:    fmov w8, s3
; CHECK_SVE2-NEXT:    strb w9, [sp, #11]
; CHECK_SVE2-NEXT:    fmov w9, s0
; CHECK_SVE2-NEXT:    strb w8, [sp, #10]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    strb w9, [sp, #9]
; CHECK_SVE2-NEXT:    strb w8, [sp, #8]
; CHECK_SVE2-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE2-NEXT:    add sp, sp, #16
; CHECK_SVE2-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 1, i32 9, i32 10, i32 11, i32 12, i32 12, i32 14, i32 15>
  ret <8 x i8> %1
}

define <8 x i8> @shuffle_index_size_unacceptable_op_poison(ptr %a, ptr %b) {
; CHECK-LABEL: shuffle_index_size_unacceptable_op_poison:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    ldr d0, [x1]
; CHECK-NEXT:    ldr d3, [x0]
; CHECK-NEXT:    mov z1.b, z0.b[6]
; CHECK-NEXT:    mov z2.b, z0.b[4]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.b, z0.b[3]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    mov z2.b, z0.b[2]
; CHECK-NEXT:    mov z0.b, z0.b[1]
; CHECK-NEXT:    strb w8, [sp, #14]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.b, z3.b[1]
; CHECK-NEXT:    strb w9, [sp, #13]
; CHECK-NEXT:    strb w9, [sp, #12]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #11]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strb w9, [sp, #10]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    strb w8, [sp, #9]
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    ldr d0, [sp, #8]
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 1, i32 9, i32 10, i32 11, i32 12, i32 12, i32 14, i32 poison>
  ret <8 x i8> %1
}

define <8 x i8> @shuffle_index_size_unacceptable_op_both_maxhw(ptr %a, ptr %b) #0 {
; CHECK-LABEL: shuffle_index_size_unacceptable_op_both_maxhw:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    ldr d0, [x1]
; CHECK-NEXT:    mov z1.b, z0.b[7]
; CHECK-NEXT:    mov z2.b, z0.b[6]
; CHECK-NEXT:    mov z3.b, z0.b[4]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    ldr d1, [x0]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    mov z2.b, z0.b[3]
; CHECK-NEXT:    mov z1.b, z1.b[1]
; CHECK-NEXT:    strb w8, [sp, #15]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    mov z3.b, z0.b[2]
; CHECK-NEXT:    strb w9, [sp, #14]
; CHECK-NEXT:    mov z0.b, z0.b[1]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #13]
; CHECK-NEXT:    strb w8, [sp, #12]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strb w9, [sp, #11]
; CHECK-NEXT:    fmov w9, s0
; CHECK-NEXT:    strb w8, [sp, #10]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    strb w9, [sp, #9]
; CHECK-NEXT:    strb w8, [sp, #8]
; CHECK-NEXT:    ldr d0, [sp, #8]
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 1, i32 9, i32 10, i32 11, i32 12, i32 12, i32 14, i32 15>
  ret <8 x i8> %1
}

define <16 x double> @shuffle_doublemask_size_unacceptable_form(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_doublemask_size_unacceptable_form:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #48
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 48
; CHECK_SVE-NEXT:    ldp q0, q3, [x0]
; CHECK_SVE-NEXT:    ldr q1, [x0, #32]
; CHECK_SVE-NEXT:    ldr q4, [x1, #48]
; CHECK_SVE-NEXT:    mov z1.d, z1.d[1]
; CHECK_SVE-NEXT:    mov z2.d, z0.d[1]
; CHECK_SVE-NEXT:    mov z3.d, z3.d[1]
; CHECK_SVE-NEXT:    stp d1, d2, [sp, #16]
; CHECK_SVE-NEXT:    mov z2.d, z4.d[1]
; CHECK_SVE-NEXT:    stp d0, d3, [sp, #32]
; CHECK_SVE-NEXT:    stp d1, d2, [sp]
; CHECK_SVE-NEXT:    ldp q1, q0, [sp, #16]
; CHECK_SVE-NEXT:    ldr q7, [sp], #48
; CHECK_SVE-NEXT:    mov z2.d, z0.d
; CHECK_SVE-NEXT:    mov z3.d, z1.d
; CHECK_SVE-NEXT:    mov z4.d, z0.d
; CHECK_SVE-NEXT:    mov z5.d, z1.d
; CHECK_SVE-NEXT:    mov z6.d, z0.d
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_doublemask_size_unacceptable_form:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldp q5, q2, [x0, #16]
; SVE2_128-NEXT:    index z0.d, #3, #-2
; SVE2_128-NEXT:    ldr q1, [x0]
; SVE2_128-NEXT:    index z3.d, #0, #3
; SVE2_128-NEXT:    ldr q7, [x1, #48]
; SVE2_128-NEXT:    mov z6.d, z2.d[1]
; SVE2_128-NEXT:    mov z4.d, z1.d
; SVE2_128-NEXT:    tbl z1.d, { z1.d, z2.d }, z0.d
; SVE2_128-NEXT:    tbl z7.d, { z6.d, z7.d }, z3.d
; SVE2_128-NEXT:    tbl z0.d, { z4.d, z5.d }, z3.d
; SVE2_128-NEXT:    // kill: def $q7 killed $q7 killed $z7
; SVE2_128-NEXT:    mov z3.d, z1.d
; SVE2_128-NEXT:    mov z5.d, z1.d
; SVE2_128-NEXT:    mov z2.d, z0.d
; SVE2_128-NEXT:    mov z4.d, z0.d
; SVE2_128-NEXT:    mov z6.d, z0.d
; SVE2_128-NEXT:    ret
;
; SVE2_256-LABEL: shuffle_doublemask_size_unacceptable_form:
; SVE2_256:       // %bb.0:
; SVE2_256-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SVE2_256-NEXT:    sub x9, sp, #48
; SVE2_256-NEXT:    mov x29, sp
; SVE2_256-NEXT:    and sp, x9, #0xffffffffffffffe0
; SVE2_256-NEXT:    .cfi_def_cfa w29, 16
; SVE2_256-NEXT:    .cfi_offset w30, -8
; SVE2_256-NEXT:    .cfi_offset w29, -16
; SVE2_256-NEXT:    ptrue p0.d
; SVE2_256-NEXT:    mov x9, #4 // =0x4
; SVE2_256-NEXT:    mov x10, sp
; SVE2_256-NEXT:    adrp x11, .LCPI5_0
; SVE2_256-NEXT:    add x11, x11, :lo12:.LCPI5_0
; SVE2_256-NEXT:    adrp x12, .LCPI5_1
; SVE2_256-NEXT:    add x12, x12, :lo12:.LCPI5_1
; SVE2_256-NEXT:    ld1d { z1.d }, p0/z, [x0, x9, lsl #3]
; SVE2_256-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_256-NEXT:    mov z2.d, z1.d[1]
; SVE2_256-NEXT:    ld1d { z5.d }, p0/z, [x1, x9, lsl #3]
; SVE2_256-NEXT:    mov z3.d, z0.d[3]
; SVE2_256-NEXT:    str d0, [sp]
; SVE2_256-NEXT:    stp d3, d2, [sp, #8]
; SVE2_256-NEXT:    ld1d { z4.d }, p0/z, [x10]
; SVE2_256-NEXT:    ld1d { z2.d }, p0/z, [x11]
; SVE2_256-NEXT:    ld1d { z3.d }, p0/z, [x12]
; SVE2_256-NEXT:    mov x10, #8 // =0x8
; SVE2_256-NEXT:    tbl z0.d, { z0.d, z1.d }, z3.d
; SVE2_256-NEXT:    tbl z1.d, { z4.d, z5.d }, z2.d
; SVE2_256-NEXT:    st1d { z0.d }, p0, [x8, x10, lsl #3]
; SVE2_256-NEXT:    mov x10, #12 // =0xc
; SVE2_256-NEXT:    st1d { z0.d }, p0, [x8, x9, lsl #3]
; SVE2_256-NEXT:    st1d { z1.d }, p0, [x8, x10, lsl #3]
; SVE2_256-NEXT:    st1d { z0.d }, p0, [x8]
; SVE2_256-NEXT:    mov sp, x29
; SVE2_256-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SVE2_256-NEXT:    ret
;
; SVE2_128_NOMAX-LABEL: shuffle_doublemask_size_unacceptable_form:
; SVE2_128_NOMAX:       // %bb.0:
; SVE2_128_NOMAX-NEXT:    sub sp, sp, #48
; SVE2_128_NOMAX-NEXT:    .cfi_def_cfa_offset 48
; SVE2_128_NOMAX-NEXT:    ldp q0, q3, [x0]
; SVE2_128_NOMAX-NEXT:    ldr q1, [x0, #32]
; SVE2_128_NOMAX-NEXT:    ldr q4, [x1, #48]
; SVE2_128_NOMAX-NEXT:    mov z1.d, z1.d[1]
; SVE2_128_NOMAX-NEXT:    mov z2.d, z0.d[1]
; SVE2_128_NOMAX-NEXT:    mov z3.d, z3.d[1]
; SVE2_128_NOMAX-NEXT:    stp d1, d2, [sp, #16]
; SVE2_128_NOMAX-NEXT:    mov z2.d, z4.d[1]
; SVE2_128_NOMAX-NEXT:    stp d0, d3, [sp, #32]
; SVE2_128_NOMAX-NEXT:    stp d1, d2, [sp]
; SVE2_128_NOMAX-NEXT:    ldp q1, q0, [sp, #16]
; SVE2_128_NOMAX-NEXT:    ldr q7, [sp], #48
; SVE2_128_NOMAX-NEXT:    mov z2.d, z0.d
; SVE2_128_NOMAX-NEXT:    mov z3.d, z1.d
; SVE2_128_NOMAX-NEXT:    mov z4.d, z0.d
; SVE2_128_NOMAX-NEXT:    mov z5.d, z1.d
; SVE2_128_NOMAX-NEXT:    mov z6.d, z0.d
; SVE2_128_NOMAX-NEXT:    ret
; CHECK_SVE2-LABEL: shuffle_doublemask_size_unacceptable_form:
; CHECK_SVE2:       // %bb.0:
; CHECK_SVE2-NEXT:    sub sp, sp, #48
; CHECK_SVE2-NEXT:    .cfi_def_cfa_offset 48
; CHECK_SVE2-NEXT:    ldp q0, q3, [x0]
; CHECK_SVE2-NEXT:    ldr q1, [x0, #32]
; CHECK_SVE2-NEXT:    ldr q4, [x1, #48]
; CHECK_SVE2-NEXT:    mov z1.d, z1.d[1]
; CHECK_SVE2-NEXT:    mov z2.d, z0.d[1]
; CHECK_SVE2-NEXT:    mov z3.d, z3.d[1]
; CHECK_SVE2-NEXT:    stp d1, d2, [sp, #16]
; CHECK_SVE2-NEXT:    mov z2.d, z4.d[1]
; CHECK_SVE2-NEXT:    stp d0, d3, [sp, #32]
; CHECK_SVE2-NEXT:    stp d1, d2, [sp]
; CHECK_SVE2-NEXT:    ldp q1, q0, [sp, #16]
; CHECK_SVE2-NEXT:    ldr q7, [sp], #48
; CHECK_SVE2-NEXT:    mov z2.d, z0.d
; CHECK_SVE2-NEXT:    mov z3.d, z1.d
; CHECK_SVE2-NEXT:    mov z4.d, z0.d
; CHECK_SVE2-NEXT:    mov z5.d, z1.d
; CHECK_SVE2-NEXT:    mov z6.d, z0.d
; CHECK_SVE2-NEXT:    ret
  %op1 = load <8 x double>, ptr %a
  %op2 = load <8 x double>, ptr %b
  %1 = shufflevector <8 x double> %op1, <8 x double> %op2, <16 x i32> <i32 0, i32 3, i32 5, i32 1, i32 0, i32 3, i32 5, i32 1, i32 0, i32 3, i32 5, i32 1, i32 0, i32 3, i32 5, i32 15>
  ret <16 x double> %1
}

; SVE2_128: .LCPI6_0:
; SVE2_128-NEXT:        .byte   1                               // 0x1
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   23                              // 0x17
; SVE2_128-NEXT:        .byte   3                               // 0x3
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   4                               // 0x4
; SVE2_128-NEXT:        .byte   1                               // 0x1
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   23                              // 0x17
; SVE2_128-NEXT:        .byte   3                               // 0x3
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   4                               // 0x4
define <16 x i8> @shuffle_doublemask_size_acceptable_op_both(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_doublemask_size_acceptable_op_both:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x0]
; CHECK_SVE-NEXT:    ldr d1, [x1]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z2.b, z0.b[4]
; CHECK_SVE-NEXT:    mov z3.b, z0.b[3]
; CHECK_SVE-NEXT:    mov z1.b, z1.b[7]
; CHECK_SVE-NEXT:    mov z4.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #14]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    fmov w10, s1
; CHECK_SVE-NEXT:    fmov w11, s4
; CHECK_SVE-NEXT:    strb w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w12, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #6]
; CHECK_SVE-NEXT:    strb w8, [sp, #5]
; CHECK_SVE-NEXT:    strb w8, [sp, #4]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strb w9, [sp, #15]
; CHECK_SVE-NEXT:    strb w10, [sp, #10]
; CHECK_SVE-NEXT:    strb w8, [sp, #11]
; CHECK_SVE-NEXT:    strb w11, [sp, #9]
; CHECK_SVE-NEXT:    strb w12, [sp, #8]
; CHECK_SVE-NEXT:    strb w9, [sp, #7]
; CHECK_SVE-NEXT:    strb w8, [sp, #3]
; CHECK_SVE-NEXT:    strb w10, [sp, #2]
; CHECK_SVE-NEXT:    strb w11, [sp, #1]
; CHECK_SVE-NEXT:    strb w12, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_doublemask_size_acceptable_op_both:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI6_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr d1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI6_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_256-LABEL: shuffle_doublemask_size_acceptable_op_both:
; SVE2_256:       // %bb.0:
; SVE2_256-NEXT:    ptrue p0.b
; SVE2_256-NEXT:    ldr d0, [x0]
; SVE2_256-NEXT:    adrp x8, .LCPI6_0
; SVE2_256-NEXT:    add x8, x8, :lo12:.LCPI6_0
; SVE2_256-NEXT:    ldr d1, [x1]
; SVE2_256-NEXT:    ld1b { z2.b }, p0/z, [x8]
; SVE2_256-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_256-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_256-NEXT:    ret
;
; SVE2_128_NOMAX-LABEL: shuffle_doublemask_size_acceptable_op_both:
; SVE2_128_NOMAX:       // %bb.0:
; SVE2_128_NOMAX-NEXT:    sub sp, sp, #16
; SVE2_128_NOMAX-NEXT:    .cfi_def_cfa_offset 16
; SVE2_128_NOMAX-NEXT:    ldr d0, [x0]
; SVE2_128_NOMAX-NEXT:    ldr d1, [x1]
; SVE2_128_NOMAX-NEXT:    fmov w8, s0
; SVE2_128_NOMAX-NEXT:    mov z2.b, z0.b[4]
; SVE2_128_NOMAX-NEXT:    mov z3.b, z0.b[3]
; SVE2_128_NOMAX-NEXT:    mov z1.b, z1.b[7]
; SVE2_128_NOMAX-NEXT:    mov z4.b, z0.b[7]
; SVE2_128_NOMAX-NEXT:    mov z0.b, z0.b[1]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #14]
; SVE2_128_NOMAX-NEXT:    fmov w9, s2
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #13]
; SVE2_128_NOMAX-NEXT:    fmov w10, s1
; SVE2_128_NOMAX-NEXT:    fmov w11, s4
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #12]
; SVE2_128_NOMAX-NEXT:    fmov w12, s0
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #6]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #5]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #4]
; SVE2_128_NOMAX-NEXT:    fmov w8, s3
; SVE2_128_NOMAX-NEXT:    strb w9, [sp, #15]
; SVE2_128_NOMAX-NEXT:    strb w10, [sp, #10]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #11]
; SVE2_128_NOMAX-NEXT:    strb w11, [sp, #9]
; SVE2_128_NOMAX-NEXT:    strb w12, [sp, #8]
; SVE2_128_NOMAX-NEXT:    strb w9, [sp, #7]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #3]
; SVE2_128_NOMAX-NEXT:    strb w10, [sp, #2]
; SVE2_128_NOMAX-NEXT:    strb w11, [sp, #1]
; SVE2_128_NOMAX-NEXT:    strb w12, [sp]
; SVE2_128_NOMAX-NEXT:    ldr q0, [sp], #16
; SVE2_128_NOMAX-NEXT:    ret
; CHECK_SVE2-LABEL: shuffle_doublemask_size_acceptable_op_both:
; CHECK_SVE2:       // %bb.0:
; CHECK_SVE2-NEXT:    sub sp, sp, #16
; CHECK_SVE2-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE2-NEXT:    ldr d0, [x0]
; CHECK_SVE2-NEXT:    ldr d1, [x1]
; CHECK_SVE2-NEXT:    fmov w8, s0
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[4]
; CHECK_SVE2-NEXT:    mov z3.b, z0.b[3]
; CHECK_SVE2-NEXT:    mov z1.b, z1.b[7]
; CHECK_SVE2-NEXT:    mov z4.b, z0.b[7]
; CHECK_SVE2-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE2-NEXT:    strb w8, [sp, #14]
; CHECK_SVE2-NEXT:    fmov w9, s2
; CHECK_SVE2-NEXT:    strb w8, [sp, #13]
; CHECK_SVE2-NEXT:    fmov w10, s1
; CHECK_SVE2-NEXT:    fmov w11, s4
; CHECK_SVE2-NEXT:    strb w8, [sp, #12]
; CHECK_SVE2-NEXT:    fmov w12, s0
; CHECK_SVE2-NEXT:    strb w8, [sp, #6]
; CHECK_SVE2-NEXT:    strb w8, [sp, #5]
; CHECK_SVE2-NEXT:    strb w8, [sp, #4]
; CHECK_SVE2-NEXT:    fmov w8, s3
; CHECK_SVE2-NEXT:    strb w9, [sp, #15]
; CHECK_SVE2-NEXT:    strb w10, [sp, #10]
; CHECK_SVE2-NEXT:    strb w8, [sp, #11]
; CHECK_SVE2-NEXT:    strb w11, [sp, #9]
; CHECK_SVE2-NEXT:    strb w12, [sp, #8]
; CHECK_SVE2-NEXT:    strb w9, [sp, #7]
; CHECK_SVE2-NEXT:    strb w8, [sp, #3]
; CHECK_SVE2-NEXT:    strb w10, [sp, #2]
; CHECK_SVE2-NEXT:    strb w11, [sp, #1]
; CHECK_SVE2-NEXT:    strb w12, [sp]
; CHECK_SVE2-NEXT:    ldr q0, [sp], #16
; CHECK_SVE2-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <16 x i32> <i32 1, i32 7, i32 15, i32 3, i32 0, i32 0, i32 0, i32 4, i32 1, i32 7, i32 15, i32 3, i32 0, i32 0, i32 0, i32 4>
  ret <16 x i8> %1
}

; SVE2_128: .LCPI7_0:
; SVE2_128-NEXT:        .byte   1                               // 0x1
; SVE2_128-NEXT:        .byte   7                               // 0x7
; SVE2_128-NEXT:        .byte   23                              // 0x17
; SVE2_128-NEXT:        .byte   3                               // 0x3
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   0                               // 0x0
; SVE2_128-NEXT:        .byte   4                               // 0x4
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
; SVE2_128-NEXT:        .byte   255                             // 0xff
define <8 x i8> @shuffle_halfmask_size_acceptable_op_both(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_halfmask_size_acceptable_op_both:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x0]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[4]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE-NEXT:    strb w8, [sp, #14]
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    strb w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    mov z2.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #11]
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    ldr d1, [x1, #8]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    mov z1.b, z1.b[7]
; CHECK_SVE-NEXT:    strb w8, [sp, #9]
; CHECK_SVE-NEXT:    strb w9, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w8, [sp, #10]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_halfmask_size_acceptable_op_both:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI7_0
; SVE2_128-NEXT:    ldr d1, [x1, #8]
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI7_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_256-LABEL: shuffle_halfmask_size_acceptable_op_both:
; SVE2_256:       // %bb.0:
; SVE2_256-NEXT:    ptrue p0.b
; SVE2_256-NEXT:    ldr d1, [x1, #8]
; SVE2_256-NEXT:    adrp x8, .LCPI7_0
; SVE2_256-NEXT:    add x8, x8, :lo12:.LCPI7_0
; SVE2_256-NEXT:    ldr d0, [x0]
; SVE2_256-NEXT:    ld1b { z2.b }, p0/z, [x8]
; SVE2_256-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_256-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_256-NEXT:    ret
;
; SVE2_128_NOMAX-LABEL: shuffle_halfmask_size_acceptable_op_both:
; SVE2_128_NOMAX:       // %bb.0:
; SVE2_128_NOMAX-NEXT:    sub sp, sp, #16
; SVE2_128_NOMAX-NEXT:    .cfi_def_cfa_offset 16
; SVE2_128_NOMAX-NEXT:    ldr d0, [x0]
; SVE2_128_NOMAX-NEXT:    mov z1.b, z0.b[4]
; SVE2_128_NOMAX-NEXT:    fmov w8, s0
; SVE2_128_NOMAX-NEXT:    mov z2.b, z0.b[3]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #14]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #13]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #12]
; SVE2_128_NOMAX-NEXT:    fmov w8, s1
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #15]
; SVE2_128_NOMAX-NEXT:    fmov w8, s2
; SVE2_128_NOMAX-NEXT:    mov z2.b, z0.b[7]
; SVE2_128_NOMAX-NEXT:    mov z0.b, z0.b[1]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #11]
; SVE2_128_NOMAX-NEXT:    fmov w8, s2
; SVE2_128_NOMAX-NEXT:    ldr d1, [x1, #8]
; SVE2_128_NOMAX-NEXT:    fmov w9, s0
; SVE2_128_NOMAX-NEXT:    mov z1.b, z1.b[7]
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #9]
; SVE2_128_NOMAX-NEXT:    strb w9, [sp, #8]
; SVE2_128_NOMAX-NEXT:    fmov w8, s1
; SVE2_128_NOMAX-NEXT:    strb w8, [sp, #10]
; SVE2_128_NOMAX-NEXT:    ldr d0, [sp, #8]
; SVE2_128_NOMAX-NEXT:    add sp, sp, #16
; SVE2_128_NOMAX-NEXT:    ret
; CHECK_SVE2-LABEL: shuffle_halfmask_size_acceptable_op_both:
; CHECK_SVE2:       // %bb.0:
; CHECK_SVE2-NEXT:    sub sp, sp, #16
; CHECK_SVE2-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE2-NEXT:    ldr d0, [x0]
; CHECK_SVE2-NEXT:    mov z1.b, z0.b[4]
; CHECK_SVE2-NEXT:    fmov w8, s0
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE2-NEXT:    strb w8, [sp, #14]
; CHECK_SVE2-NEXT:    strb w8, [sp, #13]
; CHECK_SVE2-NEXT:    strb w8, [sp, #12]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    strb w8, [sp, #15]
; CHECK_SVE2-NEXT:    fmov w8, s2
; CHECK_SVE2-NEXT:    mov z2.b, z0.b[7]
; CHECK_SVE2-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE2-NEXT:    strb w8, [sp, #11]
; CHECK_SVE2-NEXT:    fmov w8, s2
; CHECK_SVE2-NEXT:    ldr d1, [x1, #8]
; CHECK_SVE2-NEXT:    fmov w9, s0
; CHECK_SVE2-NEXT:    mov z1.b, z1.b[7]
; CHECK_SVE2-NEXT:    strb w8, [sp, #9]
; CHECK_SVE2-NEXT:    strb w9, [sp, #8]
; CHECK_SVE2-NEXT:    fmov w8, s1
; CHECK_SVE2-NEXT:    strb w8, [sp, #10]
; CHECK_SVE2-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE2-NEXT:    add sp, sp, #16
; CHECK_SVE2-NEXT:    ret
  %op1 = load <16 x i8>, ptr %a
  %op2 = load <16 x i8>, ptr %b
  %1 = shufflevector <16 x i8> %op1, <16 x i8> %op2, <8 x i32> <i32 1, i32 7, i32 31, i32 3, i32 0, i32 0, i32 0, i32 4>
  ret <8 x i8> %1
}

; CHECK: .LCPI8_0:
; CHECK-NEXT:        .byte   0                               // 0x0
; CHECK-NEXT:        .byte   7                               // 0x7
; CHECK-NEXT:        .byte   2                               // 0x2
; CHECK-NEXT:        .byte   3                               // 0x3
; CHECK-NEXT:        .byte   4                               // 0x4
; CHECK-NEXT:        .byte   5                               // 0x5
; CHECK-NEXT:        .byte   6                               // 0x6
; CHECK-NEXT:        .byte   7                               // 0x7
; CHECK-NEXT:        .byte   255                             // 0xff
; CHECK-NEXT:        .byte   255                             // 0xff
define <8 x i8> @shuffle_index_size_acceptable_op1_maxhw(ptr %a, ptr %b) #0 {
; CHECK-LABEL: shuffle_index_size_acceptable_op1_maxhw:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.b
; CHECK-NEXT:    adrp x8, .LCPI8_0
; CHECK-NEXT:    add x8, x8, :lo12:.LCPI8_0
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ld1b { z1.b }, p0/z, [x8]
; CHECK-NEXT:    tbl z0.b, { z0.b }, z1.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 0, i32 7, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  ret <8 x i8> %1
}

; CHECK: .LCPI9_0:
; CHECK-NEXT:        .byte   0                               // 0x0
; CHECK-NEXT:        .byte   1                               // 0x1
; CHECK-NEXT:        .byte   1                               // 0x1
; CHECK-NEXT:        .byte   3                               // 0x3
; CHECK-NEXT:        .byte   4                               // 0x4
; CHECK-NEXT:        .byte   7                               // 0x7
; CHECK-NEXT:        .byte   6                               // 0x6
; CHECK-NEXT:        .byte   7                               // 0x7
; CHECK-NEXT:        .byte   255                             // 0xff
; CHECK-NEXT:        .byte   255                             // 0xff
define <8 x i8> @shuffle_index_size_acceptable_op2_maxhw(ptr %a, ptr %b) #0 {
; CHECK-LABEL: shuffle_index_size_acceptable_op2_maxhw:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.b
; CHECK-NEXT:    adrp x8, .LCPI9_0
; CHECK-NEXT:    add x8, x8, :lo12:.LCPI9_0
; CHECK-NEXT:    ldr d0, [x1]
; CHECK-NEXT:    ld1b { z1.b }, p0/z, [x8]
; CHECK-NEXT:    tbl z0.b, { z0.b }, z1.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 8, i32 9, i32 9, i32 11, i32 12, i32 15, i32 14, i32 15>
  ret <8 x i8> %1
}

attributes #0 = { "target-features"="+sve2" vscale_range(16,16) }
