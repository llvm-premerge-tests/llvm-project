; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme -verify-machineinstrs -o - %S/sme-exceptions-with-za-state.ll | FileCheck %s

; CHECK-LABEL: private_za_invoke:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp d15, d14, [sp, #-80]! // 16-byte Folded Spill
; CHECK-NEXT:    stp d13, d12, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    stp d11, d10, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    stp d9, d8, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #64] // 16-byte Folded Spill
; CHECK-NEXT:    add x29, sp, #64
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 16
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    .cfi_offset b8, -24
; CHECK-NEXT:    .cfi_offset b9, -32
; CHECK-NEXT:    .cfi_offset b10, -40
; CHECK-NEXT:    .cfi_offset b11, -48
; CHECK-NEXT:    .cfi_offset b12, -56
; CHECK-NEXT:    .cfi_offset b13, -64
; CHECK-NEXT:    .cfi_offset b14, -72
; CHECK-NEXT:    .cfi_offset b15, -80
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-112]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-100]
; CHECK-NEXT:    sturh wzr, [x29, #-102]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #96
; CHECK-NEXT:    stur x9, [x29, #-80]
; CHECK-NEXT:    sturh w8, [x29, #-72]
; CHECK-NEXT:    stur x10, [x29, #-70]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #80
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:    bl normal_callee
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:  // %bb.1: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB0_3
; CHECK-NEXT:  // %bb.2: // %restore.za
; CHECK-NEXT:    sub x0, x29, #80
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB0_3: // %return
; CHECK-NEXT:    mov w0, #15 // =0xf
; CHECK-NEXT:  .LBB0_4: // %return
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sub sp, x29, #64
; CHECK-NEXT:    ldp x29, x30, [sp, #64] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d9, d8, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d11, d10, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d13, d12, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d15, d14, [sp], #80 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB0_5: // %lpad
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #80
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    sub x8, x29, #112
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    sturh w9, [x29, #-104]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #112
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB0_7
; CHECK-NEXT:  // %bb.6: // %lpad
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB0_7: // %lpad
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB0_4
;
; CHECK-LABEL: new_za_invoke:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp d15, d14, [sp, #-96]! // 16-byte Folded Spill
; CHECK-NEXT:    stp d13, d12, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    stp d11, d10, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    stp d9, d8, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    stp x29, x30, [sp, #64] // 16-byte Folded Spill
; CHECK-NEXT:    add x29, sp, #64
; CHECK-NEXT:    stp x20, x19, [sp, #80] // 16-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    .cfi_offset b8, -40
; CHECK-NEXT:    .cfi_offset b9, -48
; CHECK-NEXT:    .cfi_offset b10, -56
; CHECK-NEXT:    .cfi_offset b11, -64
; CHECK-NEXT:    .cfi_offset b12, -72
; CHECK-NEXT:    .cfi_offset b13, -80
; CHECK-NEXT:    .cfi_offset b14, -88
; CHECK-NEXT:    .cfi_offset b15, -96
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    stur wzr, [x29, #-100]
; CHECK-NEXT:    sturh wzr, [x29, #-102]
; CHECK-NEXT:    stur x10, [x29, #-112]
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    and x19, x0, #0x1
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #96
; CHECK-NEXT:    stur x9, [x29, #-80]
; CHECK-NEXT:    sturh w8, [x29, #-72]
; CHECK-NEXT:    stur x10, [x29, #-70]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #80
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:  .Ltmp3:
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x20, x0, #0x1
; CHECK-NEXT:    tbz x20, #0, .LBB1_2
; CHECK-NEXT:  // %bb.1: // %entry
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:  .LBB1_2: // %entry
; CHECK-NEXT:    bl snap_new
; CHECK-NEXT:    tbz x20, #0, .LBB1_4
; CHECK-NEXT:  // %bb.3: // %entry
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_4: // %entry
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:  // %bb.5: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB1_7
; CHECK-NEXT:  // %bb.6: // %restore.za
; CHECK-NEXT:    sub x0, x29, #80
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB1_7: // %return
; CHECK-NEXT:    mov w0, #15 // =0xf
; CHECK-NEXT:  .LBB1_8: // %return
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sub sp, x29, #64
; CHECK-NEXT:    ldp x20, x19, [sp, #80] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp, #64] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d9, d8, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d11, d10, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d13, d12, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d15, d14, [sp], #96 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB1_9: // %lpad
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    mov x2, x0
; CHECK-NEXT:    tbz x19, #0, .LBB1_11
; CHECK-NEXT:  // %bb.10: // %lpad
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_11: // %lpad
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x19, x0, #0x1
; CHECK-NEXT:    tbz x19, #0, .LBB1_13
; CHECK-NEXT:  // %bb.12: // %lpad
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:  .LBB1_13: // %lpad
; CHECK-NEXT:    mov x0, x2
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    tbz x19, #0, .LBB1_15
; CHECK-NEXT:  // %bb.14: // %lpad
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_15: // %lpad
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #80
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    sub x8, x29, #112
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    sturh w9, [x29, #-104]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x19, x0, #0x1
; CHECK-NEXT:    tbz x19, #0, .LBB1_17
; CHECK-NEXT:  // %bb.16: // %lpad
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:  .LBB1_17: // %lpad
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    tbz x19, #0, .LBB1_19
; CHECK-NEXT:  // %bb.18: // %lpad
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_19: // %lpad
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #112
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB1_21
; CHECK-NEXT:  // %bb.20: // %lpad
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB1_21: // %lpad
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB1_8
;
; CHECK-LABEL: private_za_in_catch_block:
; CHECK:       .Lfunc_begin2:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-48]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #32
; CHECK-NEXT:    stur x9, [x29, #-16]
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    stur x10, [x29, #-6]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp6:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp7:
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    mov w0, #15 // =0xf
; CHECK-NEXT:  .LBB2_2: // %return
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB2_3: // %lpad1
; CHECK-NEXT:  .Ltmp8:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    sub x19, x29, #48
; CHECK-NEXT:    rdsvl x20, #1
; CHECK-NEXT:    sturh w20, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl normal_callee
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB2_5
; CHECK-NEXT:  // %bb.4: // %lpad1
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB2_5: // %lpad1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w20, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB2_7
; CHECK-NEXT:  // %bb.6: // %lpad1
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB2_7: // %lpad1
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB2_2
;
; CHECK-LABEL: private_za_in_catch_block_from_new_za:
; CHECK:       .Lfunc_begin3:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %prelude
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    mul x8, x8, x8
; CHECK-NEXT:    sub x9, x9, x8
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    add x8, x8, #15
; CHECK-NEXT:    stur x9, [x29, #-48]
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    and x8, x8, #0xfffffffffffffff0
; CHECK-NEXT:    sub x8, x9, x8
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    sub x9, x29, #32
; CHECK-NEXT:    stur x8, [x29, #-16]
; CHECK-NEXT:    stur x9, [x29, #-6]
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbz x8, .LBB3_2
; CHECK-NEXT:  // %bb.1: // %save.za
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .LBB3_2: // %entry
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp9:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp10:
; CHECK-NEXT:  // %bb.3:
; CHECK-NEXT:    mov w0, #15 // =0xf
; CHECK-NEXT:  .LBB3_4: // %return
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB3_5: // %lpad1
; CHECK-NEXT:  .Ltmp11:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    sub x19, x29, #48
; CHECK-NEXT:    rdsvl x20, #1
; CHECK-NEXT:    sturh w20, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl normal_callee
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB3_7
; CHECK-NEXT:  // %bb.6: // %lpad1
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB3_7: // %lpad1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w20, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB3_9
; CHECK-NEXT:  // %bb.8: // %lpad1
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB3_9: // %lpad1
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB3_4
;
; CHECK-LABEL: call_after_catch_block:
; CHECK:       .Lfunc_begin4:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-48]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #32
; CHECK-NEXT:    stur x9, [x29, #-16]
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    stur x10, [x29, #-6]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp12:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp13:
; CHECK-NEXT:  .LBB4_1: // %try.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    b fizz_shared
; CHECK-NEXT:  .LBB4_2: // %lpad1
; CHECK-NEXT:  .Ltmp14:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    cmp w1, #1
; CHECK-NEXT:    b.ne .LBB4_10
; CHECK-NEXT:  // %bb.3: // %catch
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp15:
; CHECK-NEXT:    bl bar_shared
; CHECK-NEXT:  .Ltmp16:
; CHECK-NEXT:  // %bb.4: // %invoke.cont
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w9, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB4_6
; CHECK-NEXT:  // %bb.5: // %invoke.cont
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB4_6: // %invoke.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB4_1
; CHECK-NEXT:  .LBB4_7: // %lpad2
; CHECK-NEXT:  .Ltmp17:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp18:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp19:
; CHECK-NEXT:  // %bb.8: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB4_10
; CHECK-NEXT:  // %bb.9: // %restore.za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB4_10: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB4_11: // %terminate.lpad
; CHECK-NEXT:  .Ltmp20:
; CHECK-NEXT:    bl __clang_call_terminate
;
; CHECK-LABEL: multiple_catch:
; CHECK:       .Lfunc_begin5:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-48]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #32
; CHECK-NEXT:    stur x9, [x29, #-16]
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    stur x10, [x29, #-6]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp21:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp22:
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    mov w19, #42 // =0x2a
; CHECK-NEXT:  .LBB5_2: // %return
; CHECK-NEXT:    mov w0, w19
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB5_3: // %lpad1
; CHECK-NEXT:  .Ltmp23:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    cmp w1, #2
; CHECK-NEXT:    b.ne .LBB5_6
; CHECK-NEXT:  // %bb.4: // %catch1
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp29:
; CHECK-NEXT:    bl bar_shared
; CHECK-NEXT:  .Ltmp30:
; CHECK-NEXT:  // %bb.5:
; CHECK-NEXT:    mov w19, #42 // =0x2a
; CHECK-NEXT:    b .LBB5_9
; CHECK-NEXT:  .LBB5_6: // %catch.fallthrough
; CHECK-NEXT:    cmp w1, #1
; CHECK-NEXT:    b.ne .LBB5_16
; CHECK-NEXT:  // %bb.7: // %catch2
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp24:
; CHECK-NEXT:    bl fizz_shared
; CHECK-NEXT:  .Ltmp25:
; CHECK-NEXT:  // %bb.8:
; CHECK-NEXT:    mov w19, #23 // =0x17
; CHECK-NEXT:  .LBB5_9: // %return.sink.split
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w9, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB5_11
; CHECK-NEXT:  // %bb.10: // %return.sink.split
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB5_11: // %return.sink.split
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB5_2
; CHECK-NEXT:  .LBB5_12: // %lpad2
; CHECK-NEXT:  .Ltmp26:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp27:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp28:
; CHECK-NEXT:    b .LBB5_14
; CHECK-NEXT:  .LBB5_13: // %lpad3
; CHECK-NEXT:  .Ltmp31:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp32:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp33:
; CHECK-NEXT:  .LBB5_14: // %check.za13
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB5_16
; CHECK-NEXT:  // %bb.15: // %restore.za14
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB5_16: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB5_17: // %terminate.lpad
; CHECK-NEXT:  .Ltmp34:
; CHECK-NEXT:    bl __clang_call_terminate
;
; CHECK-LABEL: try_throw:
; CHECK:       .Lfunc_begin6:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x19, #1
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    mul x8, x19, x19
; CHECK-NEXT:    sub x9, x9, x8
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    add x8, x8, #15
; CHECK-NEXT:    stur x9, [x29, #-48]
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    and x8, x8, #0xfffffffffffffff0
; CHECK-NEXT:    sub x8, x9, x8
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    sub x9, x29, #32
; CHECK-NEXT:    sub x10, x29, #48
; CHECK-NEXT:    mov w0, #4 // =0x4
; CHECK-NEXT:    stur x8, [x29, #-16]
; CHECK-NEXT:    sturh w19, [x29, #-40]
; CHECK-NEXT:    stur x9, [x29, #-6]
; CHECK-NEXT:    msr TPIDR2_EL0, x10
; CHECK-NEXT:    bl __cxa_allocate_exception
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x9, TPIDR2_EL0
; CHECK-NEXT:    cbnz x9, .LBB6_2
; CHECK-NEXT:  // %bb.1: // %entry
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB6_2: // %entry
; CHECK-NEXT:    mov w9, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    str w9, [x8]
; CHECK-NEXT:    sturh w19, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x19, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp35:
; CHECK-NEXT:    adrp x1, :got:except
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    ldr x1, [x1, :got_lo12:except]
; CHECK-NEXT:    bl __cxa_throw
; CHECK-NEXT:  .Ltmp36:
; CHECK-NEXT:  // %bb.3: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB6_5
; CHECK-NEXT:  // %bb.4: // %restore.za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB6_5: // %unreachable
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .LBB6_6: // %lpad
; CHECK-NEXT:  .Ltmp37:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp38:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp39:
; CHECK-NEXT:  // %bb.7: // %invoke.cont
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w9, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB6_9
; CHECK-NEXT:  // %bb.8: // %invoke.cont
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB6_9: // %invoke.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    b bar_shared
; CHECK-NEXT:  .LBB6_10: // %lpad1
; CHECK-NEXT:  .Ltmp40:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp41:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp42:
; CHECK-NEXT:  // %bb.11: // %check.za5
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB6_13
; CHECK-NEXT:  // %bb.12: // %restore.za6
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB6_13: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB6_14: // %terminate.lpad
; CHECK-NEXT:  .Ltmp43:
; CHECK-NEXT:    bl __clang_call_terminate
;
; CHECK-LABEL: catch_throw:
; CHECK:       .Lfunc_begin7:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-48]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #32
; CHECK-NEXT:    stur x9, [x29, #-16]
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    stur x10, [x29, #-6]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x19, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp44:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp45:
; CHECK-NEXT:  // %bb.1: // %try.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    b bar_shared
; CHECK-NEXT:  .LBB7_2: // %lpad1
; CHECK-NEXT:  .Ltmp46:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    mov w0, #4 // =0x4
; CHECK-NEXT:    rdsvl x20, #1
; CHECK-NEXT:    sturh w20, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_allocate_exception
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x9, TPIDR2_EL0
; CHECK-NEXT:    cbnz x9, .LBB7_4
; CHECK-NEXT:  // %bb.3: // %lpad1
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB7_4: // %lpad1
; CHECK-NEXT:    mov w9, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    str w9, [x8]
; CHECK-NEXT:    sturh w20, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp47:
; CHECK-NEXT:    adrp x1, :got:except
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    ldr x1, [x1, :got_lo12:except]
; CHECK-NEXT:    bl __cxa_throw
; CHECK-NEXT:  .Ltmp48:
; CHECK-NEXT:  // %bb.5: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB7_7
; CHECK-NEXT:  // %bb.6: // %restore.za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB7_7: // %unreachable
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .LBB7_8: // %lpad2
; CHECK-NEXT:  .Ltmp49:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp50:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp51:
; CHECK-NEXT:  // %bb.9: // %check.za5
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB7_11
; CHECK-NEXT:  // %bb.10: // %restore.za6
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB7_11: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB7_12: // %terminate.lpad
; CHECK-NEXT:  .Ltmp52:
; CHECK-NEXT:    bl __clang_call_terminate
;
; CHECK-LABEL: nested:
; CHECK:       .Lfunc_begin8:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-48]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #32
; CHECK-NEXT:    stur x9, [x29, #-16]
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    stur x10, [x29, #-6]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x19, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp53:
; CHECK-NEXT:    bl foo_shared
; CHECK-NEXT:  .Ltmp54:
; CHECK-NEXT:  // %bb.1: // %invoke.cont1
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x19
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp56:
; CHECK-NEXT:    bl bar_shared
; CHECK-NEXT:  .Ltmp57:
; CHECK-NEXT:  .LBB8_2: // %try.cont14
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB8_3: // %lpad2
; CHECK-NEXT:  .Ltmp58:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    cmp w1, #2
; CHECK-NEXT:    b.ne .LBB8_14
; CHECK-NEXT:  // %bb.4: // %catch1
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp59:
; CHECK-NEXT:    bl fizz_shared
; CHECK-NEXT:  .Ltmp60:
; CHECK-NEXT:  // %bb.5: // %invoke.cont2
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp64:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp65:
; CHECK-NEXT:  // %bb.6: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB8_2
; CHECK-NEXT:  // %bb.7: // %restore.za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    b .LBB8_2
; CHECK-NEXT:  .LBB8_8: // %lpad4
; CHECK-NEXT:  .Ltmp66:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    b .LBB8_12
; CHECK-NEXT:  .LBB8_9: // %lpad3
; CHECK-NEXT:  .Ltmp61:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp62:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp63:
; CHECK-NEXT:  // %bb.10: // %check.za13
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB8_12
; CHECK-NEXT:  // %bb.11: // %restore.za14
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB8_12: // %eh.cleanup
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB8_14
; CHECK-NEXT:  .LBB8_13: // %lpad1
; CHECK-NEXT:  .Ltmp55:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:  .LBB8_14: // %catch2
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp67:
; CHECK-NEXT:    bl buzz_shared
; CHECK-NEXT:  .Ltmp68:
; CHECK-NEXT:  // %bb.15: // %invoke.cont3
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w9, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB8_17
; CHECK-NEXT:  // %bb.16: // %invoke.cont3
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB8_17: // %invoke.cont3
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB8_2
; CHECK-NEXT:  .LBB8_18: // %lpad5
; CHECK-NEXT:  .Ltmp69:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp70:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp71:
; CHECK-NEXT:  // %bb.19: // %check.za25
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB8_21
; CHECK-NEXT:  // %bb.20: // %restore.za26
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB8_21: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB8_22: // %terminate.lpad
; CHECK-NEXT:  .Ltmp72:
; CHECK-NEXT:    bl __clang_call_terminate
;
; CHECK-LABEL: conditional_throw:
; CHECK:       .Lfunc_begin9:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    mul x8, x8, x8
; CHECK-NEXT:    sub x9, x9, x8
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    add x8, x8, #15
; CHECK-NEXT:    stur x9, [x29, #-48]
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    and x8, x8, #0xfffffffffffffff0
; CHECK-NEXT:    sub x8, x9, x8
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    sub x9, x29, #32
; CHECK-NEXT:    stur x8, [x29, #-16]
; CHECK-NEXT:    stur x9, [x29, #-6]
; CHECK-NEXT:    tbnz w0, #0, .LBB9_3
; CHECK-NEXT:  // %bb.1: // %if.end
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp73:
; CHECK-NEXT:    bl bar_shared
; CHECK-NEXT:  .Ltmp74:
; CHECK-NEXT:  .LBB9_2: // %try.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB9_3: // %if.then
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    mov w0, #4 // =0x4
; CHECK-NEXT:    rdsvl x19, #1
; CHECK-NEXT:    sturh w19, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_allocate_exception
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x9, TPIDR2_EL0
; CHECK-NEXT:    cbnz x9, .LBB9_5
; CHECK-NEXT:  // %bb.4: // %if.then
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB9_5: // %if.then
; CHECK-NEXT:    mov w9, #23 // =0x17
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    str w9, [x8]
; CHECK-NEXT:    sturh w19, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x9, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x9
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp75:
; CHECK-NEXT:    adrp x1, :got:except
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    mov x2, xzr
; CHECK-NEXT:    ldr x1, [x1, :got_lo12:except]
; CHECK-NEXT:    bl __cxa_throw
; CHECK-NEXT:  .Ltmp76:
; CHECK-NEXT:  // %bb.6: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB9_8
; CHECK-NEXT:  // %bb.7: // %restore.za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB9_8: // %unreachable
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .LBB9_9: // %lpad
; CHECK-NEXT:  .Ltmp77:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp78:
; CHECK-NEXT:    bl fizz_shared
; CHECK-NEXT:  .Ltmp79:
; CHECK-NEXT:  // %bb.10: // %invoke.cont2
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w9, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB9_12
; CHECK-NEXT:  // %bb.11: // %invoke.cont2
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB9_12: // %invoke.cont2
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB9_2
; CHECK-NEXT:  .LBB9_13: // %lpad1
; CHECK-NEXT:  .Ltmp80:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp81:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp82:
; CHECK-NEXT:  // %bb.14: // %check.za9
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB9_16
; CHECK-NEXT:  // %bb.15: // %restore.za10
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB9_16: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB9_17: // %terminate.lpad
; CHECK-NEXT:  .Ltmp83:
; CHECK-NEXT:    bl __clang_call_terminate
;
; CHECK-LABEL: throw_in_signature:
; CHECK:       .Lfunc_begin10:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 16
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    mul x8, x8, x8
; CHECK-NEXT:    sub x9, x9, x8
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    add x8, x8, #15
; CHECK-NEXT:    stur x9, [x29, #-48]
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    and x8, x8, #0xfffffffffffffff0
; CHECK-NEXT:    sub x8, x9, x8
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x8
; CHECK-NEXT:    sub x9, x29, #32
; CHECK-NEXT:    stur x8, [x29, #-16]
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    stur x9, [x29, #-6]
; CHECK-NEXT:    tbz w0, #0, .LBB10_3
; CHECK-NEXT:  // %bb.1: // %if.then
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp86:
; CHECK-NEXT:    bl bar_shared
; CHECK-NEXT:  .Ltmp87:
; CHECK-NEXT:  // %bb.2:
; CHECK-NEXT:    mov w0, #42 // =0x2a
; CHECK-NEXT:    b .LBB10_5
; CHECK-NEXT:  .LBB10_3: // %if.end
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp84:
; CHECK-NEXT:    bl fizz_shared
; CHECK-NEXT:  .Ltmp85:
; CHECK-NEXT:  // %bb.4:
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:  .LBB10_5: // %return
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB10_6: // %lpad
; CHECK-NEXT:  .Ltmp88:
; CHECK-NEXT:    bl __cxa_call_unexpected
;
; CHECK-LABEL: try_func:
; CHECK:       .Lfunc_begin11:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #48
; CHECK-NEXT:    .cfi_def_cfa w29, 32
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -24
; CHECK-NEXT:    .cfi_offset w29, -32
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    mul x9, x8, x8
; CHECK-NEXT:    sub x10, x10, x9
; CHECK-NEXT:    mov sp, x10
; CHECK-NEXT:    add x9, x9, #15
; CHECK-NEXT:    stur x10, [x29, #-48]
; CHECK-NEXT:    mov x10, sp
; CHECK-NEXT:    and x9, x9, #0xfffffffffffffff0
; CHECK-NEXT:    sub x9, x10, x9
; CHECK-NEXT:    stur wzr, [x29, #-36]
; CHECK-NEXT:    sturh wzr, [x29, #-38]
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #32
; CHECK-NEXT:    stur x9, [x29, #-16]
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    stur x10, [x29, #-6]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x8, x29, #16
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp89:
; CHECK-NEXT:    bl fizz_shared
; CHECK-NEXT:  .Ltmp90:
; CHECK-NEXT:  .LBB11_1: // %try.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB11_2: // %lpad
; CHECK-NEXT:  .Ltmp91:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    cmp w1, #1
; CHECK-NEXT:    b.ne .LBB11_10
; CHECK-NEXT:  // %bb.3: // %catch
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    sub x20, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:  .Ltmp92:
; CHECK-NEXT:    bl buzz_shared
; CHECK-NEXT:  .Ltmp93:
; CHECK-NEXT:  // %bb.4: // %invoke.cont
; CHECK-NEXT:    sub x8, x29, #48
; CHECK-NEXT:    rdsvl x9, #1
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    sturh w9, [x29, #-40]
; CHECK-NEXT:    msr TPIDR2_EL0, x8
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    sub x0, x29, #48
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB11_6
; CHECK-NEXT:  // %bb.5: // %invoke.cont
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB11_6: // %invoke.cont
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    b .LBB11_1
; CHECK-NEXT:  .LBB11_7: // %lpad1
; CHECK-NEXT:  .Ltmp94:
; CHECK-NEXT:    mov x19, x0
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    sturh w8, [x29, #-8]
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    msr TPIDR2_EL0, x20
; CHECK-NEXT:    bl __arm_tpidr2_save
; CHECK-NEXT:  .Ltmp95:
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:  .Ltmp96:
; CHECK-NEXT:  // %bb.8: // %check.za
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    cbnz x8, .LBB11_10
; CHECK-NEXT:  // %bb.9: // %restore.za
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB11_10: // %eh.resume
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    smstop za
; CHECK-NEXT:    mov x0, x19
; CHECK-NEXT:    bl _Unwind_Resume
; CHECK-NEXT:  .LBB11_11: // %terminate.lpad
; CHECK-NEXT:  .Ltmp97:
; CHECK-NEXT:    bl __clang_call_terminate
