# RUN: llc -mtriple=aarch64-none-linux-gnu -mattr=+neon  %s -o - 2>&1 \
# RUN:   -misched-dump-reserved-cycles=true \
# RUN:   -run-pass=machine-scheduler -debug-only=machine-scheduler \
# RUN:   -misched-bottomup=true -sched-print-cycles=true \
# RUN:   -misched-detail-resource-booking=true \
# RUN:   -misched-dump-schedule-trace=true -misched-dump-schedule-trace-col-header-width=21 \
# RUN: | FileCheck  %s

# REQUIRES: asserts, aarch64-registered-target

--- |
  ; ModuleID = '../llvm-project/llvm/test/CodeGen/AArch64/aarch64-smull.failing.ll'
  source_filename = "../llvm-project/llvm/test/CodeGen/AArch64/aarch64-smull.failing.ll"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-none-linux-gnu"

  define <8 x i32> @umull_and_v8i32(<8 x i16> %src1, <8 x i32> %src2) #0 {
  entry:
    %in1 = zext <8 x i16> %src1 to <8 x i32>
    %in2 = and <8 x i32> %src2, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
    %out = mul nsw <8 x i32> %in1, %in2
    ret <8 x i32> %out
  }

  attributes #0 = { "target-features"="+neon" }

...
---
name:            umull_and_v8i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fpr128, preferred-register: '' }
  - { id: 1, class: fpr128, preferred-register: '' }
  - { id: 2, class: fpr128, preferred-register: '' }
  - { id: 3, class: fpr128, preferred-register: '' }
  - { id: 4, class: fpr64, preferred-register: '' }
  - { id: 5, class: fpr64, preferred-register: '' }
  - { id: 6, class: fpr128, preferred-register: '' }
  - { id: 7, class: fpr128, preferred-register: '' }
  - { id: 8, class: fpr128, preferred-register: '' }
  - { id: 9, class: fpr64, preferred-register: '' }
  - { id: 10, class: fpr128, preferred-register: '' }
  - { id: 11, class: fpr64, preferred-register: '' }
  - { id: 12, class: fpr128, preferred-register: '' }
liveins:
  - { reg: '$q0', virtual-reg: '%0' }
  - { reg: '$q1', virtual-reg: '%1' }
  - { reg: '$q2', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $q0, $q1, $q2

    %6:fpr128 = MOVIv2d_ns 17
    %2:fpr128 = COPY $q2
    %1:fpr128 = COPY $q1
    %7:fpr128 = ANDv16i8 %2, %6
    %8:fpr128 = ANDv16i8 %1, %6
    %0:fpr128 = COPY $q0
    %3:fpr128 = EXTv16i8 %0, %0, 8
    %9:fpr64 = XTNv4i16 %8
    %11:fpr64 = XTNv4i16 %7
    %10:fpr128 = UMULLv4i16_v4i32 %0.dsub, %9
    %12:fpr128 = UMULLv4i16_v4i32 %3.dsub, %11
    $q0 = COPY %10
    $q1 = COPY %12
    RET_ReallyLR implicit $q0, implicit $q1

...

# CHECK-LABEL: Before MISched:
# CHECK-NEXT: # Machine code for function umull_and_v8i32: IsSSA, NoPHIs, TracksLiveness
# CHECK-NEXT: Function Live Ins: $q0 in %0, $q1 in %1, $q2 in %2
# CHECK-EMPTY:
# CHECK-NEXT: bb.0.entry:
# CHECK-NEXT:   liveins: $q0, $q1, $q2
# CHECK-NEXT:   %6:fpr128 = MOVIv2d_ns 17
# CHECK-NEXT:   %2:fpr128 = COPY $q2
# CHECK-NEXT:   %1:fpr128 = COPY $q1
# CHECK-NEXT:   %7:fpr128 = ANDv16i8 %2:fpr128, %6:fpr128
# CHECK-NEXT:   %8:fpr128 = ANDv16i8 %1:fpr128, %6:fpr128
# CHECK-NEXT:   %0:fpr128 = COPY $q0
# CHECK-NEXT:   %3:fpr128 = EXTv16i8 %0:fpr128, %0:fpr128, 8
# CHECK-NEXT:   %9:fpr64 = XTNv4i16 %8:fpr128
# CHECK-NEXT:   %11:fpr64 = XTNv4i16 %7:fpr128
# CHECK-NEXT:   %10:fpr128 = UMULLv4i16_v4i32 %0.dsub:fpr128, %9:fpr64
# CHECK-NEXT:   %12:fpr128 = UMULLv4i16_v4i32 %3.dsub:fpr128, %11:fpr64
# CHECK-NEXT:   $q0 = COPY %10:fpr128
# CHECK-NEXT:   $q1 = COPY %12:fpr128
# CHECK-NEXT:   RET_ReallyLR implicit $q0, implicit $q1
# CHECK-EMPTY:
# CHECK-NEXT: # End machine code for function umull_and_v8i32.
# CHECK-EMPTY:
# CHECK-NEXT: ********** MI Scheduling **********
# CHECK-NEXT: umull_and_v8i32:%bb.0 entry
# CHECK-NEXT:   From: %6:fpr128 = MOVIv2d_ns 17
# CHECK-NEXT:     To: RET_ReallyLR implicit $q0, implicit $q1
# CHECK-NEXT:  RegionInstrs: 13
# CHECK-NEXT: ScheduleDAGMILive::schedule starting
# CHECK-NEXT: GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
# CHECK-NEXT: Disabled scoreboard hazard recognizer
# CHECK-NEXT: Disabled scoreboard hazard recognizer
# CHECK-NEXT: SU(0) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %6:fpr128 = MOVIv2d_ns 17
# CHECK-NEXT:   # preds left       : 0
# CHECK-NEXT:   # succs left       : 2
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 4
# CHECK-NEXT:   Depth              : 0
# CHECK-NEXT:   Height             : 16
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(4): Data Latency=4 Reg=%6
# CHECK-NEXT:     SU(3): Data Latency=4 Reg=%6
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(1) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %2:fpr128 = COPY $q2
# CHECK-NEXT:   # preds left       : 0
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 1
# CHECK-NEXT:   Depth              : 0
# CHECK-NEXT:   Height             : 13
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(3): Data Latency=1 Reg=%2
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(2) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %1:fpr128 = COPY $q1
# CHECK-NEXT:   # preds left       : 0
# CHECK-NEXT:   # succs left       : 2
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 1
# CHECK-NEXT:   Depth              : 0
# CHECK-NEXT:   Height             : 13
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(4): Data Latency=1 Reg=%1
# CHECK-NEXT:     SU(12): Anti Latency=0
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(3) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %7:fpr128 = ANDv16i8 %2:fpr128, %6:fpr128
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 3
# CHECK-NEXT:   Depth              : 4
# CHECK-NEXT:   Height             : 12
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(1): Data Latency=1 Reg=%2
# CHECK-NEXT:     SU(0): Data Latency=4 Reg=%6
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(8): Data Latency=3 Reg=%7
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(4) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %8:fpr128 = ANDv16i8 %1:fpr128, %6:fpr128
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 3
# CHECK-NEXT:   Depth              : 4
# CHECK-NEXT:   Height             : 12
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(2): Data Latency=1 Reg=%1
# CHECK-NEXT:     SU(0): Data Latency=4 Reg=%6
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(7): Data Latency=3 Reg=%8
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(5) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %0:fpr128 = COPY $q0
# CHECK-NEXT:   # preds left       : 0
# CHECK-NEXT:   # succs left       : 3
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 1
# CHECK-NEXT:   Depth              : 0
# CHECK-NEXT:   Height             : 10
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(9): Data Latency=1 Reg=%0
# CHECK-NEXT:     SU(6): Data Latency=1 Reg=%0
# CHECK-NEXT:     SU(11): Anti Latency=0
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(6) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %3:fpr128 = EXTv16i8 %0:fpr128, %0:fpr128, 8
# CHECK-NEXT:   # preds left       : 1
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 4
# CHECK-NEXT:   Depth              : 1
# CHECK-NEXT:   Height             : 9
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(5): Data Latency=1 Reg=%0
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(10): Data Latency=4 Reg=%3
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(7) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %9:fpr64 = XTNv4i16 %8:fpr128
# CHECK-NEXT:   # preds left       : 1
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 4
# CHECK-NEXT:   Depth              : 7
# CHECK-NEXT:   Height             : 9
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(4): Data Latency=3 Reg=%8
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(9): Data Latency=4 Reg=%9
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(8) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %11:fpr64 = XTNv4i16 %7:fpr128
# CHECK-NEXT:   # preds left       : 1
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 4
# CHECK-NEXT:   Depth              : 7
# CHECK-NEXT:   Height             : 9
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(3): Data Latency=3 Reg=%7
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(10): Data Latency=4 Reg=%11
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(9) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %10:fpr128 = UMULLv4i16_v4i32 %0.dsub:fpr128, %9:fpr64
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 4
# CHECK-NEXT:   Depth              : 11
# CHECK-NEXT:   Height             : 5
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(7): Data Latency=4 Reg=%9
# CHECK-NEXT:     SU(5): Data Latency=1 Reg=%0
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(11): Data Latency=4 Reg=%10
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(10) [TopReadyCycle = 0, BottomReadyCycle = 0]:   %12:fpr128 = UMULLv4i16_v4i32 %3.dsub:fpr128, %11:fpr64
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 4
# CHECK-NEXT:   Depth              : 11
# CHECK-NEXT:   Height             : 5
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(8): Data Latency=4 Reg=%11
# CHECK-NEXT:     SU(6): Data Latency=4 Reg=%3
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     SU(12): Data Latency=4 Reg=%12
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(11) [TopReadyCycle = 0, BottomReadyCycle = 0]:   $q0 = COPY %10:fpr128
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 1
# CHECK-NEXT:   Depth              : 15
# CHECK-NEXT:   Height             : 1
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(9): Data Latency=4 Reg=%10
# CHECK-NEXT:     SU(5): Anti Latency=0
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     ExitSU: Ord  Latency=1 Artificial
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: SU(12) [TopReadyCycle = 0, BottomReadyCycle = 0]:   $q1 = COPY %12:fpr128
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 1
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 1
# CHECK-NEXT:   Depth              : 15
# CHECK-NEXT:   Height             : 1
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(10): Data Latency=4 Reg=%12
# CHECK-NEXT:     SU(2): Anti Latency=0
# CHECK-NEXT:   Successors:
# CHECK-NEXT:     ExitSU: Ord  Latency=1 Artificial
# CHECK-NEXT:   Single Issue       : false;
# CHECK-NEXT: ExitSU [TopReadyCycle = 0, BottomReadyCycle = 0]:   RET_ReallyLR implicit $q0, implicit $q1
# CHECK-NEXT:   # preds left       : 2
# CHECK-NEXT:   # succs left       : 0
# CHECK-NEXT:   # rdefs left       : 0
# CHECK-NEXT:   Latency            : 0
# CHECK-NEXT:   Depth              : 16
# CHECK-NEXT:   Height             : 0
# CHECK-NEXT:   Predecessors:
# CHECK-NEXT:     SU(12): Ord  Latency=1 Artificial
# CHECK-NEXT:     SU(11): Ord  Latency=1 Artificial
# CHECK-NEXT: Critical Path(GS-RR ): 16
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Cycle: 1 BotQ.A
# CHECK-NEXT: Queue BotQ.P:
# CHECK-NEXT: Queue BotQ.A: 12 11
# CHECK-NEXT:   Cand SU(12) ORDER
# CHECK-NEXT: Pick Bot ORDER
# CHECK-NEXT: Scheduling SU(12) $q1 = COPY %12:fpr128
# CHECK-NEXT:   Ready @1c
# CHECK-NEXT:   CortexA510UnitALU +1x2u
# CHECK-NEXT:   Resource booking (@1c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@1c):
# CHECK-NEXT:     Instance 0 available @1c
# CHECK-NEXT:     Instance 1 available @1c
# CHECK-NEXT:     Instance 2 available @1c
# CHECK-NEXT:     selecting CortexA510UnitALU[0] available @1c
# CHECK-NEXT:   BotQ.A TopLatency SU(12) 15c
# CHECK-NEXT:   BotQ.A BotLatency SU(12) 1c
# CHECK-NEXT: BotQ.A @1c
# CHECK-NEXT:   Retired: 1
# CHECK-NEXT:   Executed: 1c
# CHECK-NEXT:   Critical: 0c, 1 MOps
# CHECK-NEXT:   ExpectedLatency: 1c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 10
# CHECK-NEXT: Queue BotQ.A: 11
# CHECK-NEXT: Scheduling SU(11) $q0 = COPY %10:fpr128
# CHECK-NEXT:   Ready @1c
# CHECK-NEXT:   CortexA510UnitALU +1x2u
# CHECK-NEXT:   Resource booking (@1c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@1c):
# CHECK-NEXT:     Instance 0 available @1c
# CHECK-NEXT:     Instance 1 available @1c
# CHECK-NEXT:     Instance 2 available @1c
# CHECK-NEXT:     selecting CortexA510UnitALU[0] available @1c
# CHECK-NEXT: BotQ.A @1c
# CHECK-NEXT:   Retired: 2
# CHECK-NEXT:   Executed: 1c
# CHECK-NEXT:   Critical: 0c, 2 MOps
# CHECK-NEXT:   ExpectedLatency: 1c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Cycle: 2 BotQ.A
# CHECK-NEXT: Cycle: 5 BotQ.A
# CHECK-NEXT: Queue BotQ.P:
# CHECK-NEXT: Queue BotQ.A: 10 9
# CHECK-NEXT:   Cand SU(10) ORDER
# CHECK-NEXT: Pick Bot ORDER
# CHECK-NEXT: Scheduling SU(10) %12:fpr128 = UMULLv4i16_v4i32 %3.dsub:fpr128, %11:fpr64
# CHECK-NEXT:   Ready @5c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@5c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@5c):
# CHECK-NEXT:     Instance 0 available @5c
# CHECK-NEXT:     Instance 1 available @5c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @5c
# CHECK-NEXT:   BotQ.A BotLatency SU(10) 5c
# CHECK-NEXT: BotQ.A @5c
# CHECK-NEXT:   Retired: 3
# CHECK-NEXT:   Executed: 5c
# CHECK-NEXT:   Critical: 1c, 3 MOps
# CHECK-NEXT:   ExpectedLatency: 5c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 8 6
# CHECK-NEXT: Queue BotQ.A: 9
# CHECK-NEXT: Scheduling SU(9) %10:fpr128 = UMULLv4i16_v4i32 %0.dsub:fpr128, %9:fpr64
# CHECK-NEXT:   Ready @5c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@5c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@5c):
# CHECK-NEXT:     Instance 0 available @5c
# CHECK-NEXT:     Instance 1 available @5c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @5c
# CHECK-NEXT: BotQ.A @5c
# CHECK-NEXT:   Retired: 4
# CHECK-NEXT:   Executed: 5c
# CHECK-NEXT:   Critical: 1c, 4 MOps
# CHECK-NEXT:   ExpectedLatency: 5c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Cycle: 6 BotQ.A
# CHECK-NEXT: Cycle: 9 BotQ.A
# CHECK-NEXT: Queue BotQ.P:
# CHECK-NEXT: Queue BotQ.A: 8 7 6
# CHECK-NEXT:   Cand SU(8) ORDER
# CHECK-NEXT: Pick Bot ORDER
# CHECK-NEXT: Scheduling SU(8) %11:fpr64 = XTNv4i16 %7:fpr128
# CHECK-NEXT:   Ready @9c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@9c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@9c):
# CHECK-NEXT:     Instance 0 available @9c
# CHECK-NEXT:     Instance 1 available @9c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @9c
# CHECK-NEXT:   BotQ.A BotLatency SU(8) 9c
# CHECK-NEXT: BotQ.A @9c
# CHECK-NEXT:   Retired: 5
# CHECK-NEXT:   Executed: 9c
# CHECK-NEXT:   Critical: 1c, 5 MOps
# CHECK-NEXT:   ExpectedLatency: 9c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 3
# CHECK-NEXT: Queue BotQ.A: 6 7
# CHECK-NEXT:   Cand SU(6) ORDER
# CHECK-NEXT:   Cand SU(7) ORDER
# CHECK-NEXT: Pick Bot ORDER
# CHECK-NEXT: Scheduling SU(7) %9:fpr64 = XTNv4i16 %8:fpr128
# CHECK-NEXT:   Ready @9c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@9c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@9c):
# CHECK-NEXT:     Instance 0 available @9c
# CHECK-NEXT:     Instance 1 available @9c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @9c
# CHECK-NEXT: BotQ.A @9c
# CHECK-NEXT:   Retired: 6
# CHECK-NEXT:   Executed: 9c
# CHECK-NEXT:   Critical: 2c, 6 MOps
# CHECK-NEXT:   ExpectedLatency: 9c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 3 4
# CHECK-NEXT: Queue BotQ.A: 6
# CHECK-NEXT: Scheduling SU(6) %3:fpr128 = EXTv16i8 %0:fpr128, %0:fpr128, 8
# CHECK-NEXT:   Ready @9c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   *** Critical resource CortexA510UnitVALU: 2c
# CHECK-NEXT:   Resource booking (@9c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@9c):
# CHECK-NEXT:     Instance 0 available @9c
# CHECK-NEXT:     Instance 1 available @9c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @9c
# CHECK-NEXT:   *** Max MOps 3 at cycle 9
# CHECK-NEXT: Cycle: 10 BotQ.A
# CHECK-NEXT: BotQ.A @10c
# CHECK-NEXT:   Retired: 7
# CHECK-NEXT:   Executed: 10c
# CHECK-NEXT:   Critical: 2c, 5 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 9c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 3 4
# CHECK-NEXT: Queue BotQ.A: 5
# CHECK-NEXT: Scheduling SU(5) %0:fpr128 = COPY $q0
# CHECK-NEXT:   Ready @10c
# CHECK-NEXT:   CortexA510UnitALU +1x2u
# CHECK-NEXT:   Resource booking (@10c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@10c):
# CHECK-NEXT:     Instance 0 available @10c
# CHECK-NEXT:     Instance 1 available @10c
# CHECK-NEXT:     Instance 2 available @10c
# CHECK-NEXT:     selecting CortexA510UnitALU[0] available @10c
# CHECK-NEXT:   BotQ.A BotLatency SU(5) 10c
# CHECK-NEXT: BotQ.A @10c
# CHECK-NEXT:   Retired: 8
# CHECK-NEXT:   Executed: 10c
# CHECK-NEXT:   Critical: 2c, 5 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 10c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Cycle: 11 BotQ.A
# CHECK-NEXT: Cycle: 12 BotQ.A
# CHECK-NEXT: Queue BotQ.P:
# CHECK-NEXT: Queue BotQ.A: 3 4
# CHECK-NEXT:   Cand SU(3) ORDER
# CHECK-NEXT:   Cand SU(4) ORDER
# CHECK-NEXT: Pick Bot ORDER
# CHECK-NEXT: Scheduling SU(4) %8:fpr128 = ANDv16i8 %1:fpr128, %6:fpr128
# CHECK-NEXT:   Ready @12c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@12c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@12c):
# CHECK-NEXT:     Instance 0 available @12c
# CHECK-NEXT:     Instance 1 available @12c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @12c
# CHECK-NEXT:   BotQ.A BotLatency SU(4) 12c
# CHECK-NEXT: BotQ.A @12c
# CHECK-NEXT:   Retired: 9
# CHECK-NEXT:   Executed: 12c
# CHECK-NEXT:   Critical: 3c, 6 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 12c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 2
# CHECK-NEXT: Queue BotQ.A: 3
# CHECK-NEXT: Scheduling SU(3) %7:fpr128 = ANDv16i8 %2:fpr128, %6:fpr128
# CHECK-NEXT:   Ready @12c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@12c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@12c):
# CHECK-NEXT:     Instance 0 available @12c
# CHECK-NEXT:     Instance 1 available @12c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @12c
# CHECK-NEXT: BotQ.A @12c
# CHECK-NEXT:   Retired: 10
# CHECK-NEXT:   Executed: 12c
# CHECK-NEXT:   Critical: 3c, 7 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 12c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Cycle: 13 BotQ.A
# CHECK-NEXT: Queue BotQ.P: 0
# CHECK-NEXT: Queue BotQ.A: 2 1
# CHECK-NEXT:   Cand SU(2) ORDER
# CHECK-NEXT: Pick Bot ORDER
# CHECK-NEXT: Scheduling SU(2) %1:fpr128 = COPY $q1
# CHECK-NEXT:   Ready @13c
# CHECK-NEXT:   CortexA510UnitALU +1x2u
# CHECK-NEXT:   Resource booking (@13c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@13c):
# CHECK-NEXT:     Instance 0 available @13c
# CHECK-NEXT:     Instance 1 available @13c
# CHECK-NEXT:     Instance 2 available @13c
# CHECK-NEXT:     selecting CortexA510UnitALU[0] available @13c
# CHECK-NEXT:   BotQ.A BotLatency SU(2) 13c
# CHECK-NEXT: BotQ.A @13c
# CHECK-NEXT:   Retired: 11
# CHECK-NEXT:   Executed: 13c
# CHECK-NEXT:   Critical: 3c, 7 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 13c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Queue BotQ.P: 0
# CHECK-NEXT: Queue BotQ.A: 1
# CHECK-NEXT: Scheduling SU(1) %2:fpr128 = COPY $q2
# CHECK-NEXT:   Ready @13c
# CHECK-NEXT:   CortexA510UnitALU +1x2u
# CHECK-NEXT:   Resource booking (@13c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@13c):
# CHECK-NEXT:     Instance 0 available @13c
# CHECK-NEXT:     Instance 1 available @13c
# CHECK-NEXT:     Instance 2 available @13c
# CHECK-NEXT:     selecting CortexA510UnitALU[0] available @13c
# CHECK-NEXT: BotQ.A @13c
# CHECK-NEXT:   Retired: 12
# CHECK-NEXT:   Executed: 13c
# CHECK-NEXT:   Critical: 3c, 7 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 13c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: Cycle: 14 BotQ.A
# CHECK-NEXT: Cycle: 16 BotQ.A
# CHECK-NEXT: Queue BotQ.P:
# CHECK-NEXT: Queue BotQ.A: 0
# CHECK-NEXT: Scheduling SU(0) %6:fpr128 = MOVIv2d_ns 17
# CHECK-NEXT:   Ready @16c
# CHECK-NEXT:   CortexA510UnitVALU +1x3u
# CHECK-NEXT:   Resource booking (@16c):
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT:   getNextResourceCycle (@16c):
# CHECK-NEXT:     Instance 0 available @16c
# CHECK-NEXT:     Instance 1 available @16c
# CHECK-NEXT:     selecting CortexA510UnitVALU[0] available @16c
# CHECK-NEXT:   BotQ.A BotLatency SU(0) 16c
# CHECK-NEXT: BotQ.A @16c
# CHECK-NEXT:   Retired: 13
# CHECK-NEXT:   Executed: 16c
# CHECK-NEXT:   Critical: 4c, 8 CortexA510UnitVALU
# CHECK-NEXT:   ExpectedLatency: 16c
# CHECK-NEXT:   - Latency limited.
# CHECK-NEXT: CortexA510UnitALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitALU(2) = 4294967295
# CHECK-NEXT: CortexA510UnitALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(0) = 4294967295
# CHECK-NEXT: CortexA510UnitALU12(1) = 4294967295
# CHECK-NEXT: CortexA510UnitB(0) = 4294967295
# CHECK-NEXT: CortexA510UnitDiv(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLd(1) = 4294967295
# CHECK-NEXT: CortexA510UnitLd1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitLdSt(0) = 4294967295
# CHECK-NEXT: CortexA510UnitMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitPAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU0(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVALU1(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(0) = 4294967295
# CHECK-NEXT: CortexA510UnitVMAC(1) = 4294967295
# CHECK-NEXT: CortexA510UnitVMC(0) = 4294967295
# CHECK-NEXT: ** ScheduleDAGMILive::schedule picking next node
# CHECK-NEXT: *** Final schedule for %bb.0 ***
# CHECK-NEXT:  * Schedule table (BottomUp):
# CHECK-NEXT:   i: issue
# CHECK-NEXT:   x: resource booked
# CHECK-NEXT: Cycle                | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 9  | 8  | 7  | 6  | 5  | 4  | 3  | 2  | 1  |
# CHECK-NEXT: SU(0)                | i  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU | x  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(1)                |    |    |    | i  |    |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT:    CortexA510UnitALU |    |    |    | x  |    |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(2)                |    |    |    | i  |    |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT:    CortexA510UnitALU |    |    |    | x  |    |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(3)                |    |    |    |    | i  |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    | x  |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(4)                |    |    |    |    | i  |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    | x  |    |    |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(5)                |    |    |    |    |    |    | i  |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT:    CortexA510UnitALU |    |    |    |    |    |    | x  |    |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(6)                |    |    |    |    |    |    |    | i  |    |    |    |    |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    |    |    |    | x  |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(7)                |    |    |    |    |    |    |    | i  |    |    |    |    |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    |    |    |    | x  |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(8)                |    |    |    |    |    |    |    | i  |    |    |    |    |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    |    |    |    | x  |    |    |    |    |    |    |    |    |
# CHECK-NEXT: SU(9)                |    |    |    |    |    |    |    |    |    |    |    | i  |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    |    |    |    |    |    |    |    | x  |    |    |    |    |
# CHECK-NEXT: SU(10)               |    |    |    |    |    |    |    |    |    |    |    | i  |    |    |    |    |
# CHECK-NEXT:   CortexA510UnitVALU |    |    |    |    |    |    |    |    |    |    |    | x  |    |    |    |    |
# CHECK-NEXT: SU(11)               |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    | i  |
# CHECK-NEXT:    CortexA510UnitALU |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    | x  |
# CHECK-NEXT: SU(12)               |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    | i  |
# CHECK-NEXT:    CortexA510UnitALU |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    | x  |
# CHECK-NEXT: SU(0) [TopReadyCycle = 0, BottomReadyCycle = 16]:   %6:fpr128 = MOVIv2d_ns 17
# CHECK-NEXT: SU(1) [TopReadyCycle = 0, BottomReadyCycle = 13]:   %2:fpr128 = COPY $q2
# CHECK-NEXT: SU(2) [TopReadyCycle = 0, BottomReadyCycle = 13]:   %1:fpr128 = COPY $q1
# CHECK-NEXT: SU(3) [TopReadyCycle = 0, BottomReadyCycle = 12]:   %7:fpr128 = ANDv16i8 %2:fpr128, %6:fpr128
# CHECK-NEXT: SU(4) [TopReadyCycle = 0, BottomReadyCycle = 12]:   %8:fpr128 = ANDv16i8 %1:fpr128, %6:fpr128
# CHECK-NEXT: SU(5) [TopReadyCycle = 0, BottomReadyCycle = 10]:   %0:fpr128 = COPY $q0
# CHECK-NEXT: SU(6) [TopReadyCycle = 0, BottomReadyCycle = 9]:   %3:fpr128 = EXTv16i8 %0:fpr128, %0:fpr128, 8
# CHECK-NEXT: SU(7) [TopReadyCycle = 0, BottomReadyCycle = 9]:   %9:fpr64 = XTNv4i16 %8:fpr128
# CHECK-NEXT: SU(8) [TopReadyCycle = 0, BottomReadyCycle = 9]:   %11:fpr64 = XTNv4i16 %7:fpr128
# CHECK-NEXT: SU(9) [TopReadyCycle = 0, BottomReadyCycle = 5]:   %10:fpr128 = UMULLv4i16_v4i32 %0.dsub:fpr128, %9:fpr64
# CHECK-NEXT: SU(10) [TopReadyCycle = 0, BottomReadyCycle = 5]:   %12:fpr128 = UMULLv4i16_v4i32 %3.dsub:fpr128, %11:fpr64
# CHECK-NEXT: SU(11) [TopReadyCycle = 0, BottomReadyCycle = 1]:   $q0 = COPY %10:fpr128
# CHECK-NEXT: SU(12) [TopReadyCycle = 0, BottomReadyCycle = 1]:   $q1 = COPY %12:fpr128
# CHECK-EMPTY:
# CHECK-NEXT: ********** INTERVALS **********
# CHECK-NEXT: B0 [0B,96r:0)[192r,224r:1) 0@0B-phi 1@192r
# CHECK-NEXT: B1 [0B,48r:0)[208r,224r:1) 0@0B-phi 1@208r
# CHECK-NEXT: B2 [0B,32r:0) 0@0B-phi
# CHECK-NEXT: %0 [96r,160r:0) 0@96r  weight:0.000000e+00
# CHECK-NEXT: %1 [48r,80r:0) 0@48r  weight:0.000000e+00
# CHECK-NEXT: %2 [32r,64r:0) 0@32r  weight:0.000000e+00
# CHECK-NEXT: %3 [112r,176r:0) 0@112r  weight:0.000000e+00
# CHECK-NEXT: %6 [16r,80r:0) 0@16r  weight:0.000000e+00
# CHECK-NEXT: %7 [64r,144r:0) 0@64r  weight:0.000000e+00
# CHECK-NEXT: %8 [80r,128r:0) 0@80r  weight:0.000000e+00
# CHECK-NEXT: %9 [128r,160r:0) 0@128r  weight:0.000000e+00
# CHECK-NEXT: %10 [160r,192r:0) 0@160r  weight:0.000000e+00
# CHECK-NEXT: %11 [144r,176r:0) 0@144r  weight:0.000000e+00
# CHECK-NEXT: %12 [176r,208r:0) 0@176r  weight:0.000000e+00
# CHECK-NEXT: RegMasks:
# CHECK-NEXT: ********** MACHINEINSTRS **********
# CHECK-NEXT: # Machine code for function umull_and_v8i32: IsSSA, NoPHIs, TracksLiveness
# CHECK-NEXT: Function Live Ins: $q0 in %0, $q1 in %1, $q2 in %2
# CHECK-EMPTY:
# CHECK-NEXT: 0B	bb.0.entry:
# CHECK-NEXT: 	  liveins: $q0, $q1, $q2
# CHECK-NEXT: 16B	  %6:fpr128 = MOVIv2d_ns 17
# CHECK-NEXT: 32B	  %2:fpr128 = COPY $q2
# CHECK-NEXT: 48B	  %1:fpr128 = COPY $q1
# CHECK-NEXT: 64B	  %7:fpr128 = ANDv16i8 %2:fpr128, %6:fpr128
# CHECK-NEXT: 80B	  %8:fpr128 = ANDv16i8 %1:fpr128, %6:fpr128
# CHECK-NEXT: 96B	  %0:fpr128 = COPY $q0
# CHECK-NEXT: 112B	  %3:fpr128 = EXTv16i8 %0:fpr128, %0:fpr128, 8
# CHECK-NEXT: 128B	  %9:fpr64 = XTNv4i16 %8:fpr128
# CHECK-NEXT: 144B	  %11:fpr64 = XTNv4i16 %7:fpr128
# CHECK-NEXT: 160B	  %10:fpr128 = UMULLv4i16_v4i32 %0.dsub:fpr128, %9:fpr64
# CHECK-NEXT: 176B	  %12:fpr128 = UMULLv4i16_v4i32 %3.dsub:fpr128, %11:fpr64
# CHECK-NEXT: 192B	  $q0 = COPY %10:fpr128
# CHECK-NEXT: 208B	  $q1 = COPY %12:fpr128
# CHECK-NEXT: 224B	  RET_ReallyLR implicit $q0, implicit $q1