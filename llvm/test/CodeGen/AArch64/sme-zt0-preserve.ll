; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme -start-after=simplifycfg -enable-tail-merge=false -enable-aarch64-sme-peephole-opt=false -verify-machineinstrs < %s | FileCheck %s --check-prefix=SME
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme2 -start-after=simplifycfg -enable-tail-merge=false -enable-aarch64-sme-peephole-opt=false -verify-machineinstrs < %s | FileCheck %s --check-prefix=SME2

; Normal callee, no ZA state
declare void @normal_callee();

; Callees with ZA state
declare void @za_shared_callee() "aarch64_pstate_za_shared";
declare void @za_new_callee() "aarch64_pstate_za_new";

; Callee with preserved ZA state
declare void @za_preserved_callee() "aarch64_pstate_za_preserved";


define void @za_new_caller_normal_callee() "aarch64_pstate_za_new" nounwind {
; SME-LABEL: za_new_caller_normal_callee:
; SME:       // %bb.0: // %prelude
; SME-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbz x8, .LBB0_2
; SME-NEXT:  // %bb.1: // %save.za
; SME-NEXT:    bl __arm_tpidr2_save
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:  .LBB0_2:
; SME-NEXT:    smstart za
; SME-NEXT:    sub x8, x29, #16
; SME-NEXT:    sturh w9, [x29, #-8]
; SME-NEXT:    msr TPIDR2_EL0, x8
; SME-NEXT:    bl normal_callee
; SME-NEXT:    smstart za
; SME-NEXT:    sub x0, x29, #16
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbnz x8, .LBB0_4
; SME-NEXT:  // %bb.3:
; SME-NEXT:    bl __arm_tpidr2_restore
; SME-NEXT:  .LBB0_4:
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:    smstop za
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_new_caller_normal_callee:
; SME2:       // %bb.0: // %prelude
; SME2-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; SME2-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #80
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbz x8, .LBB0_2
; SME2-NEXT:  // %bb.1: // %save.za
; SME2-NEXT:    bl __arm_tpidr2_save
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:  .LBB0_2:
; SME2-NEXT:    smstart za
; SME2-NEXT:    sub x8, x29, #16
; SME2-NEXT:    sub x19, x29, #80
; SME2-NEXT:    zero { zt0 }
; SME2-NEXT:    sturh w9, [x29, #-8]
; SME2-NEXT:    msr TPIDR2_EL0, x8
; SME2-NEXT:    str zt0, [x19]
; SME2-NEXT:    bl normal_callee
; SME2-NEXT:    smstart za
; SME2-NEXT:    ldr zt0, [x19]
; SME2-NEXT:    sub x0, x29, #16
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbnz x8, .LBB0_4
; SME2-NEXT:  // %bb.3:
; SME2-NEXT:    bl __arm_tpidr2_restore
; SME2-NEXT:  .LBB0_4:
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:    smstop za
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; SME2-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; SME2-NEXT:    ret
  call void @normal_callee();
  ret void;
}

define void @za_new_caller_za_callee() "aarch64_pstate_za_new" nounwind {
; SME-LABEL: za_new_caller_za_callee:
; SME:       // %bb.0: // %prelude
; SME-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbz x8, .LBB1_2
; SME-NEXT:  // %bb.1: // %save.za
; SME-NEXT:    bl __arm_tpidr2_save
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:  .LBB1_2:
; SME-NEXT:    smstart za
; SME-NEXT:    sub x8, x29, #16
; SME-NEXT:    sturh w9, [x29, #-8]
; SME-NEXT:    msr TPIDR2_EL0, x8
; SME-NEXT:    bl za_new_callee
; SME-NEXT:    smstart za
; SME-NEXT:    sub x0, x29, #16
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbnz x8, .LBB1_4
; SME-NEXT:  // %bb.3:
; SME-NEXT:    bl __arm_tpidr2_restore
; SME-NEXT:  .LBB1_4:
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:    bl za_shared_callee
; SME-NEXT:    smstop za
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_new_caller_za_callee:
; SME2:       // %bb.0: // %prelude
; SME2-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; SME2-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #144
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbz x8, .LBB1_2
; SME2-NEXT:  // %bb.1: // %save.za
; SME2-NEXT:    bl __arm_tpidr2_save
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:  .LBB1_2:
; SME2-NEXT:    smstart za
; SME2-NEXT:    sub x8, x29, #16
; SME2-NEXT:    sub x19, x29, #80
; SME2-NEXT:    zero { zt0 }
; SME2-NEXT:    sturh w9, [x29, #-8]
; SME2-NEXT:    msr TPIDR2_EL0, x8
; SME2-NEXT:    str zt0, [x19]
; SME2-NEXT:    bl za_new_callee
; SME2-NEXT:    smstart za
; SME2-NEXT:    ldr zt0, [x19]
; SME2-NEXT:    sub x0, x29, #16
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbnz x8, .LBB1_4
; SME2-NEXT:  // %bb.3:
; SME2-NEXT:    bl __arm_tpidr2_restore
; SME2-NEXT:  .LBB1_4:
; SME2-NEXT:    sub x19, x29, #144
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:    str zt0, [x19]
; SME2-NEXT:    bl za_shared_callee
; SME2-NEXT:    ldr zt0, [x19]
; SME2-NEXT:    smstop za
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; SME2-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; SME2-NEXT:    ret
  call void @za_new_callee();
  call void @za_shared_callee();
  ret void;
}

define void @za_shared_caller_normal_callee() "aarch64_pstate_za_shared" nounwind {
; SME-LABEL: za_shared_caller_normal_callee:
; SME:       // %bb.0:
; SME-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    sub x10, x29, #16
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    sturh w9, [x29, #-8]
; SME-NEXT:    msr TPIDR2_EL0, x10
; SME-NEXT:    bl normal_callee
; SME-NEXT:    smstart za
; SME-NEXT:    sub x0, x29, #16
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbnz x8, .LBB2_2
; SME-NEXT:  // %bb.1:
; SME-NEXT:    bl __arm_tpidr2_restore
; SME-NEXT:  .LBB2_2:
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_shared_caller_normal_callee:
; SME2:       // %bb.0:
; SME2-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; SME2-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #80
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    sub x10, x29, #16
; SME2-NEXT:    sub x19, x29, #80
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    sturh w9, [x29, #-8]
; SME2-NEXT:    msr TPIDR2_EL0, x10
; SME2-NEXT:    str zt0, [x19]
; SME2-NEXT:    bl normal_callee
; SME2-NEXT:    smstart za
; SME2-NEXT:    ldr zt0, [x19]
; SME2-NEXT:    sub x0, x29, #16
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbnz x8, .LBB2_2
; SME2-NEXT:  // %bb.1:
; SME2-NEXT:    bl __arm_tpidr2_restore
; SME2-NEXT:  .LBB2_2:
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; SME2-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; SME2-NEXT:    ret
  call void @normal_callee();
  ret void;
}

define void @za_shared_caller_za_callee() "aarch64_pstate_za_shared" nounwind {
; SME-LABEL: za_shared_caller_za_callee:
; SME:       // %bb.0:
; SME-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    sub x10, x29, #16
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    sturh w9, [x29, #-8]
; SME-NEXT:    msr TPIDR2_EL0, x10
; SME-NEXT:    bl za_new_callee
; SME-NEXT:    smstart za
; SME-NEXT:    sub x0, x29, #16
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbnz x8, .LBB3_2
; SME-NEXT:  // %bb.1:
; SME-NEXT:    bl __arm_tpidr2_restore
; SME-NEXT:  .LBB3_2:
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:    bl za_shared_callee
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_shared_caller_za_callee:
; SME2:       // %bb.0:
; SME2-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; SME2-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #144
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    sub x10, x29, #16
; SME2-NEXT:    sub x19, x29, #80
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    sturh w9, [x29, #-8]
; SME2-NEXT:    msr TPIDR2_EL0, x10
; SME2-NEXT:    str zt0, [x19]
; SME2-NEXT:    bl za_new_callee
; SME2-NEXT:    smstart za
; SME2-NEXT:    ldr zt0, [x19]
; SME2-NEXT:    sub x0, x29, #16
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbnz x8, .LBB3_2
; SME2-NEXT:  // %bb.1:
; SME2-NEXT:    bl __arm_tpidr2_restore
; SME2-NEXT:  .LBB3_2:
; SME2-NEXT:    sub x19, x29, #144
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:    str zt0, [x19]
; SME2-NEXT:    bl za_shared_callee
; SME2-NEXT:    ldr zt0, [x19]
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; SME2-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; SME2-NEXT:    ret
  call void @za_new_callee();
  call void @za_shared_callee();
  ret void;
}

define void @za_new_caller_za_preserved_callee() "aarch64_pstate_za_new" nounwind {
; SME-LABEL: za_new_caller_za_preserved_callee:
; SME:       // %bb.0: // %prelude
; SME-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    mrs x8, TPIDR2_EL0
; SME-NEXT:    cbz x8, .LBB4_2
; SME-NEXT:  // %bb.1: // %save.za
; SME-NEXT:    bl __arm_tpidr2_save
; SME-NEXT:    msr TPIDR2_EL0, xzr
; SME-NEXT:  .LBB4_2:
; SME-NEXT:    smstart za
; SME-NEXT:    bl za_preserved_callee
; SME-NEXT:    smstop za
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_new_caller_za_preserved_callee:
; SME2:       // %bb.0: // %prelude
; SME2-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #16
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    mrs x8, TPIDR2_EL0
; SME2-NEXT:    cbz x8, .LBB4_2
; SME2-NEXT:  // %bb.1: // %save.za
; SME2-NEXT:    bl __arm_tpidr2_save
; SME2-NEXT:    msr TPIDR2_EL0, xzr
; SME2-NEXT:  .LBB4_2:
; SME2-NEXT:    smstart za
; SME2-NEXT:    zero { zt0 }
; SME2-NEXT:    bl za_preserved_callee
; SME2-NEXT:    smstop za
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME2-NEXT:    ret
  call void @za_preserved_callee();
  ret void;
}

define void @za_shared_caller_za_preserved_callee() "aarch64_pstate_za_shared" nounwind {
; SME-LABEL: za_shared_caller_za_preserved_callee:
; SME:       // %bb.0:
; SME-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    bl za_preserved_callee
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_shared_caller_za_preserved_callee:
; SME2:       // %bb.0:
; SME2-NEXT:    stp x29, x30, [sp, #-16]! // 16-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #16
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    bl za_preserved_callee
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldp x29, x30, [sp], #16 // 16-byte Folded Reload
; SME2-NEXT:    ret
  call void @za_preserved_callee();
  ret void;
}

define void @za_preserved_caller_za_callee() "aarch64_pstate_za_preserved" nounwind {
; SME-LABEL: za_preserved_caller_za_callee:
; SME:       // %bb.0:
; SME-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; SME-NEXT:    bl normal_callee
; SME-NEXT:    bl za_new_callee
; SME-NEXT:    bl za_shared_callee
; SME-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_preserved_caller_za_callee:
; SME2:       // %bb.0:
; SME2-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; SME2-NEXT:    bl normal_callee
; SME2-NEXT:    bl za_new_callee
; SME2-NEXT:    bl za_shared_callee
; SME2-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; SME2-NEXT:    ret
  call void @normal_callee();
  call void @za_new_callee();
  call void @za_shared_callee();
  ret void;
}

define void @za_preserved_caller_za_preserved_callee() "aarch64_pstate_za_preserved" nounwind {
; SME-LABEL: za_preserved_caller_za_preserved_callee:
; SME:       // %bb.0:
; SME-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; SME-NEXT:    bl za_preserved_callee
; SME-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: za_preserved_caller_za_preserved_callee:
; SME2:       // %bb.0:
; SME2-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; SME2-NEXT:    bl za_preserved_callee
; SME2-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; SME2-NEXT:    ret
  call void @za_preserved_callee();
  ret void;
}

define i32 @spill_fill_zt_load_start_chain(ptr %ptr) "aarch64_pstate_za_shared" {
; SME-LABEL: spill_fill_zt_load_start_chain:
; SME:       // %bb.0:
; SME-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; SME-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; SME-NEXT:    mov x29, sp
; SME-NEXT:    sub sp, sp, #16
; SME-NEXT:    .cfi_def_cfa w29, 32
; SME-NEXT:    .cfi_offset w19, -16
; SME-NEXT:    .cfi_offset w30, -24
; SME-NEXT:    .cfi_offset w29, -32
; SME-NEXT:    mov x8, sp
; SME-NEXT:    rdsvl x9, #1
; SME-NEXT:    msub x8, x9, x9, x8
; SME-NEXT:    mov sp, x8
; SME-NEXT:    stur wzr, [x29, #-4]
; SME-NEXT:    sturh wzr, [x29, #-6]
; SME-NEXT:    stur x8, [x29, #-16]
; SME-NEXT:    ldr w19, [x0]
; SME-NEXT:    bl za_shared_callee
; SME-NEXT:    mov w0, w19
; SME-NEXT:    mov sp, x29
; SME-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; SME-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; SME-NEXT:    ret
;
; SME2-LABEL: spill_fill_zt_load_start_chain:
; SME2:       // %bb.0:
; SME2-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; SME2-NEXT:    stp x20, x19, [sp, #16] // 16-byte Folded Spill
; SME2-NEXT:    mov x29, sp
; SME2-NEXT:    sub sp, sp, #80
; SME2-NEXT:    .cfi_def_cfa w29, 32
; SME2-NEXT:    .cfi_offset w19, -8
; SME2-NEXT:    .cfi_offset w20, -16
; SME2-NEXT:    .cfi_offset w30, -24
; SME2-NEXT:    .cfi_offset w29, -32
; SME2-NEXT:    mov x8, sp
; SME2-NEXT:    rdsvl x9, #1
; SME2-NEXT:    msub x8, x9, x9, x8
; SME2-NEXT:    mov sp, x8
; SME2-NEXT:    stur wzr, [x29, #-4]
; SME2-NEXT:    sub x20, x29, #80
; SME2-NEXT:    sturh wzr, [x29, #-6]
; SME2-NEXT:    stur x8, [x29, #-16]
; SME2-NEXT:    ldr w19, [x0]
; SME2-NEXT:    str zt0, [x20]
; SME2-NEXT:    bl za_shared_callee
; SME2-NEXT:    ldr zt0, [x20]
; SME2-NEXT:    mov w0, w19
; SME2-NEXT:    mov sp, x29
; SME2-NEXT:    ldp x20, x19, [sp, #16] // 16-byte Folded Reload
; SME2-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; SME2-NEXT:    ret
  %loadval = load i32, ptr %ptr
  call void @za_shared_callee()
  ret i32 %loadval
}
