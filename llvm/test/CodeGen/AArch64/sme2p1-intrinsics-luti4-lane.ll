; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme2p1 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=STRIDED
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme2 -mattr=+sve -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CONTIGUOUS

; lookup table expand one register
define <vscale x 32 x i8> @luti4_i8_z0_z7(<vscale x 16 x i8> %x) {
; STRIDED-LABEL: luti4_i8_z0_z7:
; STRIDED:       // %bb.0:
; STRIDED-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; STRIDED-NEXT:    addvl sp, sp, #-16
; STRIDED-NEXT:    str z23, [sp] // 16-byte Folded Spill
; STRIDED-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z12, [sp, #11, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z11, [sp, #12, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z10, [sp, #13, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z9, [sp, #14, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z8, [sp, #15, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x80, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 128 * VG
; STRIDED-NEXT:    .cfi_offset w29, -16
; STRIDED-NEXT:    .cfi_escape 0x10, 0x48, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d8 @ cfa - 16 - 8 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 16 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 24 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 32 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4c, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d12 @ cfa - 16 - 40 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 48 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x48, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 56 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x40, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 64 * VG
; STRIDED-NEXT:    luti4 { z0.b, z8.b }, zt0, z0[0]
; STRIDED-NEXT:    //APP
; STRIDED-NEXT:    nop
; STRIDED-NEXT:    //NO_APP
; STRIDED-NEXT:    mov z1.d, z8.d
; STRIDED-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z12, [sp, #11, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z11, [sp, #12, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z10, [sp, #13, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z9, [sp, #14, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z8, [sp, #15, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    addvl sp, sp, #16
; STRIDED-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; STRIDED-NEXT:    ret
;
; CONTIGUOUS-LABEL: luti4_i8_z0_z7:
; CONTIGUOUS:       // %bb.0:
; CONTIGUOUS-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-15
; CONTIGUOUS-NEXT:    str z23, [sp] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z12, [sp, #11, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z11, [sp, #12, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z10, [sp, #13, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z9, [sp, #14, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-2
; CONTIGUOUS-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x88, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 136 * VG
; CONTIGUOUS-NEXT:    .cfi_offset w29, -16
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 8 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 16 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 24 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4c, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d12 @ cfa - 16 - 32 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 40 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 48 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x48, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 56 * VG
; CONTIGUOUS-NEXT:    luti4 { z0.b, z1.b }, zt0, z0[0]
; CONTIGUOUS-NEXT:    str z0, [sp]
; CONTIGUOUS-NEXT:    str z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    //APP
; CONTIGUOUS-NEXT:    nop
; CONTIGUOUS-NEXT:    //NO_APP
; CONTIGUOUS-NEXT:    ldr z0, [sp]
; CONTIGUOUS-NEXT:    ldr z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    addvl sp, sp, #2
; CONTIGUOUS-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z12, [sp, #11, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z11, [sp, #12, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z10, [sp, #13, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z9, [sp, #14, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    addvl sp, sp, #15
; CONTIGUOUS-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CONTIGUOUS-NEXT:    ret
    %res = call {<vscale x 16 x i8>, <vscale x 16 x i8>} @llvm.aarch64.sme.luti4.lane.zt.x2.nxv16i8(i32 0, <vscale x 16 x i8> %x, i32 0)
    call void asm sideeffect "nop", "~{z1},~{z2},~{z3},~{z4},~{z5},~{z6},~{z7},~{z9},~{z10},~{z11},~{z12},~{z13},~{z14},~{z15},~{z16},~{z17},~{z18},~{z19},~{z20},~{z21},~{z22},~{z23},~{z24},~{z25},~{z26},~{z27},~{z28},~{z29},~{z30},~{z31}"() nounwind
    %res.v0 = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %res, 0
    %v0 = call <vscale x 32 x i8> @llvm.vector.insert.nxv32i8.nxv16i8(<vscale x 32 x i8> poison, <vscale x 16 x i8> %res.v0, i64 0)
    %res.v1 = extractvalue { <vscale x 16 x i8>, <vscale x 16 x i8> } %res, 1
    %v1 = call <vscale x 32 x i8> @llvm.vector.insert.nxv32i8.nxv16i8(<vscale x 32 x i8> %v0, <vscale x 16 x i8> %res.v1, i64 16)
  ret <vscale x 32 x i8> %v1
}

define <vscale x 16 x i16> @luti4_i16_z0_z7(<vscale x 8 x i16> %x) {
; STRIDED-LABEL: luti4_i16_z0_z7:
; STRIDED:       // %bb.0:
; STRIDED-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; STRIDED-NEXT:    addvl sp, sp, #-16
; STRIDED-NEXT:    str z23, [sp] // 16-byte Folded Spill
; STRIDED-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z12, [sp, #11, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z11, [sp, #12, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z10, [sp, #13, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z9, [sp, #14, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z8, [sp, #15, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x80, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 128 * VG
; STRIDED-NEXT:    .cfi_offset w29, -16
; STRIDED-NEXT:    .cfi_escape 0x10, 0x48, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d8 @ cfa - 16 - 8 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 16 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 24 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 32 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4c, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d12 @ cfa - 16 - 40 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 48 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x48, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 56 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x40, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 64 * VG
; STRIDED-NEXT:    luti4 { z0.h, z8.h }, zt0, z0[0]
; STRIDED-NEXT:    //APP
; STRIDED-NEXT:    nop
; STRIDED-NEXT:    //NO_APP
; STRIDED-NEXT:    mov z1.d, z8.d
; STRIDED-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z12, [sp, #11, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z11, [sp, #12, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z10, [sp, #13, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z9, [sp, #14, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z8, [sp, #15, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    addvl sp, sp, #16
; STRIDED-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; STRIDED-NEXT:    ret
;
; CONTIGUOUS-LABEL: luti4_i16_z0_z7:
; CONTIGUOUS:       // %bb.0:
; CONTIGUOUS-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-15
; CONTIGUOUS-NEXT:    str z23, [sp] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z12, [sp, #11, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z11, [sp, #12, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z10, [sp, #13, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z9, [sp, #14, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-2
; CONTIGUOUS-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x88, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 136 * VG
; CONTIGUOUS-NEXT:    .cfi_offset w29, -16
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 8 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 16 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 24 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4c, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d12 @ cfa - 16 - 32 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 40 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 48 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x48, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 56 * VG
; CONTIGUOUS-NEXT:    luti4 { z0.h, z1.h }, zt0, z0[0]
; CONTIGUOUS-NEXT:    str z0, [sp]
; CONTIGUOUS-NEXT:    str z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    //APP
; CONTIGUOUS-NEXT:    nop
; CONTIGUOUS-NEXT:    //NO_APP
; CONTIGUOUS-NEXT:    ldr z0, [sp]
; CONTIGUOUS-NEXT:    ldr z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    addvl sp, sp, #2
; CONTIGUOUS-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z12, [sp, #11, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z11, [sp, #12, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z10, [sp, #13, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z9, [sp, #14, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    addvl sp, sp, #15
; CONTIGUOUS-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CONTIGUOUS-NEXT:    ret
    %res = call {<vscale x 8 x i16>, <vscale x 8 x i16>} @llvm.aarch64.sme.luti4.lane.zt.x2.nxv8i16(i32 0, <vscale x 8 x i16> %x, i32 0)
    call void asm sideeffect "nop", "~{z1},~{z2},~{z3},~{z4},~{z5},~{z6},~{z7},~{z9},~{z10},~{z11},~{z12},~{z13},~{z14},~{z15},~{z16},~{z17},~{z18},~{z19},~{z20},~{z21},~{z22},~{z23},~{z24},~{z25},~{z26},~{z27},~{z28},~{z29},~{z30},~{z31}"() nounwind
    %res.v0 = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %res, 0
    %v0 = call <vscale x 16 x i16> @llvm.vector.insert.nxv16i16.nxv8i16(<vscale x 16 x i16> poison, <vscale x 8 x i16> %res.v0, i64 0)
    %res.v1 = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16> } %res, 1
    %v1 = call <vscale x 16 x i16> @llvm.vector.insert.nxv16i16.nxv8i16(<vscale x 16 x i16> %v0, <vscale x 8 x i16> %res.v1, i64 8)
  ret <vscale x 16 x i16> %v1
}

define <vscale x 32 x i16> @luti4_i16_z0_z4_z8_z12(<vscale x 8 x i16> %x) {
; STRIDED-LABEL: luti4_i16_z0_z4_z8_z12:
; STRIDED:       // %bb.0:
; STRIDED-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; STRIDED-NEXT:    addvl sp, sp, #-16
; STRIDED-NEXT:    str z23, [sp] // 16-byte Folded Spill
; STRIDED-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z12, [sp, #11, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z11, [sp, #12, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z10, [sp, #13, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z9, [sp, #14, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z8, [sp, #15, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x80, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 128 * VG
; STRIDED-NEXT:    .cfi_offset w29, -16
; STRIDED-NEXT:    .cfi_escape 0x10, 0x48, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d8 @ cfa - 16 - 8 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 16 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 24 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 32 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4c, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d12 @ cfa - 16 - 40 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 48 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x48, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 56 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x40, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 64 * VG
; STRIDED-NEXT:    luti4 { z0.h, z4.h, z8.h, z12.h }, zt0, z0[0]
; STRIDED-NEXT:    //APP
; STRIDED-NEXT:    nop
; STRIDED-NEXT:    //NO_APP
; STRIDED-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z12, [sp, #11, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z11, [sp, #12, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z10, [sp, #13, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z9, [sp, #14, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z8, [sp, #15, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    mov z3.d, z4.d
; STRIDED-NEXT:    addvl sp, sp, #16
; STRIDED-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; STRIDED-NEXT:    ret
;
; CONTIGUOUS-LABEL: luti4_i16_z0_z4_z8_z12:
; CONTIGUOUS:       // %bb.0:
; CONTIGUOUS-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-14
; CONTIGUOUS-NEXT:    str z23, [sp] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z11, [sp, #11, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z10, [sp, #12, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z9, [sp, #13, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-4
; CONTIGUOUS-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x90, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 144 * VG
; CONTIGUOUS-NEXT:    .cfi_offset w29, -16
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 8 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 16 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 24 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 32 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 40 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 48 * VG
; CONTIGUOUS-NEXT:    luti4 { z0.h - z3.h }, zt0, z0[0]
; CONTIGUOUS-NEXT:    str z0, [sp]
; CONTIGUOUS-NEXT:    str z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    str z2, [sp, #2, mul vl]
; CONTIGUOUS-NEXT:    str z3, [sp, #3, mul vl]
; CONTIGUOUS-NEXT:    //APP
; CONTIGUOUS-NEXT:    nop
; CONTIGUOUS-NEXT:    //NO_APP
; CONTIGUOUS-NEXT:    ldr z0, [sp]
; CONTIGUOUS-NEXT:    ldr z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    ldr z2, [sp, #2, mul vl]
; CONTIGUOUS-NEXT:    ldr z3, [sp, #3, mul vl]
; CONTIGUOUS-NEXT:    mov z3.d, z1.d
; CONTIGUOUS-NEXT:    addvl sp, sp, #4
; CONTIGUOUS-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z11, [sp, #11, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z10, [sp, #12, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z9, [sp, #13, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    addvl sp, sp, #14
; CONTIGUOUS-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CONTIGUOUS-NEXT:    ret
  %res = call {<vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>} @llvm.aarch64.sme.luti4.lane.zt.x4.nxv8i16(i32 0, <vscale x 8 x i16> %x, i32 0)
  call void asm sideeffect "nop", "~{z1},~{z2},~{z3},~{z5},~{z6},~{z7},~{z9},~{z10},~{z11},~{z13},~{z14},~{z15},~{z16},~{z17},~{z18},~{z19},~{z20},~{z21},~{z22},~{z23},~{z24},~{z25},~{z26},~{z27},~{z28},~{z29},~{z30},~{z31}"() nounwind
  %res.v0 = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %res, 0
  %v0 = call <vscale x 32 x i16> @llvm.vector.insert.nxv32i16.nxv16i16(<vscale x 32 x i16> poison, <vscale x 8 x i16> %res.v0, i64 0)
  %res.v1 = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %res, 1
  %v1 = call <vscale x 32 x i16> @llvm.vector.insert.nxv32i16.nxv16i16(<vscale x 32 x i16> %v0, <vscale x 8 x i16> %res.v1, i64 8)
  %res.v2 = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %res, 2
  %v2 = call <vscale x 32 x i16> @llvm.vector.insert.nxv32i16.nxv16i16(<vscale x 32 x i16> poison, <vscale x 8 x i16> %res.v0, i64 16)
  %res.v3 = extractvalue { <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16> } %res, 3
  %v3 = call <vscale x 32 x i16> @llvm.vector.insert.nxv32i16.nxv16i16(<vscale x 32 x i16> %v0, <vscale x 8 x i16> %res.v1, i64 24)
  ret <vscale x 32 x i16> %v3
}

define <vscale x 16 x i32> @luti4_i8_z0_z4_z8_z12(<vscale x 4 x i32> %x) {
; STRIDED-LABEL: luti4_i8_z0_z4_z8_z12:
; STRIDED:       // %bb.0:
; STRIDED-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; STRIDED-NEXT:    addvl sp, sp, #-16
; STRIDED-NEXT:    str z23, [sp] // 16-byte Folded Spill
; STRIDED-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z12, [sp, #11, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z11, [sp, #12, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z10, [sp, #13, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z9, [sp, #14, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    str z8, [sp, #15, mul vl] // 16-byte Folded Spill
; STRIDED-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x80, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 128 * VG
; STRIDED-NEXT:    .cfi_offset w29, -16
; STRIDED-NEXT:    .cfi_escape 0x10, 0x48, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d8 @ cfa - 16 - 8 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 16 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 24 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 32 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4c, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d12 @ cfa - 16 - 40 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 48 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x48, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 56 * VG
; STRIDED-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x40, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 64 * VG
; STRIDED-NEXT:    luti4 { z0.s, z4.s, z8.s, z12.s }, zt0, z0[0]
; STRIDED-NEXT:    //APP
; STRIDED-NEXT:    nop
; STRIDED-NEXT:    //NO_APP
; STRIDED-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z12, [sp, #11, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z11, [sp, #12, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z10, [sp, #13, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z9, [sp, #14, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    ldr z8, [sp, #15, mul vl] // 16-byte Folded Reload
; STRIDED-NEXT:    mov z3.d, z4.d
; STRIDED-NEXT:    addvl sp, sp, #16
; STRIDED-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; STRIDED-NEXT:    ret
;
; CONTIGUOUS-LABEL: luti4_i8_z0_z4_z8_z12:
; CONTIGUOUS:       // %bb.0:
; CONTIGUOUS-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-14
; CONTIGUOUS-NEXT:    str z23, [sp] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z22, [sp, #1, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z21, [sp, #2, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z20, [sp, #3, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z19, [sp, #4, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z18, [sp, #5, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z17, [sp, #6, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z16, [sp, #7, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z15, [sp, #8, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z14, [sp, #9, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z13, [sp, #10, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z11, [sp, #11, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z10, [sp, #12, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    str z9, [sp, #13, mul vl] // 16-byte Folded Spill
; CONTIGUOUS-NEXT:    addvl sp, sp, #-4
; CONTIGUOUS-NEXT:    .cfi_escape 0x0f, 0x0d, 0x8f, 0x00, 0x11, 0x10, 0x22, 0x11, 0x90, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x22 // sp + 16 + 144 * VG
; CONTIGUOUS-NEXT:    .cfi_offset w29, -16
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x49, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x78, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d9 @ cfa - 16 - 8 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4a, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x70, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d10 @ cfa - 16 - 16 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4b, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x68, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d11 @ cfa - 16 - 24 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4d, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x60, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d13 @ cfa - 16 - 32 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4e, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x58, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d14 @ cfa - 16 - 40 * VG
; CONTIGUOUS-NEXT:    .cfi_escape 0x10, 0x4f, 0x0a, 0x11, 0x70, 0x22, 0x11, 0x50, 0x92, 0x2e, 0x00, 0x1e, 0x22 // $d15 @ cfa - 16 - 48 * VG
; CONTIGUOUS-NEXT:    luti4 { z0.s - z3.s }, zt0, z0[0]
; CONTIGUOUS-NEXT:    str z0, [sp]
; CONTIGUOUS-NEXT:    str z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    str z2, [sp, #2, mul vl]
; CONTIGUOUS-NEXT:    str z3, [sp, #3, mul vl]
; CONTIGUOUS-NEXT:    //APP
; CONTIGUOUS-NEXT:    nop
; CONTIGUOUS-NEXT:    //NO_APP
; CONTIGUOUS-NEXT:    ldr z0, [sp]
; CONTIGUOUS-NEXT:    ldr z1, [sp, #1, mul vl]
; CONTIGUOUS-NEXT:    ldr z2, [sp, #2, mul vl]
; CONTIGUOUS-NEXT:    ldr z3, [sp, #3, mul vl]
; CONTIGUOUS-NEXT:    mov z3.d, z1.d
; CONTIGUOUS-NEXT:    addvl sp, sp, #4
; CONTIGUOUS-NEXT:    ldr z23, [sp] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z22, [sp, #1, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z21, [sp, #2, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z20, [sp, #3, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z19, [sp, #4, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z18, [sp, #5, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z17, [sp, #6, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z16, [sp, #7, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z15, [sp, #8, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z14, [sp, #9, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z13, [sp, #10, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z11, [sp, #11, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z10, [sp, #12, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    ldr z9, [sp, #13, mul vl] // 16-byte Folded Reload
; CONTIGUOUS-NEXT:    addvl sp, sp, #14
; CONTIGUOUS-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CONTIGUOUS-NEXT:    ret
  %res = call {<vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>} @llvm.aarch64.sme.luti4.lane.zt.x4.nxv4i32(i32 0, <vscale x 4 x i32> %x, i32 0)
  call void asm sideeffect "nop", "~{z1},~{z2},~{z3},~{z5},~{z6},~{z7},~{z9},~{z10},~{z11},~{z13},~{z14},~{z15},~{z16},~{z17},~{z18},~{z19},~{z20},~{z21},~{z22},~{z23},~{z24},~{z25},~{z26},~{z27},~{z28},~{z29},~{z30},~{z31}"() nounwind
  %res.v0 = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %res, 0
  %v0 = call <vscale x 16 x i32> @llvm.vector.insert.nxv16i32.nxv16i32(<vscale x 16 x i32> poison, <vscale x 4 x i32> %res.v0, i64 0)
  %res.v1 = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %res, 1
  %v1 = call <vscale x 16 x i32> @llvm.vector.insert.nxv16i32.nxv16i32(<vscale x 16 x i32> %v0, <vscale x 4 x i32> %res.v1, i64 4)
  %res.v2 = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %res, 2
  %v2 = call <vscale x 16 x i32> @llvm.vector.insert.nxv16i32.nxv16i32(<vscale x 16 x i32> poison, <vscale x 4 x i32> %res.v0, i64 8)
  %res.v3 = extractvalue { <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32> } %res, 3
  %v3 = call <vscale x 16 x i32> @llvm.vector.insert.nxv16i32.nxv16i32(<vscale x 16 x i32> %v0, <vscale x 4 x i32> %res.v1, i64 12)
  ret <vscale x 16 x i32> %v3
}

declare {<vscale x 16 x i8>, <vscale x 16 x i8>} @llvm.aarch64.sme.luti4.lane.zt.x2.nxv16i8(i32, <vscale x 16 x i8>, i32)
declare {<vscale x 8 x i16>, <vscale x 8 x i16>} @llvm.aarch64.sme.luti4.lane.zt.x2.nxv8i16(i32, <vscale x 8 x i16>, i32)
declare {<vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>, <vscale x 4 x i32>} @llvm.aarch64.sme.luti4.lane.zt.x4.nxv4i32(i32, <vscale x 4 x i32>, i32)
declare {<vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>, <vscale x 8 x i16>} @llvm.aarch64.sme.luti4.lane.zt.x4.nxv8i16(i32, <vscale x 8 x i16>, i32)
declare <vscale x 64 x i8> @llvm.vector.insert.nxv64i8.nxv16i8(<vscale x 64 x i8>, <vscale x 16 x i8>, i64)
declare <vscale x 32 x i8> @llvm.vector.insert.nxv32i8.nxv16i8(<vscale x 32 x i8>, <vscale x 16 x i8>, i64)
declare <vscale x 32 x i8> @llvm.vector.insert.nxv32i16.nxv16i8(<vscale x 32 x i8>, <vscale x 16 x i8>, i64)
declare <vscale x 32 x i16> @llvm.vector.insert.nxv32i16.nxv16i16(<vscale x 32 x i16>, <vscale x 8 x i16>, i64)
declare <vscale x 16 x i16> @llvm.vector.insert.nxv16i16.nxv8i16(<vscale x 16 x i16>, <vscale x 8 x i16>, i64)
declare <vscale x 16 x i32> @llvm.vector.insert.nxv16i32.nxv16i32(<vscale x 16 x i32>, <vscale x 4 x i32>, i64)
