# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 2
# RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme -run-pass=aarch64-sme-peephole-opt -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = '<stdin>'
  source_filename = "<stdin>"
  target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64-unknown-linux-gnu"

  declare void @normal_callee() #0

  ; Function Attrs: nounwind
  define void @streaming_compatible_smstartstop_match() #1 {
    call void @normal_callee()
    call void @normal_callee()
    ret void
  }

  ; Function Attrs: nounwind
  define void @streaming_compatible_smstartstop_regmask() #1 {
    call void @normal_callee()
    call void @normal_callee()
    ret void
  }

  ; Function Attrs: nounwind
  define void @streaming_compatible_smstartstop_physical_regs() #1 {
    call void @normal_callee()
    call void @normal_callee()
    ret void
  }

  attributes #0 = { "target-features"="+sme" }
  attributes #1 = { nounwind "aarch64_expanded_pstate_za" "aarch64_pstate_sm_compatible" "target-features"="+sme" }

...
---
# smstart/smstop pair can be removed by aarch64-sme-peephole-opt as the virtual registers for pstate.sm match

name:            streaming_compatible_smstartstop_match
alignment:       4
tracksRegLiveness: true
liveins: []
body:             |
  bb.0 (%ir-block.0):
    ; CHECK-LABEL: name: streaming_compatible_smstartstop_match
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr64 = COPY $x0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 0, [[COPY]], 0, csr_aarch64_smstartstop, implicit-def $sp
    ; CHECK-NEXT: BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 1, [[COPY]], 0, csr_aarch64_smstartstop
    ; CHECK-NEXT: RET_ReallyLR
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %0:gpr64 = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 0, %0, 0, csr_aarch64_smstartstop, implicit-def $sp
    BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 1, %0, 0, csr_aarch64_smstartstop
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 0, %0, 0, csr_aarch64_smstartstop, implicit-def $sp
    BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 1, %0, 0, csr_aarch64_smstartstop
    RET_ReallyLR
...
---
# No smstart/smstop pairs should be removed by aarch64-sme-peephole-opt as the register masks do not match

name:            streaming_compatible_smstartstop_regmask
alignment:       4
tracksRegLiveness: true
liveins: []
body:             |
  bb.0 (%ir-block.0):
    ; CHECK-LABEL: name: streaming_compatible_smstartstop_regmask
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr64 = COPY $x0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 0, [[COPY]], 0, csr_aarch64_smstartstop, implicit-def $sp
    ; CHECK-NEXT: BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 1, [[COPY]], 0, csr_aarch64_smstartstop
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 0, [[COPY]], 0, csr_aarch64_aapcs, implicit-def $sp
    ; CHECK-NEXT: BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 1, [[COPY]], 0, csr_aarch64_smstartstop
    ; CHECK-NEXT: RET_ReallyLR
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %0:gpr64 = COPY $x0
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 0, %0, 0, csr_aarch64_smstartstop, implicit-def $sp
    BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 1, %0, 0, csr_aarch64_smstartstop
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 0, %0, 0, csr_aarch64_aapcs, implicit-def $sp
    BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 1, %0, 0, csr_aarch64_smstartstop
    RET_ReallyLR
...
---
# No smstart/smstop pairs should be removed by aarch64-sme-peephole-opt as the value of pstate.sm is held in a physical register

name:            streaming_compatible_smstartstop_physical_regs
alignment:       4
tracksRegLiveness: true
liveins: []
body:             |
  bb.0 (%ir-block.0):
    ; CHECK-LABEL: name: streaming_compatible_smstartstop_physical_regs
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 0, undef $x7, 0, csr_aarch64_smstartstop, implicit-def $sp
    ; CHECK-NEXT: BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 1, undef $x7, 0, csr_aarch64_smstartstop
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 0, undef $x7, 0, csr_aarch64_smstartstop, implicit-def $sp
    ; CHECK-NEXT: BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ; CHECK-NEXT: MSRpstatePseudo 1, 1, undef $x7, 0, csr_aarch64_smstartstop
    ; CHECK-NEXT: RET_ReallyLR
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 0, undef $x7, 0, csr_aarch64_smstartstop, implicit-def $sp
    BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 1, undef $x7, 0, csr_aarch64_smstartstop
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    BL &__arm_sme_state, csr_aarch64_sme_abi_support_routines_preservemost_from_x2, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 0, undef $x7, 0, csr_aarch64_smstartstop, implicit-def $sp
    BL @normal_callee, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    MSRpstatePseudo 1, 1, undef $x7, 0, csr_aarch64_smstartstop
    RET_ReallyLR
...
