; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -o - %s | FileCheck %s

; AsmPrinter cannot lower floating point constant expressions in global
; initializers. Check that we do not create new globals with float constant
; expressions in initializers.

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-ios14.0.0"

define [1 x <4 x float>] @test1() {
; CHECK-LABEL: test1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh0:
; CHECK-NEXT:    adrp x8, lCPI0_0@PAGE
; CHECK-NEXT:  Lloh1:
; CHECK-NEXT:    ldr q0, [x8, lCPI0_0@PAGEOFF]
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpLdr Lloh0, Lloh1

  ret [1 x <4 x float>] [<4 x float> bitcast (<1 x i128> <i128 84405977732342157929391748327801880576> to <4 x float>)]
}

define [1 x <4 x float>] @test2() {
; CHECK-LABEL: test2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh2:
; CHECK-NEXT:    adrp x8, lCPI1_0@PAGE
; CHECK-NEXT:  Lloh3:
; CHECK-NEXT:    ldr q1, [x8, lCPI1_0@PAGEOFF]
; CHECK-NEXT:    mov s2, v1[1]
; CHECK-NEXT:    fneg s0, s1
; CHECK-NEXT:    mov s3, v1[2]
; CHECK-NEXT:    mov s1, v1[3]
; CHECK-NEXT:    fneg s2, s2
; CHECK-NEXT:    fneg s3, s3
; CHECK-NEXT:    fneg s1, s1
; CHECK-NEXT:    mov.s v0[1], v2[0]
; CHECK-NEXT:    mov.s v0[2], v3[0]
; CHECK-NEXT:    mov.s v0[3], v1[0]
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpLdr Lloh2, Lloh3
  %constexpr = fneg float extractelement (<4 x float> bitcast (<1 x i128> <i128 84405977732342157929391748327801880576> to <4 x float>), i32 0)
  %constexpr1 = fneg float extractelement (<4 x float> bitcast (<1 x i128> <i128 84405977732342157929391748327801880576> to <4 x float>), i32 1)
  %constexpr2 = fneg float extractelement (<4 x float> bitcast (<1 x i128> <i128 84405977732342157929391748327801880576> to <4 x float>), i32 2)
  %constexpr3 = fneg float extractelement (<4 x float> bitcast (<1 x i128> <i128 84405977732342157929391748327801880576> to <4 x float>), i32 3)
  %constexpr.ins = insertelement <4 x float> poison, float %constexpr, i32 0
  %constexpr.ins4 = insertelement <4 x float> %constexpr.ins, float %constexpr1, i32 1
  %constexpr.ins5 = insertelement <4 x float> %constexpr.ins4, float %constexpr2, i32 2
  %constexpr.ins6 = insertelement <4 x float> %constexpr.ins5, float %constexpr3, i32 3
  %constexpr.ins7 = insertvalue [1 x <4 x float>] poison, <4 x float> %constexpr.ins6, 0
  ret [1 x <4 x float>] %constexpr.ins7
}
