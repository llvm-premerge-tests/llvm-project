; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sme -verify-machineinstrs -o - %S/sme-exceptions-with-streaming-mode.ll | FileCheck %s

; CHECK-LABEL: no_za_streaming_enabled:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp d15, d14, [sp, #-80]! // 16-byte Folded Spill
; CHECK-NEXT:    stp d13, d12, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    stp d11, d10, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    stp d9, d8, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    str x30, [sp, #64] // 8-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 80
; CHECK-NEXT:    .cfi_offset w30, -16
; CHECK-NEXT:    .cfi_offset b8, -24
; CHECK-NEXT:    .cfi_offset b9, -32
; CHECK-NEXT:    .cfi_offset b10, -40
; CHECK-NEXT:    .cfi_offset b11, -48
; CHECK-NEXT:    .cfi_offset b12, -56
; CHECK-NEXT:    .cfi_offset b13, -64
; CHECK-NEXT:    .cfi_offset b14, -72
; CHECK-NEXT:    .cfi_offset b15, -80
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:    bl normal_callee
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    mov w0, #15 // =0xf
; CHECK-NEXT:  .LBB0_2: // %return
; CHECK-NEXT:    ldp d9, d8, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d11, d10, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d13, d12, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldr x30, [sp, #64] // 8-byte Folded Reload
; CHECK-NEXT:    ldp d15, d14, [sp], #80 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB0_3: // %lpad
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:    b .LBB0_2
;
; CHECK-LABEL: no_za_streaming_compatible:
; CHECK:       .Lfunc_begin1:
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    stp d15, d14, [sp, #-96]! // 16-byte Folded Spill
; CHECK-NEXT:    stp d13, d12, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    stp d11, d10, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    stp d9, d8, [sp, #48] // 16-byte Folded Spill
; CHECK-NEXT:    str x30, [sp, #64] // 8-byte Folded Spill
; CHECK-NEXT:    stp x20, x19, [sp, #80] // 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 96
; CHECK-NEXT:    .cfi_offset w19, -8
; CHECK-NEXT:    .cfi_offset w20, -16
; CHECK-NEXT:    .cfi_offset w30, -32
; CHECK-NEXT:    .cfi_offset b8, -40
; CHECK-NEXT:    .cfi_offset b9, -48
; CHECK-NEXT:    .cfi_offset b10, -56
; CHECK-NEXT:    .cfi_offset b11, -64
; CHECK-NEXT:    .cfi_offset b12, -72
; CHECK-NEXT:    .cfi_offset b13, -80
; CHECK-NEXT:    .cfi_offset b14, -88
; CHECK-NEXT:    .cfi_offset b15, -96
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x19, x0, #0x1
; CHECK-NEXT:  .Ltmp3:
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x20, x0, #0x1
; CHECK-NEXT:    tbz x20, #0, .LBB1_2
; CHECK-NEXT:  // %bb.1: // %entry
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:  .LBB1_2: // %entry
; CHECK-NEXT:    bl normal_callee
; CHECK-NEXT:    tbz x20, #0, .LBB1_4
; CHECK-NEXT:  // %bb.3: // %entry
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_4: // %entry
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:  // %bb.5:
; CHECK-NEXT:    mov w0, #15 // =0xf
; CHECK-NEXT:  .LBB1_6: // %return
; CHECK-NEXT:    ldp x20, x19, [sp, #80] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d9, d8, [sp, #48] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d11, d10, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    ldp d13, d12, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    ldr x30, [sp, #64] // 8-byte Folded Reload
; CHECK-NEXT:    ldp d15, d14, [sp], #96 // 16-byte Folded Reload
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB1_7: // %lpad
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    mov x2, x0
; CHECK-NEXT:    tbz x19, #0, .LBB1_9
; CHECK-NEXT:  // %bb.8: // %lpad
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_9: // %lpad
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x19, x0, #0x1
; CHECK-NEXT:    tbz x19, #0, .LBB1_11
; CHECK-NEXT:  // %bb.10: // %lpad
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:  .LBB1_11: // %lpad
; CHECK-NEXT:    mov x0, x2
; CHECK-NEXT:    bl __cxa_begin_catch
; CHECK-NEXT:    tbz x19, #0, .LBB1_13
; CHECK-NEXT:  // %bb.12: // %lpad
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_13: // %lpad
; CHECK-NEXT:    bl __arm_sme_state
; CHECK-NEXT:    and x19, x0, #0x1
; CHECK-NEXT:    tbz x19, #0, .LBB1_15
; CHECK-NEXT:  // %bb.14: // %lpad
; CHECK-NEXT:    smstop sm
; CHECK-NEXT:  .LBB1_15: // %lpad
; CHECK-NEXT:    bl __cxa_end_catch
; CHECK-NEXT:    tbz x19, #0, .LBB1_17
; CHECK-NEXT:  // %bb.16: // %lpad
; CHECK-NEXT:    smstart sm
; CHECK-NEXT:  .LBB1_17: // %lpad
; CHECK-NEXT:    mov w0, #23 // =0x17
; CHECK-NEXT:    b .LBB1_6
