; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve < %s | FileCheck %s -check-prefixes=CHECK,CHECK_SVE
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve -aarch64-sve-vector-bits-min=128 -aarch64-sve-vector-bits-max=128  < %s | FileCheck %s -check-prefixes=CHECK,SVE2_128
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve -aarch64-sve-vector-bits-min=1024 -aarch64-sve-vector-bits-max=1024  < %s | FileCheck %s -check-prefixes=CHECK,SVE2_1024
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve -aarch64-sve-vector-bits-min=2048 -aarch64-sve-vector-bits-max=2048  < %s | FileCheck %s -check-prefixes=CHECK,SVE2_2048

target triple = "aarch64-unknown-linux-gnu"

define <4 x i8> @shuffle_ext_byone_v4i8(<4 x i8> %op1, <4 x i8> %op2) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v4i8:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK_SVE-NEXT:    mov z1.h, z0.h[1]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z2.h, z0.h[2]
; CHECK_SVE-NEXT:    mov z3.h, z0.h[3]
; CHECK_SVE-NEXT:    strh w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strh w8, [sp, #14]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strh w9, [sp, #12]
; CHECK_SVE-NEXT:    strh w8, [sp, #10]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v4i8:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI0_0
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 def $z0
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI0_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v4i8:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    adrp x8, .LCPI0_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI0_0
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 def $z0
; SVE2_1024-NEXT:    ld1h { z1.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v4i8:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    adrp x8, .LCPI0_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI0_0
; SVE2_2048-NEXT:    // kill: def $d0 killed $d0 def $z0
; SVE2_2048-NEXT:    ld1h { z1.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_2048-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_2048-NEXT:    ret
  %ret = shufflevector <4 x i8> %op1, <4 x i8> %op2, <4 x i32> <i32 0, i32 3, i32 2, i32 1>
  ret <4 x i8> %ret
}

define <8 x i8> @shuffle_ext_byone_v8i8(<8 x i8> %op1, <8 x i8> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    mov z0.b, z0.b[7]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    insr z1.b, w8
; CHECK-NEXT:    fmov d0, d1
; CHECK-NEXT:    ret
  %ret = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  ret <8 x i8> %ret
}

define <16 x i8> @shuffle_ext_byone_v16i8(<16 x i8> %op1, <16 x i8> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    mov z0.b, z0.b[15]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    insr z1.b, w8
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    ret
  %ret = shufflevector <16 x i8> %op1, <16 x i8> %op2, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,
                                                                   i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  ret <16 x i8> %ret
}

define void @shuffle_ext_byone_v32i8(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v32i8:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[15]
; CHECK_SVE-NEXT:    mov z2.b, z1.b[15]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    insr z1.b, w8
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    insr z3.b, w8
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v32i8:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    mov z0.b, z0.b[15]
; SVE2_128-NEXT:    mov z2.b, z1.b[15]
; SVE2_128-NEXT:    fmov w8, s0
; SVE2_128-NEXT:    insr z1.b, w8
; SVE2_128-NEXT:    fmov w8, s2
; SVE2_128-NEXT:    insr z3.b, w8
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v32i8:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.b, vl32
; SVE2_1024-NEXT:    ld1b { z0.b }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1b { z1.b }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.b, z0.b[31]
; SVE2_1024-NEXT:    fmov w8, s0
; SVE2_1024-NEXT:    insr z1.b, w8
; SVE2_1024-NEXT:    st1b { z1.b }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v32i8:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.b, vl32
; SVE2_2048-NEXT:    ld1b { z0.b }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1b { z1.b }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.b, z0.b[31]
; SVE2_2048-NEXT:    fmov w8, s0
; SVE2_2048-NEXT:    insr z1.b, w8
; SVE2_2048-NEXT:    st1b { z1.b }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <32 x i8>, ptr %a
  %op2 = load <32 x i8>, ptr %b
  %ret = shufflevector <32 x i8> %op1, <32 x i8> %op2, <32 x i32> <i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38,
                                                                   i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46,
                                                                   i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54,
                                                                   i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62>
  store <32 x i8> %ret, ptr %a
  ret void
}

define <2 x i16> @shuffle_ext_byone_v2i16(<2 x i16> %op1, <2 x i16> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v2i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    revw z0.d, p0/m, z0.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %ret = shufflevector <2 x i16> %op1, <2 x i16> %op2, <2 x i32> <i32 1, i32 0>
  ret <2 x i16> %ret
}

define <4 x i16> @shuffle_ext_byone_v4i16(<4 x i16> %op1, <4 x i16> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    mov z0.h, z0.h[3]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    insr z1.h, w8
; CHECK-NEXT:    fmov d0, d1
; CHECK-NEXT:    ret
  %ret = shufflevector <4 x i16> %op1, <4 x i16> %op2, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  ret <4 x i16> %ret
}

define <8 x i16> @shuffle_ext_byone_v8i16(<8 x i16> %op1, <8 x i16> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    mov z0.h, z0.h[7]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    insr z1.h, w8
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    ret
  %ret = shufflevector <8 x i16> %op1, <8 x i16> %op2, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  ret <8 x i16> %ret
}

define void @shuffle_ext_byone_v16i16(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v16i16:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    mov z0.h, z0.h[7]
; CHECK_SVE-NEXT:    mov z2.h, z1.h[7]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    insr z1.h, w8
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    insr z3.h, w8
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v16i16:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    mov z0.h, z0.h[7]
; SVE2_128-NEXT:    mov z2.h, z1.h[7]
; SVE2_128-NEXT:    fmov w8, s0
; SVE2_128-NEXT:    insr z1.h, w8
; SVE2_128-NEXT:    fmov w8, s2
; SVE2_128-NEXT:    insr z3.h, w8
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v16i16:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h, vl16
; SVE2_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1h { z1.h }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.h, z0.h[15]
; SVE2_1024-NEXT:    fmov w8, s0
; SVE2_1024-NEXT:    insr z1.h, w8
; SVE2_1024-NEXT:    st1h { z1.h }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v16i16:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h, vl16
; SVE2_2048-NEXT:    ld1h { z0.h }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1h { z1.h }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.h, z0.h[15]
; SVE2_2048-NEXT:    fmov w8, s0
; SVE2_2048-NEXT:    insr z1.h, w8
; SVE2_2048-NEXT:    st1h { z1.h }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <16 x i16>, ptr %a
  %op2 = load <16 x i16>, ptr %b
  %ret = shufflevector <16 x i16> %op1, <16 x i16> %op2, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,
                                                                     i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  store <16 x i16> %ret, ptr %a
  ret void
}

define <2 x i32> @shuffle_ext_byone_v2i32(<2 x i32> %op1, <2 x i32> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    mov z0.s, z0.s[1]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    insr z1.s, w8
; CHECK-NEXT:    fmov d0, d1
; CHECK-NEXT:    ret
  %ret = shufflevector <2 x i32> %op1, <2 x i32> %op2, <2 x i32> <i32 1, i32 2>
  ret <2 x i32> %ret
}

define <4 x i32> @shuffle_ext_byone_v4i32(<4 x i32> %op1, <4 x i32> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    mov z0.s, z0.s[3]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    insr z1.s, w8
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    ret
  %ret = shufflevector <4 x i32> %op1, <4 x i32> %op2, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  ret <4 x i32> %ret
}

define void @shuffle_ext_byone_v8i32(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v8i32:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    mov z0.s, z0.s[3]
; CHECK_SVE-NEXT:    mov z2.s, z1.s[3]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    insr z1.s, w8
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    insr z3.s, w8
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v8i32:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    mov z0.s, z0.s[3]
; SVE2_128-NEXT:    mov z2.s, z1.s[3]
; SVE2_128-NEXT:    fmov w8, s0
; SVE2_128-NEXT:    insr z1.s, w8
; SVE2_128-NEXT:    fmov w8, s2
; SVE2_128-NEXT:    insr z3.s, w8
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v8i32:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.s, vl8
; SVE2_1024-NEXT:    ld1w { z0.s }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1w { z1.s }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.s, z0.s[7]
; SVE2_1024-NEXT:    fmov w8, s0
; SVE2_1024-NEXT:    insr z1.s, w8
; SVE2_1024-NEXT:    st1w { z1.s }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v8i32:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.s, vl8
; SVE2_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1w { z1.s }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.s, z0.s[7]
; SVE2_2048-NEXT:    fmov w8, s0
; SVE2_2048-NEXT:    insr z1.s, w8
; SVE2_2048-NEXT:    st1w { z1.s }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %op2 = load <8 x i32>, ptr %b
  %ret = shufflevector <8 x i32> %op1, <8 x i32> %op2, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  store <8 x i32> %ret, ptr %a
  ret void
}

define <2 x i64> @shuffle_ext_byone_v2i64(<2 x i64> %op1, <2 x i64> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    mov z0.d, z0.d[1]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    insr z1.d, x8
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    ret
  %ret = shufflevector <2 x i64> %op1, <2 x i64> %op2, <2 x i32> <i32 1, i32 2>
  ret <2 x i64> %ret
}

define void @shuffle_ext_byone_v4i64(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v4i64:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    mov z0.d, z0.d[1]
; CHECK_SVE-NEXT:    mov z2.d, z1.d[1]
; CHECK_SVE-NEXT:    fmov x8, d0
; CHECK_SVE-NEXT:    insr z1.d, x8
; CHECK_SVE-NEXT:    fmov x8, d2
; CHECK_SVE-NEXT:    insr z3.d, x8
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v4i64:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    mov z0.d, z0.d[1]
; SVE2_128-NEXT:    mov z2.d, z1.d[1]
; SVE2_128-NEXT:    fmov x8, d0
; SVE2_128-NEXT:    insr z1.d, x8
; SVE2_128-NEXT:    fmov x8, d2
; SVE2_128-NEXT:    insr z3.d, x8
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v4i64:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.d, vl4
; SVE2_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.d, z0.d[3]
; SVE2_1024-NEXT:    fmov x8, d0
; SVE2_1024-NEXT:    insr z1.d, x8
; SVE2_1024-NEXT:    st1d { z1.d }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v4i64:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.d, vl4
; SVE2_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.d, z0.d[3]
; SVE2_2048-NEXT:    fmov x8, d0
; SVE2_2048-NEXT:    insr z1.d, x8
; SVE2_2048-NEXT:    st1d { z1.d }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x i64>, ptr %a
  %op2 = load <4 x i64>, ptr %b
  %ret = shufflevector <4 x i64> %op1, <4 x i64> %op2, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  store <4 x i64> %ret, ptr %a
  ret void
}


define <4 x half> @shuffle_ext_byone_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    mov z2.h, z0.h[3]
; CHECK-NEXT:    fmov d0, d1
; CHECK-NEXT:    insr z0.h, h2
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %ret = shufflevector <4 x half> %op1, <4 x half> %op2, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  ret <4 x half> %ret
}

define <8 x half> @shuffle_ext_byone_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.h, z0.h[7]
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    insr z0.h, h2
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %ret = shufflevector <8 x half> %op1, <8 x half> %op2, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  ret <8 x half> %ret
}

define void @shuffle_ext_byone_v16f16(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v16f16:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    mov z0.h, z0.h[7]
; CHECK_SVE-NEXT:    mov z2.h, z1.h[7]
; CHECK_SVE-NEXT:    insr z1.h, h0
; CHECK_SVE-NEXT:    insr z3.h, h2
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v16f16:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    mov z0.h, z0.h[7]
; SVE2_128-NEXT:    mov z2.h, z1.h[7]
; SVE2_128-NEXT:    insr z1.h, h0
; SVE2_128-NEXT:    insr z3.h, h2
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v16f16:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h, vl16
; SVE2_1024-NEXT:    ld1h { z0.h }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1h { z1.h }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.h, z0.h[15]
; SVE2_1024-NEXT:    insr z1.h, h0
; SVE2_1024-NEXT:    st1h { z1.h }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v16f16:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h, vl16
; SVE2_2048-NEXT:    ld1h { z0.h }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1h { z1.h }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.h, z0.h[15]
; SVE2_2048-NEXT:    insr z1.h, h0
; SVE2_2048-NEXT:    st1h { z1.h }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %ret = shufflevector <16 x half> %op1, <16 x half> %op2, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,
                                                                       i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  store <16 x half> %ret, ptr %a
  ret void
}

define <2 x float> @shuffle_ext_byone_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    mov z2.s, z0.s[1]
; CHECK-NEXT:    fmov d0, d1
; CHECK-NEXT:    insr z0.s, s2
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %ret = shufflevector <2 x float> %op1, <2 x float> %op2, <2 x i32> <i32 1, i32 2>
  ret <2 x float> %ret
}

define <4 x float> @shuffle_ext_byone_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.s, z0.s[3]
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    insr z0.s, s2
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %ret = shufflevector <4 x float> %op1, <4 x float> %op2, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  ret <4 x float> %ret
}

define void @shuffle_ext_byone_v8f32(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v8f32:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    mov z0.s, z0.s[3]
; CHECK_SVE-NEXT:    mov z2.s, z1.s[3]
; CHECK_SVE-NEXT:    insr z1.s, s0
; CHECK_SVE-NEXT:    insr z3.s, s2
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v8f32:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    mov z0.s, z0.s[3]
; SVE2_128-NEXT:    mov z2.s, z1.s[3]
; SVE2_128-NEXT:    insr z1.s, s0
; SVE2_128-NEXT:    insr z3.s, s2
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v8f32:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.s, vl8
; SVE2_1024-NEXT:    ld1w { z0.s }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1w { z1.s }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.s, z0.s[7]
; SVE2_1024-NEXT:    insr z1.s, s0
; SVE2_1024-NEXT:    st1w { z1.s }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v8f32:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.s, vl8
; SVE2_2048-NEXT:    ld1w { z0.s }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1w { z1.s }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.s, z0.s[7]
; SVE2_2048-NEXT:    insr z1.s, s0
; SVE2_2048-NEXT:    st1w { z1.s }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %ret = shufflevector <8 x float> %op1, <8 x float> %op2, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  store <8 x float> %ret, ptr %a
  ret void
}

define <2 x double> @shuffle_ext_byone_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: shuffle_ext_byone_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z0.d[1]
; CHECK-NEXT:    mov z0.d, z1.d
; CHECK-NEXT:    insr z0.d, d2
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %ret = shufflevector <2 x double> %op1, <2 x double> %op2, <2 x i32> <i32 1, i32 2>
  ret <2 x double> %ret
}

define void @shuffle_ext_byone_v4f64(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_v4f64:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldp q1, q3, [x1]
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    mov z0.d, z0.d[1]
; CHECK_SVE-NEXT:    mov z2.d, z1.d[1]
; CHECK_SVE-NEXT:    insr z1.d, d0
; CHECK_SVE-NEXT:    insr z3.d, d2
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_v4f64:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldp q1, q3, [x1]
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    mov z0.d, z0.d[1]
; SVE2_128-NEXT:    mov z2.d, z1.d[1]
; SVE2_128-NEXT:    insr z1.d, d0
; SVE2_128-NEXT:    insr z3.d, d2
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_v4f64:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.d, vl4
; SVE2_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z0.d, z0.d[3]
; SVE2_1024-NEXT:    insr z1.d, d0
; SVE2_1024-NEXT:    st1d { z1.d }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_v4f64:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.d, vl4
; SVE2_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z0.d, z0.d[3]
; SVE2_2048-NEXT:    insr z1.d, d0
; SVE2_2048-NEXT:    st1d { z1.d }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %ret = shufflevector <4 x double> %op1, <4 x double> %op2, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  store <4 x double> %ret, ptr %a
  ret void
}

define void @shuffle_ext_byone_reverse(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_byone_reverse:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldp q1, q3, [x0]
; CHECK_SVE-NEXT:    ldr q0, [x1, #16]
; CHECK_SVE-NEXT:    mov z0.d, z0.d[1]
; CHECK_SVE-NEXT:    mov z2.d, z1.d[1]
; CHECK_SVE-NEXT:    insr z1.d, d0
; CHECK_SVE-NEXT:    insr z3.d, d2
; CHECK_SVE-NEXT:    stp q1, q3, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_byone_reverse:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldp q1, q3, [x0]
; SVE2_128-NEXT:    ldr q0, [x1, #16]
; SVE2_128-NEXT:    mov z0.d, z0.d[1]
; SVE2_128-NEXT:    mov z2.d, z1.d[1]
; SVE2_128-NEXT:    insr z1.d, d0
; SVE2_128-NEXT:    insr z3.d, d2
; SVE2_128-NEXT:    stp q1, q3, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_byone_reverse:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.d, vl4
; SVE2_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_1024-NEXT:    mov z1.d, z1.d[3]
; SVE2_1024-NEXT:    insr z0.d, d1
; SVE2_1024-NEXT:    st1d { z0.d }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_byone_reverse:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.d, vl4
; SVE2_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_2048-NEXT:    mov z1.d, z1.d[3]
; SVE2_2048-NEXT:    insr z0.d, d1
; SVE2_2048-NEXT:    st1d { z0.d }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %ret = shufflevector <4 x double> %op1, <4 x double> %op2, <4 x i32> <i32 7, i32 0, i32 1, i32 2>
  store <4 x double> %ret, ptr %a
  ret void
}

define void @shuffle_ext_invalid(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_ext_invalid:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    ldr q0, [x0, #16]
; CHECK_SVE-NEXT:    ldr q1, [x1]
; CHECK_SVE-NEXT:    stp q0, q1, [x0]
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_ext_invalid:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldr q0, [x0, #16]
; SVE2_128-NEXT:    ldr q1, [x1]
; SVE2_128-NEXT:    stp q0, q1, [x0]
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_ext_invalid:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.d, vl4
; SVE2_1024-NEXT:    adrp x8, .LCPI22_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI22_0
; SVE2_1024-NEXT:    ptrue p1.d
; SVE2_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_1024-NEXT:    ld1d { z2.d }, p1/z, [x8]
; SVE2_1024-NEXT:    tbl z0.d, { z0.d, z1.d }, z2.d
; SVE2_1024-NEXT:    st1d { z0.d }, p0, [x0]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_ext_invalid:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.d, vl4
; SVE2_2048-NEXT:    adrp x8, .LCPI22_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI22_0
; SVE2_2048-NEXT:    ptrue p1.d
; SVE2_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_2048-NEXT:    ld1d { z2.d }, p1/z, [x8]
; SVE2_2048-NEXT:    tbl z0.d, { z0.d, z1.d }, z2.d
; SVE2_2048-NEXT:    st1d { z0.d }, p0, [x0]
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %ret = shufflevector <4 x double> %op1, <4 x double> %op2, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  store <4 x double> %ret, ptr %a
  ret void
}

; SVE2_128: .LCPI23_0:
; SVE2_128-NEXT:	.hword	10
; SVE2_128-NEXT:	.hword	1
; SVE2_128-NEXT:	.hword	3
; SVE2_128-NEXT:	.hword	8
; SVE2_128-NEXT:	.hword	65535
; SVE2_128-NEXT:	.hword	65535
; SVE2_128-NEXT:	.hword	65535
; SVE2_128-NEXT:	.hword	65535
define <4 x i16> @sve2_shuffle_v4i16_tbl2(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: sve2_shuffle_v4i16_tbl2:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x0]
; CHECK_SVE-NEXT:    ldr d1, [x1]
; CHECK_SVE-NEXT:    mov z2.h, z0.h[3]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    mov z0.h, z0.h[1]
; CHECK_SVE-NEXT:    mov z3.h, z1.h[2]
; CHECK_SVE-NEXT:    strh w8, [sp, #14]
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strh w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strh w9, [sp, #10]
; CHECK_SVE-NEXT:    strh w8, [sp, #8]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: sve2_shuffle_v4i16_tbl2:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI23_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr d1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI23_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: sve2_shuffle_v4i16_tbl2:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    ldr d0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI23_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI23_0
; SVE2_1024-NEXT:    ldr d1, [x1]
; SVE2_1024-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: sve2_shuffle_v4i16_tbl2:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    ldr d0, [x0]
; SVE2_2048-NEXT:    adrp x8, .LCPI23_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI23_0
; SVE2_2048-NEXT:    ldr d1, [x1]
; SVE2_2048-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_2048-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x i16>, ptr %a
  %op2 = load <4 x i16>, ptr %b
  %1 = shufflevector <4 x i16> %op1, <4 x i16> %op2, <4 x i32> <i32 6, i32 1, i32 3, i32 4>
  ret <4 x i16> %1
}

; SVE2_128: .LCPI24_0:
; SVE2_128-NEXT:	.hword	0
; SVE2_128-NEXT:	.hword	3
; SVE2_128-NEXT:	.hword	7
; SVE2_128-NEXT:	.hword	7
; SVE2_128-NEXT:	.hword	15
; SVE2_128-NEXT:	.hword	0
; SVE2_128-NEXT:	.hword	0
; SVE2_128-NEXT:	.hword	1
define <8 x i16> @sve2_shuffle_v8i16_tbl2(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: sve2_shuffle_v8i16_tbl2:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x0]
; CHECK_SVE-NEXT:    ldr q1, [x1]
; CHECK_SVE-NEXT:    mov z2.h, z0.h[1]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z1.h, z1.h[7]
; CHECK_SVE-NEXT:    mov z3.h, z0.h[7]
; CHECK_SVE-NEXT:    mov z0.h, z0.h[3]
; CHECK_SVE-NEXT:    strh w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strh w8, [sp, #10]
; CHECK_SVE-NEXT:    strh w8, [sp]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strh w9, [sp, #14]
; CHECK_SVE-NEXT:    fmov w9, s3
; CHECK_SVE-NEXT:    strh w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    strh w9, [sp, #6]
; CHECK_SVE-NEXT:    strh w9, [sp, #4]
; CHECK_SVE-NEXT:    strh w8, [sp, #2]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: sve2_shuffle_v8i16_tbl2:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI24_0
; SVE2_128-NEXT:    ldr q0, [x0]
; SVE2_128-NEXT:    ldr q1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI24_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: sve2_shuffle_v8i16_tbl2:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    ldr q0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI24_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI24_0
; SVE2_1024-NEXT:    ldr q1, [x1]
; SVE2_1024-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: sve2_shuffle_v8i16_tbl2:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    ldr q0, [x0]
; SVE2_2048-NEXT:    adrp x8, .LCPI24_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI24_0
; SVE2_2048-NEXT:    ldr q1, [x1]
; SVE2_2048-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i16>, ptr %a
  %op2 = load <8 x i16>, ptr %b
  %1 = shufflevector <8 x i16> %op1, <8 x i16> %op2, <8 x i32> <i32 0, i32 3, i32 7, i32 7, i32 15, i32 0, i32 0, i32 1>
  ret <8 x i16> %1
}

; SVE2_128: .LCPI25_0:
; SVE2_128-NEXT:	.hword	0
; SVE2_128-NEXT:	.hword	3
; SVE2_128-NEXT:	.hword	7
; SVE2_128-NEXT:	.hword	7
; SVE2_128-NEXT:	.hword	1
; SVE2_128-NEXT:	.hword	0
; SVE2_128-NEXT:	.hword	0
; SVE2_128-NEXT:	.hword	1
define <8 x i16> @sve2_shuffle_v8i16_tbl_op1(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: sve2_shuffle_v8i16_tbl_op1:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x0]
; CHECK_SVE-NEXT:    mov z1.h, z0.h[1]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z2.h, z0.h[7]
; CHECK_SVE-NEXT:    mov z0.h, z0.h[3]
; CHECK_SVE-NEXT:    strh w8, [sp, #12]
; CHECK_SVE-NEXT:    strh w8, [sp, #10]
; CHECK_SVE-NEXT:    strh w8, [sp]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strh w8, [sp, #14]
; CHECK_SVE-NEXT:    strh w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    strh w8, [sp, #6]
; CHECK_SVE-NEXT:    strh w8, [sp, #4]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    strh w8, [sp, #2]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: sve2_shuffle_v8i16_tbl_op1:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI25_0
; SVE2_128-NEXT:    ldr q0, [x0]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI25_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: sve2_shuffle_v8i16_tbl_op1:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    adrp x8, .LCPI25_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI25_0
; SVE2_1024-NEXT:    ldr q0, [x0]
; SVE2_1024-NEXT:    ld1h { z1.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: sve2_shuffle_v8i16_tbl_op1:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    adrp x8, .LCPI25_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI25_0
; SVE2_2048-NEXT:    ldr q0, [x0]
; SVE2_2048-NEXT:    ld1h { z1.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i16>, ptr %a
  %op2 = load <8 x i16>, ptr %b
  %1 = shufflevector <8 x i16> %op1, <8 x i16> %op2, <8 x i32> <i32 0, i32 3, i32 7, i32 7, i32 1, i32 0, i32 0, i32 1>
  ret <8 x i16> %1
}

; SVE2_128: .LCPI26_0:
; SVE2_128-NEXT:	.hword	2
; SVE2_128-NEXT:	.hword	5
; SVE2_128-NEXT:	.hword	2
; SVE2_128-NEXT:	.hword	3
; SVE2_128-NEXT:	.hword	7
; SVE2_128-NEXT:	.hword	3
; SVE2_128-NEXT:	.hword	3
; SVE2_128-NEXT:	.hword	2
define <8 x i16> @sve2_shuffle_v8i16_tbl_op2(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: sve2_shuffle_v8i16_tbl_op2:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x1]
; CHECK_SVE-NEXT:    mov z1.h, z0.h[2]
; CHECK_SVE-NEXT:    mov z2.h, z0.h[3]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    mov z1.h, z0.h[7]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z0.h, z0.h[5]
; CHECK_SVE-NEXT:    strh w9, [sp, #12]
; CHECK_SVE-NEXT:    fmov w10, s1
; CHECK_SVE-NEXT:    strh w9, [sp, #10]
; CHECK_SVE-NEXT:    strh w9, [sp, #6]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strh w8, [sp, #14]
; CHECK_SVE-NEXT:    strh w10, [sp, #8]
; CHECK_SVE-NEXT:    strh w8, [sp, #4]
; CHECK_SVE-NEXT:    strh w9, [sp, #2]
; CHECK_SVE-NEXT:    strh w8, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: sve2_shuffle_v8i16_tbl_op2:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI26_0
; SVE2_128-NEXT:    ldr q0, [x1]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI26_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: sve2_shuffle_v8i16_tbl_op2:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    adrp x8, .LCPI26_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI26_0
; SVE2_1024-NEXT:    ldr q0, [x1]
; SVE2_1024-NEXT:    ld1h { z1.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: sve2_shuffle_v8i16_tbl_op2:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    adrp x8, .LCPI26_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI26_0
; SVE2_2048-NEXT:    ldr q0, [x1]
; SVE2_2048-NEXT:    ld1h { z1.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h }, z1.h
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i16>, ptr %a
  %op2 = load <8 x i16>, ptr %b
  %1 = shufflevector <8 x i16> %op1, <8 x i16> %op2, <8 x i32> <i32 10, i32 13, i32 10, i32 11, i32 15, i32 11, i32 11, i32 10>
  ret <8 x i16> %1
}

; SVE2_128: .LCPI27_0:
; SVE2_128-NEXT:	.word	0
; SVE2_128-NEXT:	.word	3
; SVE2_128-NEXT:	.word	5
; SVE2_128-NEXT:	.word	1
define <4 x float> @sve2_shuffle_v4f32_tbl2_op2(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: sve2_shuffle_v4f32_tbl2_op2:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x0]
; CHECK_SVE-NEXT:    ldr q1, [x1]
; CHECK_SVE-NEXT:    mov z2.s, z0.s[1]
; CHECK_SVE-NEXT:    mov z1.s, z1.s[1]
; CHECK_SVE-NEXT:    mov z3.s, z0.s[3]
; CHECK_SVE-NEXT:    stp s1, s2, [sp, #8]
; CHECK_SVE-NEXT:    stp s0, s3, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: sve2_shuffle_v4f32_tbl2_op2:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI27_0
; SVE2_128-NEXT:    ldr q0, [x0]
; SVE2_128-NEXT:    ldr q1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI27_0]
; SVE2_128-NEXT:    tbl z0.s, { z0.s, z1.s }, z2.s
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: sve2_shuffle_v4f32_tbl2_op2:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.s
; SVE2_1024-NEXT:    ldr q0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI27_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI27_0
; SVE2_1024-NEXT:    ldr q1, [x1]
; SVE2_1024-NEXT:    ld1w { z2.s }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.s, { z0.s, z1.s }, z2.s
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: sve2_shuffle_v4f32_tbl2_op2:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.s
; SVE2_2048-NEXT:    ldr q0, [x0]
; SVE2_2048-NEXT:    adrp x8, .LCPI27_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI27_0
; SVE2_2048-NEXT:    ldr q1, [x1]
; SVE2_2048-NEXT:    ld1w { z2.s }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.s, { z0.s, z1.s }, z2.s
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x float>, ptr %a
  %op2 = load <4 x float>, ptr %b
  %1 = shufflevector <4 x float> %op1, <4 x float> %op2, <4 x i32> <i32 0, i32 3, i32 5, i32 1>
  ret <4 x float> %1
}

; SVE2_128: .LCPI28_0:
; SVE2_128-NEXT:   .word   0
; SVE2_128-NEXT:   .word   3
; SVE2_128-NEXT:   .word   2
; SVE2_128-NEXT:   .word   1
define <4 x float> @sve2_shuffle_v4f32_tbl_op1(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: sve2_shuffle_v4f32_tbl_op1:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x0]
; CHECK_SVE-NEXT:    mov z1.s, z0.s[1]
; CHECK_SVE-NEXT:    mov z2.s, z0.s[2]
; CHECK_SVE-NEXT:    mov z3.s, z0.s[3]
; CHECK_SVE-NEXT:    stp s2, s1, [sp, #8]
; CHECK_SVE-NEXT:    stp s0, s3, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: sve2_shuffle_v4f32_tbl_op1:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI28_0
; SVE2_128-NEXT:    ldr q0, [x0]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI28_0]
; SVE2_128-NEXT:    tbl z0.s, { z0.s }, z1.s
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: sve2_shuffle_v4f32_tbl_op1:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.s
; SVE2_1024-NEXT:    adrp x8, .LCPI28_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI28_0
; SVE2_1024-NEXT:    ldr q0, [x0]
; SVE2_1024-NEXT:    ld1w { z1.s }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.s, { z0.s }, z1.s
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: sve2_shuffle_v4f32_tbl_op1:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.s
; SVE2_2048-NEXT:    adrp x8, .LCPI28_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI28_0
; SVE2_2048-NEXT:    ldr q0, [x0]
; SVE2_2048-NEXT:    ld1w { z1.s }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.s, { z0.s }, z1.s
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x float>, ptr %a
  %op2 = load <4 x float>, ptr %b
  %1 = shufflevector <4 x float> %op1, <4 x float> %op2, <4 x i32> <i32 0, i32 3, i32 2, i32 1>
  ret <4 x float> %1
}

; SVE2_128: .LCPI29_0:
; SVE2_128-NEXT:	.byte	0
; SVE2_128-NEXT:	.byte	1
; SVE2_128-NEXT:	.byte	2
; SVE2_128-NEXT:	.byte	3
; SVE2_128-NEXT:	.byte	4
; SVE2_128-NEXT:	.byte	7
; SVE2_128-NEXT:	.byte	6
; SVE2_128-NEXT:	.byte	7
; SVE2_128-NEXT:	.byte	255
; SVE2_128-NEXT:	.byte	255
define <8 x i8> @shuffle_index_size_acceptable_op2(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_op2:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x1]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE-NEXT:    strb w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    mov z1.b, z0.b[3]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z2.b, z0.b[2]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    strb w9, [sp, #14]
; CHECK_SVE-NEXT:    fmov w9, s3
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #12]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #11]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    strb w9, [sp, #10]
; CHECK_SVE-NEXT:    strb w8, [sp, #9]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_op2:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI29_0
; SVE2_128-NEXT:    ldr d0, [x1]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI29_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_index_size_acceptable_op2:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.b
; SVE2_1024-NEXT:    adrp x8, .LCPI29_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI29_0
; SVE2_1024-NEXT:    ldr d0, [x1]
; SVE2_1024-NEXT:    ld1b { z1.b }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_index_size_acceptable_op2:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.b
; SVE2_2048-NEXT:    adrp x8, .LCPI29_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI29_0
; SVE2_2048-NEXT:    ldr d0, [x1]
; SVE2_2048-NEXT:    ld1b { z1.b }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_2048-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 15, i32 14, i32 15>
  ret <8 x i8> %1
}

; SVE2_1024: .LCPI30_0:
; SVE2_1024-NEXT:	.byte	1
; SVE2_1024-NEXT:	.byte	2
; SVE2_1024-NEXT:	.byte	3
; SVE2_1024-NEXT:	.byte	4
; SVE2_1024-NEXT:	.byte	5
; SVE2_1024-NEXT:	.byte	7
; SVE2_1024-NEXT:	.byte	6
; SVE2_1024-NEXT:	.byte	7
; SVE2_1024-NEXT:	.byte	255
; SVE2_1024-NEXT:	.byte	255
define <8 x i8> @shuffle_index_size_acceptable_op1(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_op1:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x0]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z3.b, z0.b[5]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    mov z1.b, z0.b[4]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE-NEXT:    strb w9, [sp, #14]
; CHECK_SVE-NEXT:    fmov w9, s3
; CHECK_SVE-NEXT:    mov z3.b, z0.b[2]
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #12]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #11]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strb w9, [sp, #10]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #9]
; CHECK_SVE-NEXT:    strb w9, [sp, #8]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_op1:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI30_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr q1, [x8, :lo12:.LCPI30_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_index_size_acceptable_op1:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.b
; SVE2_1024-NEXT:    adrp x8, .LCPI30_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI30_0
; SVE2_1024-NEXT:    ldr d0, [x0]
; SVE2_1024-NEXT:    ld1b { z1.b }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_index_size_acceptable_op1:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.b
; SVE2_2048-NEXT:    adrp x8, .LCPI30_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI30_0
; SVE2_2048-NEXT:    ldr d0, [x0]
; SVE2_2048-NEXT:    ld1b { z1.b }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.b, { z0.b }, z1.b
; SVE2_2048-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 6, i32 7>
  ret <8 x i8> %1
}

; SVE2_128: .LCPI31_0:
; SVE2_128-NEXT:	.byte	1
; SVE2_128-NEXT:	.byte	17
; SVE2_128-NEXT:	.byte	18
; SVE2_128-NEXT:	.byte	19
; SVE2_128-NEXT:	.byte	20
; SVE2_128-NEXT:	.byte	20
; SVE2_128-NEXT:	.byte	22
; SVE2_128-NEXT:	.byte	23
; SVE2_128-NEXT:	.byte	255
; SVE2_128-NEXT:	.byte	255
define <8 x i8> @shuffle_index_size_acceptable_op_both(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_op_both:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x1]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    ldr d1, [x0]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE-NEXT:    mov z1.b, z1.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    mov z3.b, z0.b[2]
; CHECK_SVE-NEXT:    strb w9, [sp, #14]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    strb w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strb w9, [sp, #11]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #10]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #9]
; CHECK_SVE-NEXT:    strb w8, [sp, #8]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_op_both:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI31_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr d1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI31_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_index_size_acceptable_op_both:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.b
; SVE2_1024-NEXT:    ldr d0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI31_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI31_0
; SVE2_1024-NEXT:    ldr d1, [x1]
; SVE2_1024-NEXT:    ld1b { z2.b }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_index_size_acceptable_op_both:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    sub sp, sp, #16
; SVE2_2048-NEXT:    .cfi_def_cfa_offset 16
; SVE2_2048-NEXT:    ldr d0, [x1]
; SVE2_2048-NEXT:    mov z1.b, z0.b[7]
; SVE2_2048-NEXT:    mov z2.b, z0.b[6]
; SVE2_2048-NEXT:    mov z3.b, z0.b[4]
; SVE2_2048-NEXT:    fmov w8, s1
; SVE2_2048-NEXT:    ldr d1, [x0]
; SVE2_2048-NEXT:    fmov w9, s2
; SVE2_2048-NEXT:    mov z2.b, z0.b[3]
; SVE2_2048-NEXT:    mov z1.b, z1.b[1]
; SVE2_2048-NEXT:    strb w8, [sp, #15]
; SVE2_2048-NEXT:    fmov w8, s3
; SVE2_2048-NEXT:    mov z3.b, z0.b[2]
; SVE2_2048-NEXT:    strb w9, [sp, #14]
; SVE2_2048-NEXT:    mov z0.b, z0.b[1]
; SVE2_2048-NEXT:    fmov w9, s2
; SVE2_2048-NEXT:    strb w8, [sp, #13]
; SVE2_2048-NEXT:    strb w8, [sp, #12]
; SVE2_2048-NEXT:    fmov w8, s3
; SVE2_2048-NEXT:    strb w9, [sp, #11]
; SVE2_2048-NEXT:    fmov w9, s0
; SVE2_2048-NEXT:    strb w8, [sp, #10]
; SVE2_2048-NEXT:    fmov w8, s1
; SVE2_2048-NEXT:    strb w9, [sp, #9]
; SVE2_2048-NEXT:    strb w8, [sp, #8]
; SVE2_2048-NEXT:    ldr d0, [sp, #8]
; SVE2_2048-NEXT:    add sp, sp, #16
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 1, i32 9, i32 10, i32 11, i32 12, i32 12, i32 14, i32 15>
  ret <8 x i8> %1
}

define <8 x i8> @shuffle_index_size_unacceptable_op_both_maxhw(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_unacceptable_op_both_maxhw:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x1]
; CHECK_SVE-NEXT:    mov z1.b, z0.b[7]
; CHECK_SVE-NEXT:    mov z2.b, z0.b[6]
; CHECK_SVE-NEXT:    mov z3.b, z0.b[4]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    ldr d1, [x0]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z2.b, z0.b[3]
; CHECK_SVE-NEXT:    mov z1.b, z1.b[1]
; CHECK_SVE-NEXT:    strb w8, [sp, #15]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    mov z3.b, z0.b[2]
; CHECK_SVE-NEXT:    strb w9, [sp, #14]
; CHECK_SVE-NEXT:    mov z0.b, z0.b[1]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strb w8, [sp, #13]
; CHECK_SVE-NEXT:    strb w8, [sp, #12]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strb w9, [sp, #11]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strb w8, [sp, #10]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strb w9, [sp, #9]
; CHECK_SVE-NEXT:    strb w8, [sp, #8]
; CHECK_SVE-NEXT:    ldr d0, [sp, #8]
; CHECK_SVE-NEXT:    add sp, sp, #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_unacceptable_op_both_maxhw:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI32_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr d1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI32_0]
; SVE2_128-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_128-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_index_size_unacceptable_op_both_maxhw:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.b
; SVE2_1024-NEXT:    ldr d0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI32_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI32_0
; SVE2_1024-NEXT:    ldr d1, [x1]
; SVE2_1024-NEXT:    ld1b { z2.b }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.b, { z0.b, z1.b }, z2.b
; SVE2_1024-NEXT:    // kill: def $d0 killed $d0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_index_size_unacceptable_op_both_maxhw:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    sub sp, sp, #16
; SVE2_2048-NEXT:    .cfi_def_cfa_offset 16
; SVE2_2048-NEXT:    ldr d0, [x1]
; SVE2_2048-NEXT:    mov z1.b, z0.b[7]
; SVE2_2048-NEXT:    mov z2.b, z0.b[6]
; SVE2_2048-NEXT:    mov z3.b, z0.b[4]
; SVE2_2048-NEXT:    fmov w8, s1
; SVE2_2048-NEXT:    ldr d1, [x0]
; SVE2_2048-NEXT:    fmov w9, s2
; SVE2_2048-NEXT:    mov z2.b, z0.b[3]
; SVE2_2048-NEXT:    mov z1.b, z1.b[1]
; SVE2_2048-NEXT:    strb w8, [sp, #15]
; SVE2_2048-NEXT:    fmov w8, s3
; SVE2_2048-NEXT:    mov z3.b, z0.b[2]
; SVE2_2048-NEXT:    strb w9, [sp, #14]
; SVE2_2048-NEXT:    mov z0.b, z0.b[1]
; SVE2_2048-NEXT:    fmov w9, s2
; SVE2_2048-NEXT:    strb w8, [sp, #13]
; SVE2_2048-NEXT:    strb w8, [sp, #12]
; SVE2_2048-NEXT:    fmov w8, s3
; SVE2_2048-NEXT:    strb w9, [sp, #11]
; SVE2_2048-NEXT:    fmov w9, s0
; SVE2_2048-NEXT:    strb w8, [sp, #10]
; SVE2_2048-NEXT:    fmov w8, s1
; SVE2_2048-NEXT:    strb w9, [sp, #9]
; SVE2_2048-NEXT:    strb w8, [sp, #8]
; SVE2_2048-NEXT:    ldr d0, [sp, #8]
; SVE2_2048-NEXT:    add sp, sp, #16
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i8>, ptr %a
  %op2 = load <8 x i8>, ptr %b
  %1 = shufflevector <8 x i8> %op1, <8 x i8> %op2, <8 x i32> <i32 1, i32 9, i32 10, i32 11, i32 12, i32 12, i32 14, i32 15>
  ret <8 x i8> %1
}

; SVE2_2048: .LCPI33_0:
; SVE2_2048-NEXT:	.hword	1
; SVE2_2048-NEXT:	.hword	129
; SVE2_2048-NEXT:	.hword	130
; SVE2_2048-NEXT:	.hword	131
; SVE2_2048-NEXT:	.hword	132
; SVE2_2048-NEXT:	.hword	132
; SVE2_2048-NEXT:	.hword	134
; SVE2_2048-NEXT:	.hword	135
; SVE2_2048-NEXT:	.hword  65535
; SVE2_2048-NEXT:	.hword  65535
define <8 x i16> @shuffle_index_size_acceptable_i16_op_both(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_index_size_acceptable_i16_op_both:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x1]
; CHECK_SVE-NEXT:    mov z1.h, z0.h[7]
; CHECK_SVE-NEXT:    mov z2.h, z0.h[6]
; CHECK_SVE-NEXT:    mov z3.h, z0.h[4]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    ldr q1, [x0]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    mov z2.h, z0.h[3]
; CHECK_SVE-NEXT:    mov z1.h, z1.h[1]
; CHECK_SVE-NEXT:    strh w8, [sp, #14]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    mov z3.h, z0.h[2]
; CHECK_SVE-NEXT:    strh w9, [sp, #12]
; CHECK_SVE-NEXT:    mov z0.h, z0.h[1]
; CHECK_SVE-NEXT:    fmov w9, s2
; CHECK_SVE-NEXT:    strh w8, [sp, #10]
; CHECK_SVE-NEXT:    strh w8, [sp, #8]
; CHECK_SVE-NEXT:    fmov w8, s3
; CHECK_SVE-NEXT:    strh w9, [sp, #6]
; CHECK_SVE-NEXT:    fmov w9, s0
; CHECK_SVE-NEXT:    strh w8, [sp, #4]
; CHECK_SVE-NEXT:    fmov w8, s1
; CHECK_SVE-NEXT:    strh w9, [sp, #2]
; CHECK_SVE-NEXT:    strh w8, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_index_size_acceptable_i16_op_both:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI33_0
; SVE2_128-NEXT:    ldr q0, [x0]
; SVE2_128-NEXT:    ldr q1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI33_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_index_size_acceptable_i16_op_both:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    ldr q0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI33_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI33_0
; SVE2_1024-NEXT:    ldr q1, [x1]
; SVE2_1024-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_index_size_acceptable_i16_op_both:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    ldr q0, [x0]
; SVE2_2048-NEXT:    adrp x8, .LCPI33_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI33_0
; SVE2_2048-NEXT:    ldr q1, [x1]
; SVE2_2048-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x i16>, ptr %a
  %op2 = load <8 x i16>, ptr %b
  %1 = shufflevector <8 x i16> %op1, <8 x i16> %op2, <8 x i32> <i32 1, i32 9, i32 10, i32 11, i32 12, i32 12, i32 14, i32 15>
  ret <8 x i16> %1
}

define <16 x double> @shuffle_doublemask_size_unacceptable_form(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_doublemask_size_unacceptable_form:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #48
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 48
; CHECK_SVE-NEXT:    ldp q0, q3, [x0]
; CHECK_SVE-NEXT:    ldr q1, [x0, #32]
; CHECK_SVE-NEXT:    ldr q4, [x1, #48]
; CHECK_SVE-NEXT:    mov z1.d, z1.d[1]
; CHECK_SVE-NEXT:    mov z2.d, z0.d[1]
; CHECK_SVE-NEXT:    mov z3.d, z3.d[1]
; CHECK_SVE-NEXT:    stp d1, d2, [sp, #16]
; CHECK_SVE-NEXT:    mov z2.d, z4.d[1]
; CHECK_SVE-NEXT:    stp d0, d3, [sp, #32]
; CHECK_SVE-NEXT:    stp d1, d2, [sp]
; CHECK_SVE-NEXT:    ldp q1, q0, [sp, #16]
; CHECK_SVE-NEXT:    ldr q7, [sp], #48
; CHECK_SVE-NEXT:    mov z2.d, z0.d
; CHECK_SVE-NEXT:    mov z3.d, z1.d
; CHECK_SVE-NEXT:    mov z5.d, z1.d
; CHECK_SVE-NEXT:    mov z4.d, z0.d
; CHECK_SVE-NEXT:    mov z6.d, z0.d
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_doublemask_size_unacceptable_form:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    ldp q5, q2, [x0, #16]
; SVE2_128-NEXT:    index z0.d, #3, #-2
; SVE2_128-NEXT:    ldr q1, [x0]
; SVE2_128-NEXT:    index z3.d, #0, #3
; SVE2_128-NEXT:    ldr q7, [x1, #48]
; SVE2_128-NEXT:    mov z6.d, z2.d[1]
; SVE2_128-NEXT:    mov z4.d, z1.d
; SVE2_128-NEXT:    tbl z1.d, { z1.d, z2.d }, z0.d
; SVE2_128-NEXT:    tbl z7.d, { z6.d, z7.d }, z3.d
; SVE2_128-NEXT:    tbl z0.d, { z4.d, z5.d }, z3.d
; SVE2_128-NEXT:    // kill: def $q7 killed $q7 killed $z7
; SVE2_128-NEXT:    mov z3.d, z1.d
; SVE2_128-NEXT:    mov z5.d, z1.d
; SVE2_128-NEXT:    mov z2.d, z0.d
; SVE2_128-NEXT:    mov z4.d, z0.d
; SVE2_128-NEXT:    mov z6.d, z0.d
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_doublemask_size_unacceptable_form:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.d, vl8
; SVE2_1024-NEXT:    adrp x9, .LCPI34_0
; SVE2_1024-NEXT:    add x9, x9, :lo12:.LCPI34_0
; SVE2_1024-NEXT:    ptrue p1.d
; SVE2_1024-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_1024-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_1024-NEXT:    ld1d { z2.d }, p1/z, [x9]
; SVE2_1024-NEXT:    tbl z0.d, { z0.d, z1.d }, z2.d
; SVE2_1024-NEXT:    st1d { z0.d }, p1, [x8]
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_doublemask_size_unacceptable_form:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.d, vl8
; SVE2_2048-NEXT:    adrp x9, .LCPI34_0
; SVE2_2048-NEXT:    add x9, x9, :lo12:.LCPI34_0
; SVE2_2048-NEXT:    ptrue p1.d
; SVE2_2048-NEXT:    ld1d { z0.d }, p0/z, [x0]
; SVE2_2048-NEXT:    ld1d { z1.d }, p0/z, [x1]
; SVE2_2048-NEXT:    ld1d { z2.d }, p1/z, [x9]
; SVE2_2048-NEXT:    ptrue p0.d, vl16
; SVE2_2048-NEXT:    tbl z0.d, { z0.d, z1.d }, z2.d
; SVE2_2048-NEXT:    st1d { z0.d }, p0, [x8]
; SVE2_2048-NEXT:    ret
  %op1 = load <8 x double>, ptr %a
  %op2 = load <8 x double>, ptr %b
  %1 = shufflevector <8 x double> %op1, <8 x double> %op2, <16 x i32> <i32 0, i32 3, i32 5, i32 1, i32 0, i32 3, i32 5, i32 1, i32 0, i32 3, i32 5, i32 1, i32 0, i32 3, i32 5, i32 15>
  ret <16 x double> %1
}

; SVE2_128: .LCPI35_0:
; SVE2_128-NEXT:        .hword  1
; SVE2_128-NEXT:        .hword  11
; SVE2_128-NEXT:        .hword  10
; SVE2_128-NEXT:        .hword  3
; SVE2_128-NEXT:        .hword  0
; SVE2_128-NEXT:        .hword  0
; SVE2_128-NEXT:        .hword  0
; SVE2_128-NEXT:        .hword  8
define <8 x i16> @shuffle_doublemask_size_acceptable_i16_op_both(ptr %a, ptr %b) {
; CHECK_SVE-LABEL: shuffle_doublemask_size_acceptable_i16_op_both:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr d0, [x1]
; CHECK_SVE-NEXT:    ldr d1, [x0]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    mov z2.h, z1.h[3]
; CHECK_SVE-NEXT:    fmov w9, s1
; CHECK_SVE-NEXT:    mov z3.h, z0.h[2]
; CHECK_SVE-NEXT:    mov z0.h, z0.h[3]
; CHECK_SVE-NEXT:    mov z1.h, z1.h[1]
; CHECK_SVE-NEXT:    strh w8, [sp, #14]
; CHECK_SVE-NEXT:    fmov w8, s2
; CHECK_SVE-NEXT:    strh w9, [sp, #12]
; CHECK_SVE-NEXT:    strh w9, [sp, #10]
; CHECK_SVE-NEXT:    strh w9, [sp, #8]
; CHECK_SVE-NEXT:    fmov w9, s3
; CHECK_SVE-NEXT:    strh w8, [sp, #6]
; CHECK_SVE-NEXT:    fmov w8, s0
; CHECK_SVE-NEXT:    strh w9, [sp, #4]
; CHECK_SVE-NEXT:    fmov w9, s1
; CHECK_SVE-NEXT:    strh w8, [sp, #2]
; CHECK_SVE-NEXT:    strh w9, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_doublemask_size_acceptable_i16_op_both:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI35_0
; SVE2_128-NEXT:    ldr d0, [x0]
; SVE2_128-NEXT:    ldr d1, [x1]
; SVE2_128-NEXT:    ldr q2, [x8, :lo12:.LCPI35_0]
; SVE2_128-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_doublemask_size_acceptable_i16_op_both:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.h
; SVE2_1024-NEXT:    ldr d0, [x0]
; SVE2_1024-NEXT:    adrp x8, .LCPI35_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI35_0
; SVE2_1024-NEXT:    ldr d1, [x1]
; SVE2_1024-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_1024-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_doublemask_size_acceptable_i16_op_both:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.h
; SVE2_2048-NEXT:    ldr d0, [x0]
; SVE2_2048-NEXT:    adrp x8, .LCPI35_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI35_0
; SVE2_2048-NEXT:    ldr d1, [x1]
; SVE2_2048-NEXT:    ld1h { z2.h }, p0/z, [x8]
; SVE2_2048-NEXT:    tbl z0.h, { z0.h, z1.h }, z2.h
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %op1 = load <4 x i16>, ptr %a
  %op2 = load <4 x i16>, ptr %b
  %1 = shufflevector <4 x i16> %op1, <4 x i16> %op2, <8 x i32> <i32 1, i32 7, i32 6, i32 3, i32 0, i32 0, i32 0, i32 4>
  ret <8 x i16> %1
}

; SVE2_1024: .LCPI36_0:
; SVE2_1024-NEXT:	.word	0
; SVE2_1024-NEXT:	.word	1
; SVE2_1024-NEXT:	.word	1
; SVE2_1024-NEXT:	.word	2
; SVE2_1024-NEXT:	.word	4294967295
; SVE2_1024-NEXT:	.word	4294967295
define <4 x float> @shuffle_halfmask_size_acceptable_float_op_one(ptr %ptr1, ptr %ptr2) {
; CHECK_SVE-LABEL: shuffle_halfmask_size_acceptable_float_op_one:
; CHECK_SVE:       // %bb.0:
; CHECK_SVE-NEXT:    sub sp, sp, #16
; CHECK_SVE-NEXT:    .cfi_def_cfa_offset 16
; CHECK_SVE-NEXT:    ldr q0, [x0]
; CHECK_SVE-NEXT:    mov z1.s, z0.s[2]
; CHECK_SVE-NEXT:    mov z2.s, z0.s[1]
; CHECK_SVE-NEXT:    stp s2, s1, [sp, #8]
; CHECK_SVE-NEXT:    stp s0, s2, [sp]
; CHECK_SVE-NEXT:    ldr q0, [sp], #16
; CHECK_SVE-NEXT:    ret
;
; SVE2_128-LABEL: shuffle_halfmask_size_acceptable_float_op_one:
; SVE2_128:       // %bb.0:
; SVE2_128-NEXT:    adrp x8, .LCPI36_0
; SVE2_128-NEXT:    ldr q1, [x0]
; SVE2_128-NEXT:    ldr q0, [x8, :lo12:.LCPI36_0]
; SVE2_128-NEXT:    tbl z0.s, { z1.s }, z0.s
; SVE2_128-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_128-NEXT:    ret
;
; SVE2_1024-LABEL: shuffle_halfmask_size_acceptable_float_op_one:
; SVE2_1024:       // %bb.0:
; SVE2_1024-NEXT:    ptrue p0.s
; SVE2_1024-NEXT:    adrp x8, .LCPI36_0
; SVE2_1024-NEXT:    add x8, x8, :lo12:.LCPI36_0
; SVE2_1024-NEXT:    ld1w { z0.s }, p0/z, [x8]
; SVE2_1024-NEXT:    ldr q1, [x0]
; SVE2_1024-NEXT:    tbl z0.s, { z1.s }, z0.s
; SVE2_1024-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_1024-NEXT:    ret
;
; SVE2_2048-LABEL: shuffle_halfmask_size_acceptable_float_op_one:
; SVE2_2048:       // %bb.0:
; SVE2_2048-NEXT:    ptrue p0.s
; SVE2_2048-NEXT:    adrp x8, .LCPI36_0
; SVE2_2048-NEXT:    add x8, x8, :lo12:.LCPI36_0
; SVE2_2048-NEXT:    ld1w { z0.s }, p0/z, [x8]
; SVE2_2048-NEXT:    ldr q1, [x0]
; SVE2_2048-NEXT:    tbl z0.s, { z1.s }, z0.s
; SVE2_2048-NEXT:    // kill: def $q0 killed $q0 killed $z0
; SVE2_2048-NEXT:    ret
  %a = load <8 x float>, ptr %ptr1
  %b = load <8 x float>, ptr %ptr2
  %1 = shufflevector <8 x float> %a, <8 x float> %b, <4 x i32> <i32 0, i32 1, i32 1, i32 2>
  ret <4 x float> %1
}

attributes #0 = { "target-features"="+sve" }
