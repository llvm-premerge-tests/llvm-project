# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s

--- |
  define void @store_i8(i8 %x, ptr %y) {
    store i8 %x, ptr %y, align 1
    ret void
  }

  define void @store_i16(i16 %x, ptr %y) {
    store i16 %x, ptr %y, align 2
    ret void
  }

  define void @store_i32(i32 %x, ptr %y) {
    store i32 %x, ptr %y, align 4
    ret void
  }

  define void @store_i64(i64 %x, ptr %y) {
    store i64 %x, ptr %y, align 8
    ret void
  }

  define void @store_i128(i64 %x, ptr %y) {
    store i64 %x, ptr %y, align 8
    ret void
  }

  define void @store_ptr(ptr %x, ptr %y) {
    store ptr %x, ptr %y, align 8
    ret void
  }

  define void @store_i16_unaligned(i16 %x, ptr %y) {
    store i16 %x, ptr %y, align 1
    ret void
  }

  define void @store_i32_unaligned(i32 %x, ptr %y) {
    store i32 %x, ptr %y, align 1
    ret void
  }

  define void @store_i32_align2(i32 %x, ptr %y) {
    store i32 %x, ptr %y, align 2
    ret void
  }

  define void @store_i64_align2(i64 %x, ptr %y) {
    store i64 %x, ptr %y, align 2
    ret void
  }

...
---
name:            store_i8
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s8) into %ir.y)
    ; CHECK-NEXT: PseudoRET
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %1:_(p0) = COPY $x11
    G_STORE %0(s8), %1(p0) :: (store (s8) into %ir.y)
    PseudoRET

...
---
name:            store_i16
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s16) into %ir.y)
    ; CHECK-NEXT: PseudoRET
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %1:_(p0) = COPY $x11
    G_STORE %0(s16), %1(p0) :: (store (s16) into %ir.y)
    PseudoRET

...
---
name:            store_i32
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s32) into %ir.y)
    ; CHECK-NEXT: PseudoRET
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %1:_(p0) = COPY $x11
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.y)
    PseudoRET

...
---
name:            store_i64
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s64) into %ir.y)
    ; CHECK-NEXT: PseudoRET
    %0:_(s64) = COPY $x10
    %1:_(p0) = COPY $x11
    G_STORE %0(s64), %1(p0) :: (store (s64) into %ir.y)
    PseudoRET

...
---
name:            store_i128
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i128
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s64) into %ir.y)
    ; CHECK-NEXT: PseudoRET
    %0:_(s64) = COPY $x10
    %1:_(p0) = COPY $x11
    G_STORE %0(s64), %1(p0) :: (store (s64) into %ir.y)
    PseudoRET

...
---
name:            store_ptr
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_ptr
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: G_STORE [[COPY]](p0), [[COPY1]](p0) :: (store (p0) into %ir.y)
    ; CHECK-NEXT: PseudoRET
    %0:_(p0) = COPY $x10
    %1:_(p0) = COPY $x11
    G_STORE %0(p0), %1(p0) :: (store (p0) into %ir.y)
    PseudoRET

...
---
name:            store_i16_unaligned
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i16_unaligned
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[AND]], [[C]](s64)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C2]](s64)
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s8) into %ir.y)
    ; CHECK-NEXT: G_STORE [[LSHR]](s64), [[PTR_ADD]](p0) :: (store (s8) into %ir.y + 1)
    ; CHECK-NEXT: PseudoRET
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %1:_(p0) = COPY $x11
    G_STORE %0(s16), %1(p0) :: (store (s16) into %ir.y, align 1)
    PseudoRET

...
---
name:            store_i32_unaligned
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i32_unaligned
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 16
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[AND]], [[C]](s64)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C2]](s64)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C4]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s64) = G_LSHR [[AND1]], [[C3]](s64)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C5]](s64)
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s8) into %ir.y)
    ; CHECK-NEXT: G_STORE [[LSHR1]](s64), [[PTR_ADD1]](p0) :: (store (s8) into %ir.y + 1)
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[LSHR]], [[C7]]
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(s64) = G_LSHR [[AND2]], [[C6]](s64)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD]], [[C8]](s64)
    ; CHECK-NEXT: G_STORE [[LSHR]](s64), [[PTR_ADD]](p0) :: (store (s8) into %ir.y + 2)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s64), [[PTR_ADD2]](p0) :: (store (s8) into %ir.y + 3)
    ; CHECK-NEXT: PseudoRET
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %1:_(p0) = COPY $x11
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.y, align 1)
    PseudoRET

...
---
name:            store_i32_align2
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i32_align2
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 16
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[AND]], [[C]](s64)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C2]](s64)
    ; CHECK-NEXT: G_STORE [[COPY]](s64), [[COPY1]](p0) :: (store (s16) into %ir.y)
    ; CHECK-NEXT: G_STORE [[LSHR]](s64), [[PTR_ADD]](p0) :: (store (s16) into %ir.y + 2)
    ; CHECK-NEXT: PseudoRET
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %1:_(p0) = COPY $x11
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.y, align 2)
    PseudoRET

...
---
name:            store_i64_align2
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.1 (%ir-block.0):
    liveins: $x10, $x11

    ; CHECK-LABEL: name: store_i64_align2
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY [[COPY]](s64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s64) = G_LSHR [[COPY2]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 16
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY2]], [[C3]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s64) = G_LSHR [[AND]], [[C2]](s64)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C4]](s64)
    ; CHECK-NEXT: G_STORE [[COPY2]](s64), [[COPY1]](p0) :: (store (s16) into %ir.y)
    ; CHECK-NEXT: G_STORE [[LSHR1]](s64), [[PTR_ADD1]](p0) :: (store (s16) into %ir.y + 2)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s64) = G_CONSTANT i64 16
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[LSHR]], [[C6]]
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(s64) = G_LSHR [[AND1]], [[C5]](s64)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD]], [[C7]](s64)
    ; CHECK-NEXT: G_STORE [[LSHR]](s64), [[PTR_ADD]](p0) :: (store (s16) into %ir.y + 4)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s64), [[PTR_ADD2]](p0) :: (store (s16) into %ir.y + 6)
    ; CHECK-NEXT: PseudoRET
    %0:_(s64) = COPY $x10
    %1:_(p0) = COPY $x11
    G_STORE %0(s64), %1(p0) :: (store (s64) into %ir.y, align 2)
    PseudoRET

...
