; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple=hexagon -S -hexagon-vc -instcombine -hvc-va-full-stores < %s | FileCheck %s

; Check that Hexagon Vector Combine propagates (TBAA) metadata to the
; generated output. (Use instcombine to clean the output up a bit.)

target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon"

; Two unaligned loads, both with the same TBAA tag.
;
define <64 x i16> @f0(ptr %a0, i32 %a1) #0 {
b0:
  %v0 = add i32 %a1, 64
  %v1 = getelementptr i16, ptr %a0, i32 %v0
  %v3 = load <64 x i16>, ptr %v1, align 2, !tbaa !0
  %v4 = add i32 %a1, 128
  %v5 = getelementptr i16, ptr %a0, i32 %v4
  %v7 = load <64 x i16>, ptr %v5, align 2, !tbaa !0
  %v8 = add <64 x i16> %v3, %v7
  ret <64 x i16> %v8
}

; Two unaligned loads, only one with a TBAA tag.
;
define <64 x i16> @f1(ptr %a0, i32 %a1) #0 {
b0:
  %v0 = add i32 %a1, 64
  %v1 = getelementptr i16, ptr %a0, i32 %v0
  %v3 = load <64 x i16>, ptr %v1, align 2, !tbaa !0
  %v4 = add i32 %a1, 128
  %v5 = getelementptr i16, ptr %a0, i32 %v4
  %v7 = load <64 x i16>, ptr %v5, align 2
  %v8 = add <64 x i16> %v3, %v7
  ret <64 x i16> %v8
}

; Two unaligned loads, with different TBAA tags.
;
define <64 x i16> @f2(ptr %a0, i32 %a1) #0 {
b0:
  %v0 = add i32 %a1, 64
  %v1 = getelementptr i16, ptr %a0, i32 %v0
  %v3 = load <64 x i16>, ptr %v1, align 2, !tbaa !0
  %v4 = add i32 %a1, 128
  %v5 = getelementptr i16, ptr %a0, i32 %v4
  %v7 = load <64 x i16>, ptr %v5, align 2, !tbaa !3
  %v8 = add <64 x i16> %v3, %v7
  ret <64 x i16> %v8
}

; Two unaligned stores, both with the same TBAA tag.
;
define void @f3(ptr %a0, i32 %a1, <64 x i16> %a2, <64 x i16> %a3) #0 {
b0:
  %v0 = add i32 %a1, 64
  %v1 = getelementptr i16, ptr %a0, i32 %v0
  store <64 x i16> %a2, ptr %v1, align 2, !tbaa !5
  %v3 = add i32 %a1, 128
  %v4 = getelementptr i16, ptr %a0, i32 %v3
  store <64 x i16> %a3, ptr %v4, align 2, !tbaa !5
  ret void
}

; Two unaligned stores, only one with a TBAA tag.
;
define void @f4(ptr %a0, i32 %a1, <64 x i16> %a2, <64 x i16> %a3) #0 {
b0:
  %v0 = add i32 %a1, 64
  %v1 = getelementptr i16, ptr %a0, i32 %v0
  store <64 x i16> %a2, ptr %v1, align 2
  %v3 = add i32 %a1, 128
  %v4 = getelementptr i16, ptr %a0, i32 %v3
  store <64 x i16> %a3, ptr %v4, align 2, !tbaa !5
  ret void
}

; Two unaligned store, with different TBAA tags.
;
define void @f5(ptr %a0, i32 %a1, <64 x i16> %a2, <64 x i16> %a3) #0 {
b0:
  %v0 = add i32 %a1, 64
  %v1 = getelementptr i16, ptr %a0, i32 %v0
  store <64 x i16> %a2, ptr %v1, align 2, !tbaa !5
  %v3 = add i32 %a1, 128
  %v4 = getelementptr i16, ptr %a0, i32 %v3
  store <64 x i16> %a3, ptr %v4, align 2, !tbaa !7
  ret void
}

attributes #0 = { nounwind "target-cpu"="hexagonv68" "target-features"="+hvxv68,+hvx-length128b" }

!0 = !{!1, !1, i64 0}
!1 = !{!"load type 1", !2}
!2 = !{!"Simple C/C++ TBAA"}
!3 = !{!4, !4, i64 0}
!4 = !{!"load type 2", !2}
!5 = !{!6, !6, i64 0}
!6 = !{!"store type 1", !2}
!7 = !{!8, !8, i64 0}
!8 = !{!"store type 2", !2}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
