# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -global-isel -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs -o - %s | FileCheck %s --check-prefixes=CHECK,GFX9PLUS
# RUN: llc -global-isel -mtriple=amdgcn-amd-amdhsa -mcpu=fiji -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs -o - %s | FileCheck %s --check-prefixes=CHECK,VI

---
name: test_v2s16_idx0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX9PLUS-LABEL: name: test_v2s16_idx0
    ; GFX9PLUS: liveins: $vgpr0
    ; GFX9PLUS-NEXT: {{  $}}
    ; GFX9PLUS-NEXT: %src:_(<2 x s16>) = COPY $vgpr0
    ; GFX9PLUS-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; GFX9PLUS-NEXT: [[DEF:%[0-9]+]]:_(s16) = G_IMPLICIT_DEF
    ; GFX9PLUS-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s16>) = G_BUILD_VECTOR %elt(s16), [[DEF]](s16)
    ; GFX9PLUS-NEXT: %ins:_(<2 x s16>) = G_SHUFFLE_VECTOR %src(<2 x s16>), [[BUILD_VECTOR]], shufflemask(2, 1)
    ; GFX9PLUS-NEXT: $vgpr0 = COPY %ins(<2 x s16>)
    ; VI-LABEL: name: test_v2s16_idx0
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: %src:_(<2 x s16>) = COPY $vgpr0
    ; VI-NEXT: %idx:_(s32) = G_CONSTANT i32 0
    ; VI-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; VI-NEXT: %ins:_(<2 x s16>) = G_INSERT_VECTOR_ELT %src, %elt(s16), %idx(s32)
    ; VI-NEXT: $vgpr0 = COPY %ins(<2 x s16>)
    %src:_(<2 x s16>) = COPY $vgpr0
    %idx:_(s32) = G_CONSTANT i32 0
    %elt:_(s16) = G_CONSTANT i16 42
    %ins:_(<2 x s16>) = G_INSERT_VECTOR_ELT %src, %elt, %idx
    $vgpr0 = COPY %ins
...

---
name: test_v2s16_idx1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX9PLUS-LABEL: name: test_v2s16_idx1
    ; GFX9PLUS: liveins: $vgpr0
    ; GFX9PLUS-NEXT: {{  $}}
    ; GFX9PLUS-NEXT: %src:_(<2 x s16>) = COPY $vgpr0
    ; GFX9PLUS-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; GFX9PLUS-NEXT: [[DEF:%[0-9]+]]:_(s16) = G_IMPLICIT_DEF
    ; GFX9PLUS-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s16>) = G_BUILD_VECTOR %elt(s16), [[DEF]](s16)
    ; GFX9PLUS-NEXT: %ins:_(<2 x s16>) = G_SHUFFLE_VECTOR %src(<2 x s16>), [[BUILD_VECTOR]], shufflemask(0, 2)
    ; GFX9PLUS-NEXT: $vgpr0 = COPY %ins(<2 x s16>)
    ; VI-LABEL: name: test_v2s16_idx1
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: %src:_(<2 x s16>) = COPY $vgpr0
    ; VI-NEXT: %idx:_(s32) = G_CONSTANT i32 1
    ; VI-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; VI-NEXT: %ins:_(<2 x s16>) = G_INSERT_VECTOR_ELT %src, %elt(s16), %idx(s32)
    ; VI-NEXT: $vgpr0 = COPY %ins(<2 x s16>)
    %src:_(<2 x s16>) = COPY $vgpr0
    %idx:_(s32) = G_CONSTANT i32 1
    %elt:_(s16) = G_CONSTANT i16 42
    %ins:_(<2 x s16>) = G_INSERT_VECTOR_ELT %src, %elt, %idx
    $vgpr0 = COPY %ins
...

---
name: test_v2s16_idx2_nofold
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: test_v2s16_idx2_nofold
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ins:_(<2 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: $vgpr0 = COPY %ins(<2 x s16>)
    %src:_(<2 x s16>) = COPY $vgpr0
    %idx:_(s32) = G_CONSTANT i32 2
    %elt:_(s16) = G_CONSTANT i16 42
    %ins:_(<2 x s16>) = G_INSERT_VECTOR_ELT %src, %elt, %idx
    $vgpr0 = COPY %ins
...

---
name: test_v3s16_idx2
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9PLUS-LABEL: name: test_v3s16_idx2
    ; GFX9PLUS: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9PLUS-NEXT: {{  $}}
    ; GFX9PLUS-NEXT: %src:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9PLUS-NEXT: %truncsrc:_(<3 x s16>) = G_TRUNC %src(<3 x s32>)
    ; GFX9PLUS-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; GFX9PLUS-NEXT: [[DEF:%[0-9]+]]:_(s16) = G_IMPLICIT_DEF
    ; GFX9PLUS-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x s16>) = G_BUILD_VECTOR %elt(s16), [[DEF]](s16), [[DEF]](s16)
    ; GFX9PLUS-NEXT: %ins:_(<3 x s16>) = G_SHUFFLE_VECTOR %truncsrc(<3 x s16>), [[BUILD_VECTOR]], shufflemask(0, 1, 3)
    ; GFX9PLUS-NEXT: %zextins:_(<3 x s32>) = G_ZEXT %ins(<3 x s16>)
    ; GFX9PLUS-NEXT: $vgpr0_vgpr1_vgpr2 = COPY %zextins(<3 x s32>)
    ; VI-LABEL: name: test_v3s16_idx2
    ; VI: liveins: $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: %src:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: %truncsrc:_(<3 x s16>) = G_TRUNC %src(<3 x s32>)
    ; VI-NEXT: %idx:_(s32) = G_CONSTANT i32 2
    ; VI-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; VI-NEXT: %ins:_(<3 x s16>) = G_INSERT_VECTOR_ELT %truncsrc, %elt(s16), %idx(s32)
    ; VI-NEXT: %zextins:_(<3 x s32>) = G_ZEXT %ins(<3 x s16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY %zextins(<3 x s32>)
    %src:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    %truncsrc:_(<3 x s16>) = G_TRUNC %src
    %idx:_(s32) = G_CONSTANT i32 2
    %elt:_(s16) = G_CONSTANT i16 42
    %ins:_(<3 x s16>) = G_INSERT_VECTOR_ELT %truncsrc, %elt, %idx
    %zextins:_(<3 x s32>) = G_ZEXT %ins
    $vgpr0_vgpr1_vgpr2 = COPY %zextins
...

---
name: test_v2s32_idx1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; CHECK-LABEL: name: test_v2s32_idx1
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %src:_(<2 x s32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %elt:_(s32) = G_CONSTANT i32 42
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR %elt(s32), [[DEF]](s32)
    ; CHECK-NEXT: %ins:_(<2 x s32>) = G_SHUFFLE_VECTOR %src(<2 x s32>), [[BUILD_VECTOR]], shufflemask(0, 2)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY %ins(<2 x s32>)
    %src:_(<2 x s32>) = COPY $vgpr0_vgpr1
    %idx:_(s32) = G_CONSTANT i32 1
    %elt:_(s32) = G_CONSTANT i32 42
    %ins:_(<2 x s32>) = G_INSERT_VECTOR_ELT %src, %elt, %idx
    $vgpr0_vgpr1 = COPY %ins
...

---
name: test_v4s16_idx3
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX9PLUS-LABEL: name: test_v4s16_idx3
    ; GFX9PLUS: liveins: $vgpr0_vgpr1
    ; GFX9PLUS-NEXT: {{  $}}
    ; GFX9PLUS-NEXT: %src:_(<4 x s16>) = COPY $vgpr0_vgpr1
    ; GFX9PLUS-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; GFX9PLUS-NEXT: [[DEF:%[0-9]+]]:_(s16) = G_IMPLICIT_DEF
    ; GFX9PLUS-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s16>) = G_BUILD_VECTOR %elt(s16), [[DEF]](s16), [[DEF]](s16), [[DEF]](s16)
    ; GFX9PLUS-NEXT: %ins:_(<4 x s16>) = G_SHUFFLE_VECTOR %src(<4 x s16>), [[BUILD_VECTOR]], shufflemask(0, 1, 2, 4)
    ; GFX9PLUS-NEXT: $vgpr0_vgpr1 = COPY %ins(<4 x s16>)
    ; VI-LABEL: name: test_v4s16_idx3
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: %src:_(<4 x s16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: %idx:_(s32) = G_CONSTANT i32 3
    ; VI-NEXT: %elt:_(s16) = G_CONSTANT i16 42
    ; VI-NEXT: %ins:_(<4 x s16>) = G_INSERT_VECTOR_ELT %src, %elt(s16), %idx(s32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY %ins(<4 x s16>)
    %src:_(<4 x s16>) = COPY $vgpr0_vgpr1
    %idx:_(s32) = G_CONSTANT i32 3
    %elt:_(s16) = G_CONSTANT i16 42
    %ins:_(<4 x s16>) = G_INSERT_VECTOR_ELT %src, %elt, %idx
    $vgpr0_vgpr1 = COPY %ins
...
