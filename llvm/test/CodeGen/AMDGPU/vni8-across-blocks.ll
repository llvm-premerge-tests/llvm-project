; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -march=amdgcn -mcpu=gfx906 -verify-machineinstrs < %s | FileCheck --check-prefix=GFX906 %s

define amdgpu_kernel void @v4i8_liveout(ptr addrspace(1) %src1,
; GFX906-LABEL: v4i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v1, 2, v0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dword v2, v1, s[6:7]
; GFX906-NEXT:    v_mov_b32_e32 v1, 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_e32 v4, 24, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v3, 16, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v5, 8, v2
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB0_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    v_lshlrev_b64 v[6:7], 2, v[0:1]
; GFX906-NEXT:    v_mov_b32_e32 v0, s5
; GFX906-NEXT:    v_add_co_u32_e32 v6, vcc, s4, v6
; GFX906-NEXT:    v_addc_co_u32_e32 v7, vcc, v0, v7, vcc
; GFX906-NEXT:    global_load_dword v0, v[6:7], off
; GFX906-NEXT:    v_lshlrev_b16_e32 v5, 8, v5
; GFX906-NEXT:    v_lshlrev_b16_e32 v4, 8, v4
; GFX906-NEXT:    v_or_b32_sdwa v2, v2, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v3, v3, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v2, v2, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_dot4_i32_i8 v2, v0, v2, 0
; GFX906-NEXT:    v_lshrrev_b32_e32 v3, 16, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v4, 24, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v5, 8, v2
; GFX906-NEXT:  .LBB0_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    v_lshlrev_b16_e32 v0, 8, v5
; GFX906-NEXT:    v_or_b32_sdwa v0, v2, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v2, 8, v4
; GFX906-NEXT:    v_or_b32_sdwa v2, v3, v2 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v0, v0, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    global_store_dword v1, v0, s[2:3]
; GFX906-NEXT:    s_endpgm
                                       ptr addrspace(1) %src2,
                                       ptr addrspace(1) nocapture %dst) {
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <4 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <4 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <4 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <4 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  %v1 = bitcast <4 x i8> %vec1 to i32
  %v2 = bitcast <4 x i8> %vec2 to i32
  %dot = call i32 @llvm.amdgcn.sdot4(i32 %v1, i32 %v2, i32 0, i1 false)
  %casted = bitcast i32 %dot to <4 x i8>
  br label %bb.2

bb.2:
  %tmp5 = phi <4 x i8> [ %vec2, %entry ], [ %casted, %bb.1 ]
  store <4 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v8i8_liveout(ptr addrspace(1) %src1,
; GFX906-LABEL: v8i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v1, 3, v0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v1, s[2:3]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_e32 v4, 24, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v3, 16, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v7, 8, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v5, 24, v1
; GFX906-NEXT:    v_lshrrev_b32_e32 v6, 16, v1
; GFX906-NEXT:    v_lshrrev_b32_e32 v8, 8, v1
; GFX906-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB1_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    v_lshlrev_b16_e32 v0, 8, v8
; GFX906-NEXT:    v_or_b32_sdwa v0, v1, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v1, 8, v5
; GFX906-NEXT:    v_or_b32_sdwa v1, v6, v1 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v0, v0, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v1, 8, v7
; GFX906-NEXT:    v_or_b32_sdwa v1, v2, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v2, 8, v4
; GFX906-NEXT:    v_or_b32_sdwa v2, v3, v2 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v1, v1, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    v_dot4_i32_i8 v0, v0, v1, 0
; GFX906-NEXT:    v_or_b32_e32 v1, v0, v1
; GFX906-NEXT:    v_mov_b32_e32 v2, 0
; GFX906-NEXT:    v_lshrrev_b32_e32 v5, 24, v1
; GFX906-NEXT:    v_lshrrev_b32_e32 v6, 16, v1
; GFX906-NEXT:    v_lshrrev_b32_e32 v8, 8, v1
; GFX906-NEXT:    v_mov_b32_e32 v7, v2
; GFX906-NEXT:    v_mov_b32_e32 v3, v2
; GFX906-NEXT:    v_mov_b32_e32 v4, v2
; GFX906-NEXT:  .LBB1_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:    v_lshlrev_b16_e32 v0, 8, v8
; GFX906-NEXT:    v_or_b32_sdwa v0, v1, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v1, 8, v5
; GFX906-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; GFX906-NEXT:    v_or_b32_sdwa v1, v6, v1 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v0, v0, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v1, 8, v7
; GFX906-NEXT:    v_or_b32_sdwa v1, v2, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v2, 8, v4
; GFX906-NEXT:    v_or_b32_sdwa v2, v3, v2 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_mov_b32_e32 v9, 0
; GFX906-NEXT:    v_or_b32_sdwa v1, v1, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_store_dwordx2 v9, v[0:1], s[0:1]
; GFX906-NEXT:    s_endpgm
                                       ptr addrspace(1) %src2,
                                       ptr addrspace(1) nocapture %dst) {
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  %v1 = bitcast <8 x i8> %vec1 to i64
  %trunc1 = trunc i64 %v1 to i32
  %v2upper = lshr i64 %v1, 32
  %trunc2 = trunc i64 %v2upper to i32

  %dot = call i32 @llvm.amdgcn.sdot4(i32 %trunc1, i32 %trunc2, i32 0, i1 false)
  %dotext = zext i32 %dot to i64
  %ret = or i64 %dotext, %v2upper
  %casted = bitcast i64 %ret to <8 x i8>
  br label %bb.2

bb.2:
  %tmp5 = phi <8 x i8> [ %vec1, %entry ], [ %casted, %bb.1 ]
  store <8 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

declare i32 @llvm.amdgcn.workitem.id.x()
declare i32 @llvm.amdgcn.sdot4(i32, i32, i32, i1 immarg) #0

