; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --check-globals
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -amdgpu-attributor  -attributor-assume-closed-world=false %s | FileCheck %s --check-prefixes=CHECK,OWRLD
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -amdgpu-attributor %s | FileCheck %s --check-prefixes=CHECK,CWRLD

%0 = type { ptr, ptr }

define internal fastcc i1 @widget(ptr %arg) {
; CHECK-LABEL: define {{[^@]+}}@widget
; CHECK-SAME: (ptr [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[TMP:%.*]] = getelementptr inbounds [[TMP0:%.*]], ptr [[ARG]], i64 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = call fastcc double @baz(ptr [[TMP1]])
; CHECK-NEXT:    ret i1 false
;
bb:
  %tmp = getelementptr inbounds %0, ptr %arg, i64 0, i32 1
  %tmp1 = load ptr, ptr %tmp, align 8
  %tmp2 = call fastcc double @baz(ptr %tmp1)
  ret i1 false
}

define internal fastcc double @baz(ptr %arg) {
; OWRLD-LABEL: define {{[^@]+}}@baz
; OWRLD-SAME: (ptr [[ARG:%.*]]) #[[ATTR0]] {
; OWRLD-NEXT:  bb:
; OWRLD-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[ARG]], align 8
; OWRLD-NEXT:    [[TMP2:%.*]] = tail call double [[TMP1]]()
; OWRLD-NEXT:    br label [[BB3:%.*]]
; OWRLD:       bb3:
; OWRLD-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[TMP0:%.*]], ptr [[ARG]], i64 0, i32 1
; OWRLD-NEXT:    br label [[BB5:%.*]]
; OWRLD:       bb5:
; OWRLD-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP4]], align 8
; OWRLD-NEXT:    [[TMP7:%.*]] = call fastcc i1 @widget(ptr [[TMP6]])
; OWRLD-NEXT:    br label [[BB5]]
;
; CWRLD-LABEL: define {{[^@]+}}@baz
; CWRLD-SAME: (ptr [[ARG:%.*]]) #[[ATTR0]] {
; CWRLD-NEXT:  bb:
; CWRLD-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[ARG]], align 8
; CWRLD-NEXT:    unreachable
; CWRLD:       bb3:
; CWRLD-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[TMP0:%.*]], ptr [[ARG]], i64 0, i32 1
; CWRLD-NEXT:    br label [[BB5:%.*]]
; CWRLD:       bb5:
; CWRLD-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP4]], align 8
; CWRLD-NEXT:    [[TMP7:%.*]] = call fastcc i1 @widget(ptr [[TMP6]])
; CWRLD-NEXT:    br label [[BB5]]
;
bb:
  %tmp1 = load ptr, ptr %arg, align 8
  %tmp2 = tail call double %tmp1()
  br label %bb3

bb3:                                              ; preds = %bb
  %tmp4 = getelementptr inbounds %0, ptr %arg, i64 0, i32 1
  br label %bb5

bb5:                                              ; preds = %bb5, %bb3
  %tmp6 = load ptr, ptr %tmp4, align 8
  %tmp7 = call fastcc i1 @widget(ptr %tmp6)
  br label %bb5
}

define amdgpu_kernel void @entry() { ; OWRLD-LABEL: define {{[^@]+}}@entry
; OWRLD-SAME: () #[[ATTR0]] {
; OWRLD-NEXT:    [[ALLOCA:%.*]] = alloca [[TMP0:%.*]], align 8, addrspace(5)
; OWRLD-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(5) [[ALLOCA]] to ptr
; OWRLD-NEXT:    [[ARST:%.*]] = call double @baz(ptr [[CAST]])
; OWRLD-NEXT:    ret void
;
; CWRLD-LABEL: define {{[^@]+}}@entry
; CWRLD-SAME: () #[[ATTR1:[0-9]+]] {
; CWRLD-NEXT:    [[ALLOCA:%.*]] = alloca [[TMP0:%.*]], align 8, addrspace(5)
; CWRLD-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(5) [[ALLOCA]] to ptr
; CWRLD-NEXT:    [[ARST:%.*]] = call double @baz(ptr [[CAST]])
; CWRLD-NEXT:    ret void
;
  %alloca = alloca %0, align 8, addrspace(5)
  %cast = addrspacecast ptr addrspace(5) %alloca to ptr
  %arst = call double @baz(ptr %cast)
  ret void
}
;.
; CWRLD: attributes #[[ATTR0]] = { "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="4,10" "uniform-work-group-size"="false" }
; CWRLD: attributes #[[ATTR1]] = { "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="4,10" "uniform-work-group-size"="false" }
;.
