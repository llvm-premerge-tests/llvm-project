; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN:  opt -S -mtriple=amdgcn-- -mcpu=gfx906  -amdgpu-atomic-optimizer-strategy=Iterative -passes='amdgpu-atomic-optimizer,verify<domtree>' %s | FileCheck -check-prefix=IR-ITERATIVE %s
; RUN:  opt -S -mtriple=amdgcn-- -mcpu=gfx906 -amdgpu-atomic-optimizer-strategy=DPP -passes='amdgpu-atomic-optimizer,verify<domtree>' %s | FileCheck -check-prefix=IR-DPP %s

declare i32 @llvm.amdgcn.workitem.id.x()
define amdgpu_kernel void @global_atomic_fadd_uni_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fadd_uni_value(
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fadd_uni_value(
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float 4.0 seq_cst
  ret void
}


define amdgpu_kernel void @global_atomic_fadd_div_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fadd_div_value(
; IR-ITERATIVE-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-ITERATIVE-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fadd_div_value(
; IR-DPP-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-DPP-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float %divValue seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fsub_uni_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fsub_uni_value(
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fsub_uni_value(
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float 4.0 seq_cst
  ret void
}


define amdgpu_kernel void @global_atomic_fsub_div_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fsub_div_value(
; IR-ITERATIVE-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-ITERATIVE-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fsub ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fsub_div_value(
; IR-DPP-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-DPP-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fsub ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fsub ptr addrspace(1) %ptr, float %divValue seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fmin_uni_value(ptr addrspace(1) %ptr) #0 {
; IR-ITERATIVE-LABEL: @global_atomic_fmin_uni_value(
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fmin ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fmin_uni_value(
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fmin ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %result = atomicrmw fmin ptr addrspace(1) %ptr, float 4.0 seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fmin_div_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fmin_div_value(
; IR-ITERATIVE-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-ITERATIVE-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fmin ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fmin_div_value(
; IR-DPP-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-DPP-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fmin ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fmin ptr addrspace(1) %ptr, float %divValue seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fmax_uni_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fmax_uni_value(
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fmax ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fmax_uni_value(
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fmax ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float 4.0 seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fmax_div_value(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fmax_div_value(
; IR-ITERATIVE-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-ITERATIVE-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fmax ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fmax_div_value(
; IR-DPP-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-DPP-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fmax ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] seq_cst, align 4
; IR-DPP-NEXT:    ret void
;
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float %divValue seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fadd_uni_value_scope_defalut(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fadd_uni_value_scope_defalut(
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 monotonic, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fadd_uni_value_scope_defalut(
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 monotonic, align 4
; IR-DPP-NEXT:    ret void
;
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float 4.0 monotonic, align 4
  ret void
}

define amdgpu_kernel void @global_atomic_fadd_div_value_scope_defalut(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fadd_div_value_scope_defalut(
; IR-ITERATIVE-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-ITERATIVE-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] monotonic, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fadd_div_value_scope_defalut(
; IR-DPP-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-DPP-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] monotonic, align 4
; IR-DPP-NEXT:    ret void
;
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float %divValue monotonic, align 4
  ret void
}

define amdgpu_kernel void @global_atomic_fadd_uni_value_scope_agent(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fadd_uni_value_scope_agent(
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 syncscope("agent") monotonic, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fadd_uni_value_scope_agent(
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float 4.000000e+00 syncscope("agent") monotonic, align 4
; IR-DPP-NEXT:    ret void
;
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float 4.0 syncscope("agent") monotonic, align 4
  ret void
}

define amdgpu_kernel void @global_atomic_fadd_div_value_scope_agent(ptr addrspace(1) %ptr) {
; IR-ITERATIVE-LABEL: @global_atomic_fadd_div_value_scope_agent(
; IR-ITERATIVE-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-ITERATIVE-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-ITERATIVE-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] syncscope("agent") monotonic, align 4
; IR-ITERATIVE-NEXT:    ret void
;
; IR-DPP-LABEL: @global_atomic_fadd_div_value_scope_agent(
; IR-DPP-NEXT:    [[ID_X:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; IR-DPP-NEXT:    [[DIVVALUE:%.*]] = bitcast i32 [[ID_X]] to float
; IR-DPP-NEXT:    [[RESULT:%.*]] = atomicrmw fadd ptr addrspace(1) [[PTR:%.*]], float [[DIVVALUE]] syncscope("agent") monotonic, align 4
; IR-DPP-NEXT:    ret void
;
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fadd ptr addrspace(1) %ptr, float %divValue syncscope("agent") monotonic, align 4
  ret void
}
