; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=amdgcn -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefix=GFX7LESS %s
; RUN: llc -march=amdgcn -mcpu=tonga -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX8 %s
; RUN: llc -march=amdgcn -mcpu=gfx900 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX9 %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1064 %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1032 %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1164 %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1132 %s
; RUN: llc -march=amdgcn -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefix=GFX7LESS %s
; RUN: llc -march=amdgcn -mcpu=gfx900 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX9-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1064-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1032-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1164-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1132-DPP %s

declare i32 @llvm.amdgcn.workitem.id.x()
define amdgpu_kernel void @global_atomic_fmax_uni_value(ptr addrspace(1) %ptr) {
; GFX7LESS-LABEL: global_atomic_fmax_uni_value:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x9
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    s_mov_b32 s3, 0xf000
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, s2
; GFX7LESS-NEXT:    s_mov_b32 s2, -1
; GFX7LESS-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX7LESS-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v2, v0
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[2:3], off, s[0:3], 0 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    buffer_wbinvl1
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v1
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v2
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB0_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_endpgm
;
; GFX8-LABEL: global_atomic_fmax_uni_value:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX8-NEXT:    s_mov_b64 s[2:3], 0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v1, s4
; GFX8-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX8-NEXT:    v_mov_b32_e32 v3, s1
; GFX8-NEXT:    v_mov_b32_e32 v2, s0
; GFX8-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX8-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[2:3], v[0:1] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    buffer_wbinvl1_vol
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX8-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX8-NEXT:    s_cbranch_execnz .LBB0_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: global_atomic_fmax_uni_value:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX9-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX9-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    buffer_wbinvl1_vol
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-NEXT:    s_cbranch_execnz .LBB0_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_endpgm
;
; GFX1064-LABEL: global_atomic_fmax_uni_value:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-NEXT:    v_mov_b32_e32 v2, 0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1064-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1064-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1064-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    buffer_gl0_inv
; GFX1064-NEXT:    buffer_gl1_inv
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_endpgm
;
; GFX1032-LABEL: global_atomic_fmax_uni_value:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-NEXT:    v_mov_b32_e32 v2, 0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-NEXT:    s_mov_b32 s2, 0
; GFX1032-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1032-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1032-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1032-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    buffer_gl0_inv
; GFX1032-NEXT:    buffer_gl1_inv
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_endpgm
;
; GFX1164-LABEL: global_atomic_fmax_uni_value:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-NEXT:    v_mov_b32_e32 v2, 0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1164-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1164-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    buffer_gl0_inv
; GFX1164-NEXT:    buffer_gl1_inv
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_endpgm
;
; GFX1132-LABEL: global_atomic_fmax_uni_value:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-NEXT:    v_mov_b32_e32 v2, 0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    v_mov_b32_e32 v1, s2
; GFX1132-NEXT:    s_mov_b32 s2, 0
; GFX1132-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1132-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1132-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    buffer_gl0_inv
; GFX1132-NEXT:    buffer_gl1_inv
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_endpgm
;
; GFX9-DPP-LABEL: global_atomic_fmax_uni_value:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    buffer_wbinvl1_vol
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_endpgm
;
; GFX1064-DPP-LABEL: global_atomic_fmax_uni_value:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    buffer_gl0_inv
; GFX1064-DPP-NEXT:    buffer_gl1_inv
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_endpgm
;
; GFX1032-DPP-LABEL: global_atomic_fmax_uni_value:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1032-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    buffer_gl0_inv
; GFX1032-DPP-NEXT:    buffer_gl1_inv
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_endpgm
;
; GFX1164-DPP-LABEL: global_atomic_fmax_uni_value:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    buffer_gl0_inv
; GFX1164-DPP-NEXT:    buffer_gl1_inv
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_endpgm
;
; GFX1132-DPP-LABEL: global_atomic_fmax_uni_value:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1132-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1132-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    buffer_gl0_inv
; GFX1132-DPP-NEXT:    buffer_gl1_inv
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_endpgm
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float 4.0 seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fmax_div_value(ptr addrspace(1) %ptr) {
; GFX7LESS-LABEL: global_atomic_fmax_div_value:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x9
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    v_mul_f32_e32 v2, 1.0, v0
; GFX7LESS-NEXT:    s_mov_b32 s3, 0xf000
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, s2
; GFX7LESS-NEXT:    s_mov_b32 s2, -1
; GFX7LESS-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX7LESS-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v4, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v0
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[3:4], off, s[0:3], 0 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    buffer_wbinvl1
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v3, v1
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v3
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB1_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_endpgm
;
; GFX8-LABEL: global_atomic_fmax_div_value:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX8-NEXT:    s_mov_b64 s[2:3], 0
; GFX8-NEXT:    v_mul_f32_e32 v2, 1.0, v0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v1, s4
; GFX8-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX8-NEXT:    v_mov_b32_e32 v4, s1
; GFX8-NEXT:    v_mov_b32_e32 v3, s0
; GFX8-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX8-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[3:4], v[0:1] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    buffer_wbinvl1_vol
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX8-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX8-NEXT:    s_cbranch_execnz .LBB1_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: global_atomic_fmax_div_value:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX9-NEXT:    v_mov_b32_e32 v3, 0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX9-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX9-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    buffer_wbinvl1_vol
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-NEXT:    s_cbranch_execnz .LBB1_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_endpgm
;
; GFX1064-LABEL: global_atomic_fmax_div_value:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1064-NEXT:    v_mov_b32_e32 v3, 0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1064-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1064-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1064-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    buffer_gl0_inv
; GFX1064-NEXT:    buffer_gl1_inv
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_endpgm
;
; GFX1032-LABEL: global_atomic_fmax_div_value:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1032-NEXT:    v_mov_b32_e32 v3, 0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-NEXT:    s_mov_b32 s2, 0
; GFX1032-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1032-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1032-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1032-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    buffer_gl0_inv
; GFX1032-NEXT:    buffer_gl1_inv
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_endpgm
;
; GFX1164-LABEL: global_atomic_fmax_div_value:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1164-NEXT:    v_mov_b32_e32 v3, 0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1164-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1164-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    buffer_gl0_inv
; GFX1164-NEXT:    buffer_gl1_inv
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_endpgm
;
; GFX1132-LABEL: global_atomic_fmax_div_value:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-NEXT:    v_mov_b32_e32 v3, 0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    v_dual_max_f32 v2, v0, v0 :: v_dual_mov_b32 v1, s2
; GFX1132-NEXT:    s_mov_b32 s2, 0
; GFX1132-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1132-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1132-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    buffer_gl0_inv
; GFX1132-NEXT:    buffer_gl1_inv
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_endpgm
;
; GFX9-DPP-LABEL: global_atomic_fmax_div_value:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    buffer_wbinvl1_vol
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_endpgm
;
; GFX1064-DPP-LABEL: global_atomic_fmax_div_value:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    buffer_gl0_inv
; GFX1064-DPP-NEXT:    buffer_gl1_inv
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_endpgm
;
; GFX1032-DPP-LABEL: global_atomic_fmax_div_value:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1032-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    buffer_gl0_inv
; GFX1032-DPP-NEXT:    buffer_gl1_inv
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_endpgm
;
; GFX1164-DPP-LABEL: global_atomic_fmax_div_value:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    buffer_gl0_inv
; GFX1164-DPP-NEXT:    buffer_gl1_inv
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_endpgm
;
; GFX1132-DPP-LABEL: global_atomic_fmax_div_value:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    v_dual_max_f32 v2, v0, v0 :: v_dual_mov_b32 v1, s2
; GFX1132-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1132-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_waitcnt_vscnt null, 0x0
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    buffer_gl0_inv
; GFX1132-DPP-NEXT:    buffer_gl1_inv
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_endpgm
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float %divValue seq_cst
  ret void
}

define amdgpu_kernel void @global_atomic_fmax_uni_value_scope_defalut(ptr addrspace(1) %ptr) {
; GFX7LESS-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x9
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    s_mov_b32 s3, 0xf000
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, s2
; GFX7LESS-NEXT:    s_mov_b32 s2, -1
; GFX7LESS-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX7LESS-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v2, v0
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[2:3], off, s[0:3], 0 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v1
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v2
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB2_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_endpgm
;
; GFX8-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX8-NEXT:    s_mov_b64 s[2:3], 0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v1, s4
; GFX8-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX8-NEXT:    v_mov_b32_e32 v3, s1
; GFX8-NEXT:    v_mov_b32_e32 v2, s0
; GFX8-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[2:3], v[0:1] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX8-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX8-NEXT:    s_cbranch_execnz .LBB2_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX9-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-NEXT:    s_cbranch_execnz .LBB2_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_endpgm
;
; GFX1064-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-NEXT:    v_mov_b32_e32 v2, 0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1064-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_endpgm
;
; GFX1032-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-NEXT:    v_mov_b32_e32 v2, 0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-NEXT:    s_mov_b32 s2, 0
; GFX1032-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1032-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_endpgm
;
; GFX1164-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-NEXT:    v_mov_b32_e32 v2, 0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_endpgm
;
; GFX1132-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-NEXT:    v_mov_b32_e32 v2, 0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    v_mov_b32_e32 v1, s2
; GFX1132-NEXT:    s_mov_b32 s2, 0
; GFX1132-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_endpgm
;
; GFX9-DPP-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-DPP-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB2_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_endpgm
;
; GFX1064-DPP-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-DPP-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_endpgm
;
; GFX1032-DPP-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1032-DPP-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_endpgm
;
; GFX1164-DPP-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-DPP-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_endpgm
;
; GFX1132-DPP-LABEL: global_atomic_fmax_uni_value_scope_defalut:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1132-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1132-DPP-NEXT:  .LBB2_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB2_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_endpgm
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float 4.0 monotonic, align 4
  ret void
}

define amdgpu_kernel void @global_atomic_fmax_div_value_scope_defalut(ptr addrspace(1) %ptr) {
; GFX7LESS-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x9
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    v_mul_f32_e32 v2, 1.0, v0
; GFX7LESS-NEXT:    s_mov_b32 s3, 0xf000
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, s2
; GFX7LESS-NEXT:    s_mov_b32 s2, -1
; GFX7LESS-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX7LESS-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v4, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v0
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[3:4], off, s[0:3], 0 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v3, v1
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v3
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB3_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_endpgm
;
; GFX8-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX8-NEXT:    s_mov_b64 s[2:3], 0
; GFX8-NEXT:    v_mul_f32_e32 v2, 1.0, v0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v1, s4
; GFX8-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX8-NEXT:    v_mov_b32_e32 v4, s1
; GFX8-NEXT:    v_mov_b32_e32 v3, s0
; GFX8-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[3:4], v[0:1] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX8-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX8-NEXT:    s_cbranch_execnz .LBB3_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX9-NEXT:    v_mov_b32_e32 v3, 0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX9-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-NEXT:    s_cbranch_execnz .LBB3_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_endpgm
;
; GFX1064-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1064-NEXT:    v_mov_b32_e32 v3, 0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1064-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_endpgm
;
; GFX1032-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1032-NEXT:    v_mov_b32_e32 v3, 0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-NEXT:    s_mov_b32 s2, 0
; GFX1032-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1032-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_endpgm
;
; GFX1164-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1164-NEXT:    v_mov_b32_e32 v3, 0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_endpgm
;
; GFX1132-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-NEXT:    v_mov_b32_e32 v3, 0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    v_dual_max_f32 v2, v0, v0 :: v_dual_mov_b32 v1, s2
; GFX1132-NEXT:    s_mov_b32 s2, 0
; GFX1132-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_endpgm
;
; GFX9-DPP-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-DPP-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB3_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_endpgm
;
; GFX1064-DPP-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-DPP-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_endpgm
;
; GFX1032-DPP-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1032-DPP-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_endpgm
;
; GFX1164-DPP-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-DPP-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_endpgm
;
; GFX1132-DPP-LABEL: global_atomic_fmax_div_value_scope_defalut:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    v_dual_max_f32 v2, v0, v0 :: v_dual_mov_b32 v1, s2
; GFX1132-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1132-DPP-NEXT:  .LBB3_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB3_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_endpgm
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float %divValue monotonic, align 4
  ret void
}

define amdgpu_kernel void @global_atomic_fmax_uni_value_scope_agent(ptr addrspace(1) %ptr) {
; GFX7LESS-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x9
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    s_mov_b32 s3, 0xf000
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, s2
; GFX7LESS-NEXT:    s_mov_b32 s2, -1
; GFX7LESS-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX7LESS-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v2, v0
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[2:3], off, s[0:3], 0 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v1
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v2
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB4_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_endpgm
;
; GFX8-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX8-NEXT:    s_mov_b64 s[2:3], 0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v1, s4
; GFX8-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX8-NEXT:    v_mov_b32_e32 v3, s1
; GFX8-NEXT:    v_mov_b32_e32 v2, s0
; GFX8-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[2:3], v[0:1] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX8-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX8-NEXT:    s_cbranch_execnz .LBB4_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX9-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-NEXT:    s_cbranch_execnz .LBB4_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_endpgm
;
; GFX1064-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-NEXT:    v_mov_b32_e32 v2, 0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1064-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_endpgm
;
; GFX1032-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-NEXT:    v_mov_b32_e32 v2, 0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-NEXT:    s_mov_b32 s2, 0
; GFX1032-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1032-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_endpgm
;
; GFX1164-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-NEXT:    v_mov_b32_e32 v2, 0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_endpgm
;
; GFX1132-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-NEXT:    v_mov_b32_e32 v2, 0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    v_mov_b32_e32 v1, s2
; GFX1132-NEXT:    s_mov_b32 s2, 0
; GFX1132-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_endpgm
;
; GFX9-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-DPP-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB4_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_endpgm
;
; GFX1064-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-DPP-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_endpgm
;
; GFX1032-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1032-DPP-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v2, v[0:1], s[0:1] glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_endpgm
;
; GFX1164-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-DPP-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_endpgm
;
; GFX1132-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v2, 0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1132-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1132-DPP-NEXT:  .LBB4_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, 4.0, v0
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v2, v[0:1], s[0:1] glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB4_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_endpgm
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float 4.0 syncscope("agent") monotonic, align 4
  ret void
}


define amdgpu_kernel void @global_atomic_fmax_div_value_scope_agent(ptr addrspace(1) %ptr) {
; GFX7LESS-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x9
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    v_mul_f32_e32 v2, 1.0, v0
; GFX7LESS-NEXT:    s_mov_b32 s3, 0xf000
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, s2
; GFX7LESS-NEXT:    s_mov_b32 s2, -1
; GFX7LESS-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX7LESS-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v4, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v0
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[3:4], off, s[0:3], 0 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v3, v1
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v3
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB5_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_endpgm
;
; GFX8-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX8-NEXT:    s_mov_b64 s[2:3], 0
; GFX8-NEXT:    v_mul_f32_e32 v2, 1.0, v0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v1, s4
; GFX8-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v1
; GFX8-NEXT:    v_mov_b32_e32 v4, s1
; GFX8-NEXT:    v_mov_b32_e32 v3, s0
; GFX8-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[3:4], v[0:1] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX8-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX8-NEXT:    s_cbranch_execnz .LBB5_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_endpgm
;
; GFX9-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX9-NEXT:    v_mov_b32_e32 v3, 0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX9-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-NEXT:    s_cbranch_execnz .LBB5_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_endpgm
;
; GFX1064-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1064-NEXT:    v_mov_b32_e32 v3, 0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1064-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_endpgm
;
; GFX1032-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1032-NEXT:    v_mov_b32_e32 v3, 0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-NEXT:    s_mov_b32 s2, 0
; GFX1032-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1032-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_endpgm
;
; GFX1164-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1164-NEXT:    v_mov_b32_e32 v3, 0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_endpgm
;
; GFX1132-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-NEXT:    v_mov_b32_e32 v3, 0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    v_dual_max_f32 v2, v0, v0 :: v_dual_mov_b32 v1, s2
; GFX1132-NEXT:    s_mov_b32 s2, 0
; GFX1132-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_endpgm
;
; GFX9-DPP-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX9-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX9-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, s4
; GFX9-DPP-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX9-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB5_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_endpgm
;
; GFX1064-DPP-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1064-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1064-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1064-DPP-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_endpgm
;
; GFX1032-DPP-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x24
; GFX1032-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_load_dword s2, s[0:1], 0x0
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1032-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1032-DPP-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v3, v[0:1], s[0:1] glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s2
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_endpgm
;
; GFX1164-DPP-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1164-DPP-NEXT:    v_max_f32_e32 v2, v0, v0
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, s2
; GFX1164-DPP-NEXT:    s_mov_b64 s[2:3], 0
; GFX1164-DPP-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v1
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    s_or_b64 s[2:3], vcc, s[2:3]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[2:3]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_endpgm
;
; GFX1132-DPP-LABEL: global_atomic_fmax_div_value_scope_agent:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x24
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v3, 0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_load_b32 s2, s[0:1], 0x0
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    v_dual_max_f32 v2, v0, v0 :: v_dual_mov_b32 v1, s2
; GFX1132-DPP-NEXT:    s_mov_b32 s2, 0
; GFX1132-DPP-NEXT:  .LBB5_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v1, v1
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v0, v2
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v3, v[0:1], s[0:1] glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v1
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    s_or_b32 s2, vcc_lo, s2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s2
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB5_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_endpgm
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = bitcast i32 %id.x to float
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float %divValue syncscope("agent") monotonic, align 4
  ret void
}
