; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=amdgcn -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefix=GFX7LESS %s
; RUN: llc -march=amdgcn -mcpu=tonga -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX8 %s
; RUN: llc -march=amdgcn -mcpu=gfx900 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX9 %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1064 %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1032 %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1164 %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=Iterative -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1132 %s
; RUN: llc -march=amdgcn -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefix=GFX7LESS %s
; RUN: llc -march=amdgcn -mcpu=gfx900 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX9-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1064-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1010 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1032-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=-wavefrontsize32,+wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1164-DPP %s
; RUN: llc -march=amdgcn -mcpu=gfx1100 -mattr=+wavefrontsize32,-wavefrontsize64 -amdgpu-atomic-optimizer-strategy=DPP -verify-machineinstrs < %s | FileCheck -enable-var-scope -check-prefixes=GFX1132-DPP %s

declare float @foo(i32)
declare i32 @llvm.amdgcn.workitem.id.x()

define float @global_atomic_fmax_uni_value_scope_agent_attr0(ptr addrspace(1) %ptr) #0 {
; GFX7LESS-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7LESS-NEXT:    s_mov_b32 s6, 0
; GFX7LESS-NEXT:    s_mov_b32 s7, 0xf000
; GFX7LESS-NEXT:    s_mov_b32 s4, s6
; GFX7LESS-NEXT:    s_mov_b32 s5, s6
; GFX7LESS-NEXT:    buffer_load_dword v2, v[0:1], s[4:7], 0 addr64
; GFX7LESS-NEXT:    s_mov_b64 s[8:9], 0
; GFX7LESS-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v4, v2
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mul_f32_e32 v2, 1.0, v4
; GFX7LESS-NEXT:    v_max_f32_e32 v3, 4.0, v2
; GFX7LESS-NEXT:    v_mov_b32_e32 v2, v3
; GFX7LESS-NEXT:    v_mov_b32_e32 v3, v4
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[2:3], v[0:1], s[4:7], 0 addr64 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v4
; GFX7LESS-NEXT:    s_or_b64 s[8:9], vcc, s[8:9]
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[8:9]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB0_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_or_b64 exec, exec, s[8:9]
; GFX7LESS-NEXT:    v_mov_b32_e32 v0, v2
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    s_setpc_b64 s[30:31]
;
; GFX8-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    flat_load_dword v2, v[0:1]
; GFX8-NEXT:    s_mov_b64 s[4:5], 0
; GFX8-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v3, v2
; GFX8-NEXT:    v_mul_f32_e32 v2, 1.0, v3
; GFX8-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX8-NEXT:    flat_atomic_cmpswap v2, v[0:1], v[2:3] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX8-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX8-NEXT:    s_cbranch_execnz .LBB0_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX8-NEXT:    v_mov_b32_e32 v0, v2
; GFX8-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    global_load_dword v2, v[0:1], off
; GFX9-NEXT:    s_mov_b64 s[4:5], 0
; GFX9-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v3, v2
; GFX9-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX9-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX9-NEXT:    global_atomic_cmpswap v2, v[0:1], v[2:3], off glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX9-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX9-NEXT:    s_cbranch_execnz .LBB0_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-NEXT:    v_mov_b32_e32 v0, v2
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1064-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1064-NEXT:    global_load_dword v2, v[0:1], off
; GFX1064-NEXT:    s_mov_b64 s[4:5], 0
; GFX1064-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v3, v2
; GFX1064-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1064-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1064-NEXT:    global_atomic_cmpswap v2, v[0:1], v[2:3], off glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX1064-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX1064-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX1064-NEXT:    v_mov_b32_e32 v0, v2
; GFX1064-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1032-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1032-NEXT:    global_load_dword v2, v[0:1], off
; GFX1032-NEXT:    s_mov_b32 s4, 0
; GFX1032-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v3, v2
; GFX1032-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1032-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1032-NEXT:    global_atomic_cmpswap v2, v[0:1], v[2:3], off glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v2, v3
; GFX1032-NEXT:    s_or_b32 s4, vcc_lo, s4
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s4
; GFX1032-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX1032-NEXT:    v_mov_b32_e32 v0, v2
; GFX1032-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1164-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1164-NEXT:    global_load_b32 v2, v[0:1], off
; GFX1164-NEXT:    s_mov_b64 s[0:1], 0
; GFX1164-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v3, v2
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1164-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v2, v[0:1], v[2:3], off glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX1164-NEXT:    s_or_b64 s[0:1], vcc, s[0:1]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[0:1]
; GFX1164-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX1164-NEXT:    v_mov_b32_e32 v0, v2
; GFX1164-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1132-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1132-NEXT:    global_load_b32 v2, v[0:1], off
; GFX1132-NEXT:    s_mov_b32 s0, 0
; GFX1132-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_mov_b32_e32 v3, v2
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1132-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v2, v[0:1], v[2:3], off glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v2, v3
; GFX1132-NEXT:    s_or_b32 s0, vcc_lo, s0
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s0
; GFX1132-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX1132-NEXT:    v_mov_b32_e32 v0, v2
; GFX1132-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-DPP-NEXT:    global_load_dword v2, v[0:1], off
; GFX9-DPP-NEXT:    s_mov_b64 s[4:5], 0
; GFX9-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v3, v2
; GFX9-DPP-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX9-DPP-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX9-DPP-NEXT:    global_atomic_cmpswap v2, v[0:1], v[2:3], off glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX9-DPP-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v0, v2
; GFX9-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1064-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1064-DPP-NEXT:    global_load_dword v2, v[0:1], off
; GFX1064-DPP-NEXT:    s_mov_b64 s[4:5], 0
; GFX1064-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v3, v2
; GFX1064-DPP-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1064-DPP-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v2, v[0:1], v[2:3], off glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX1064-DPP-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v0, v2
; GFX1064-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1032-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1032-DPP-NEXT:    global_load_dword v2, v[0:1], off
; GFX1032-DPP-NEXT:    s_mov_b32 s4, 0
; GFX1032-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v3, v2
; GFX1032-DPP-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1032-DPP-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v2, v[0:1], v[2:3], off glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v2, v3
; GFX1032-DPP-NEXT:    s_or_b32 s4, vcc_lo, s4
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s4
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v0, v2
; GFX1032-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1164-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1164-DPP-NEXT:    global_load_b32 v2, v[0:1], off
; GFX1164-DPP-NEXT:    s_mov_b64 s[0:1], 0
; GFX1164-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v3, v2
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1164-DPP-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v2, v[0:1], v[2:3], off glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v2, v3
; GFX1164-DPP-NEXT:    s_or_b64 s[0:1], vcc, s[0:1]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[0:1]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v0, v2
; GFX1164-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1132-DPP-LABEL: global_atomic_fmax_uni_value_scope_agent_attr0:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1132-DPP-NEXT:    global_load_b32 v2, v[0:1], off
; GFX1132-DPP-NEXT:    s_mov_b32 s0, 0
; GFX1132-DPP-NEXT:  .LBB0_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v3, v2
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v2, v3, v3
; GFX1132-DPP-NEXT:    v_max_f32_e32 v2, 4.0, v2
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v2, v[0:1], v[2:3], off glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v2, v3
; GFX1132-DPP-NEXT:    s_or_b32 s0, vcc_lo, s0
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s0
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB0_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v0, v2
; GFX1132-DPP-NEXT:    s_setpc_b64 s[30:31]
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float 4.0 syncscope("agent") monotonic, align 4
  ret float %result
}

define float @global_atomic_fmax_div_value_scope_agent_attr0(ptr addrspace(1) %ptr) #0 {
; GFX7LESS-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX7LESS:       ; %bb.0:
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7LESS-NEXT:    s_mov_b32 s16, s33
; GFX7LESS-NEXT:    s_mov_b32 s33, s32
; GFX7LESS-NEXT:    s_or_saveexec_b64 s[18:19], -1
; GFX7LESS-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX7LESS-NEXT:    s_mov_b64 exec, s[18:19]
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_writelane_b32 v40, s16, 6
; GFX7LESS-NEXT:    s_addk_i32 s32, 0x400
; GFX7LESS-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX7LESS-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX7LESS-NEXT:    v_writelane_b32 v40, s30, 0
; GFX7LESS-NEXT:    v_writelane_b32 v40, s31, 1
; GFX7LESS-NEXT:    v_writelane_b32 v40, s36, 2
; GFX7LESS-NEXT:    v_writelane_b32 v40, s37, 3
; GFX7LESS-NEXT:    v_writelane_b32 v40, s38, 4
; GFX7LESS-NEXT:    v_writelane_b32 v40, s39, 5
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v42, v1
; GFX7LESS-NEXT:    v_mov_b32_e32 v41, v0
; GFX7LESS-NEXT:    s_getpc_b64 s[16:17]
; GFX7LESS-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX7LESS-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX7LESS-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX7LESS-NEXT:    s_mov_b32 s38, 0
; GFX7LESS-NEXT:    s_mov_b32 s39, 0xf000
; GFX7LESS-NEXT:    s_mov_b32 s36, s38
; GFX7LESS-NEXT:    s_mov_b32 s37, s38
; GFX7LESS-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX7LESS-NEXT:    s_waitcnt lgkmcnt(0)
; GFX7LESS-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v0
; GFX7LESS-NEXT:    buffer_load_dword v0, v[41:42], s[36:39], 0 addr64
; GFX7LESS-NEXT:    s_mov_b64 s[4:5], 0
; GFX7LESS-NEXT:    v_mul_f32_e32 v2, 1.0, v1
; GFX7LESS-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX7LESS-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_mov_b32_e32 v4, v0
; GFX7LESS-NEXT:    s_waitcnt expcnt(0)
; GFX7LESS-NEXT:    v_mul_f32_e32 v0, 1.0, v4
; GFX7LESS-NEXT:    v_max_f32_e32 v3, v0, v2
; GFX7LESS-NEXT:    v_mov_b32_e32 v0, v3
; GFX7LESS-NEXT:    v_mov_b32_e32 v1, v4
; GFX7LESS-NEXT:    buffer_atomic_cmpswap v[0:1], v[41:42], s[36:39], 0 addr64 glc
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0)
; GFX7LESS-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v4
; GFX7LESS-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX7LESS-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    s_cbranch_execnz .LBB1_1
; GFX7LESS-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX7LESS-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX7LESS-NEXT:    v_readlane_b32 s39, v40, 5
; GFX7LESS-NEXT:    v_readlane_b32 s38, v40, 4
; GFX7LESS-NEXT:    v_readlane_b32 s37, v40, 3
; GFX7LESS-NEXT:    v_readlane_b32 s36, v40, 2
; GFX7LESS-NEXT:    v_readlane_b32 s31, v40, 1
; GFX7LESS-NEXT:    v_readlane_b32 s30, v40, 0
; GFX7LESS-NEXT:    buffer_load_dword v42, off, s[0:3], s33 ; 4-byte Folded Reload
; GFX7LESS-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Reload
; GFX7LESS-NEXT:    v_readlane_b32 s4, v40, 6
; GFX7LESS-NEXT:    s_or_saveexec_b64 s[6:7], -1
; GFX7LESS-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX7LESS-NEXT:    s_mov_b64 exec, s[6:7]
; GFX7LESS-NEXT:    s_addk_i32 s32, 0xfc00
; GFX7LESS-NEXT:    s_mov_b32 s33, s4
; GFX7LESS-NEXT:    s_waitcnt vmcnt(0) expcnt(0)
; GFX7LESS-NEXT:    s_setpc_b64 s[30:31]
;
; GFX8-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX8:       ; %bb.0:
; GFX8-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX8-NEXT:    s_mov_b32 s16, s33
; GFX8-NEXT:    s_mov_b32 s33, s32
; GFX8-NEXT:    s_or_saveexec_b64 s[18:19], -1
; GFX8-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX8-NEXT:    s_mov_b64 exec, s[18:19]
; GFX8-NEXT:    s_addk_i32 s32, 0x400
; GFX8-NEXT:    v_writelane_b32 v40, s16, 2
; GFX8-NEXT:    s_getpc_b64 s[16:17]
; GFX8-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX8-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX8-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX8-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX8-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX8-NEXT:    v_writelane_b32 v40, s30, 0
; GFX8-NEXT:    v_mov_b32_e32 v41, v0
; GFX8-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX8-NEXT:    v_writelane_b32 v40, s31, 1
; GFX8-NEXT:    v_mov_b32_e32 v42, v1
; GFX8-NEXT:    s_waitcnt lgkmcnt(0)
; GFX8-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX8-NEXT:    v_mov_b32_e32 v1, v0
; GFX8-NEXT:    flat_load_dword v0, v[41:42]
; GFX8-NEXT:    s_mov_b64 s[4:5], 0
; GFX8-NEXT:    v_mul_f32_e32 v1, 1.0, v1
; GFX8-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX8-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_mov_b32_e32 v3, v0
; GFX8-NEXT:    v_mul_f32_e32 v0, 1.0, v3
; GFX8-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX8-NEXT:    flat_atomic_cmpswap v0, v[41:42], v[2:3] glc
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX8-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX8-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX8-NEXT:    s_cbranch_execnz .LBB1_1
; GFX8-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX8-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX8-NEXT:    buffer_load_dword v42, off, s[0:3], s33 ; 4-byte Folded Reload
; GFX8-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Reload
; GFX8-NEXT:    v_readlane_b32 s31, v40, 1
; GFX8-NEXT:    v_readlane_b32 s30, v40, 0
; GFX8-NEXT:    v_readlane_b32 s4, v40, 2
; GFX8-NEXT:    s_or_saveexec_b64 s[6:7], -1
; GFX8-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX8-NEXT:    s_mov_b64 exec, s[6:7]
; GFX8-NEXT:    s_addk_i32 s32, 0xfc00
; GFX8-NEXT:    s_mov_b32 s33, s4
; GFX8-NEXT:    s_waitcnt vmcnt(0)
; GFX8-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    s_mov_b32 s16, s33
; GFX9-NEXT:    s_mov_b32 s33, s32
; GFX9-NEXT:    s_or_saveexec_b64 s[18:19], -1
; GFX9-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX9-NEXT:    s_mov_b64 exec, s[18:19]
; GFX9-NEXT:    s_addk_i32 s32, 0x400
; GFX9-NEXT:    v_writelane_b32 v40, s16, 2
; GFX9-NEXT:    s_getpc_b64 s[16:17]
; GFX9-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX9-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX9-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX9-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX9-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX9-NEXT:    v_writelane_b32 v40, s30, 0
; GFX9-NEXT:    v_mov_b32_e32 v41, v0
; GFX9-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX9-NEXT:    v_writelane_b32 v40, s31, 1
; GFX9-NEXT:    v_mov_b32_e32 v42, v1
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX9-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-NEXT:    global_load_dword v0, v[41:42], off
; GFX9-NEXT:    s_mov_b64 s[4:5], 0
; GFX9-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX9-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX9-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v3, v0
; GFX9-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX9-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX9-NEXT:    global_atomic_cmpswap v0, v[41:42], v[2:3], off glc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX9-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX9-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX9-NEXT:    s_cbranch_execnz .LBB1_1
; GFX9-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-NEXT:    buffer_load_dword v42, off, s[0:3], s33 ; 4-byte Folded Reload
; GFX9-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Reload
; GFX9-NEXT:    v_readlane_b32 s31, v40, 1
; GFX9-NEXT:    v_readlane_b32 s30, v40, 0
; GFX9-NEXT:    v_readlane_b32 s4, v40, 2
; GFX9-NEXT:    s_or_saveexec_b64 s[6:7], -1
; GFX9-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX9-NEXT:    s_mov_b64 exec, s[6:7]
; GFX9-NEXT:    s_addk_i32 s32, 0xfc00
; GFX9-NEXT:    s_mov_b32 s33, s4
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1064-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1064:       ; %bb.0:
; GFX1064-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1064-NEXT:    s_mov_b32 s16, s33
; GFX1064-NEXT:    s_mov_b32 s33, s32
; GFX1064-NEXT:    s_or_saveexec_b64 s[18:19], -1
; GFX1064-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX1064-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1064-NEXT:    s_mov_b64 exec, s[18:19]
; GFX1064-NEXT:    s_addk_i32 s32, 0x400
; GFX1064-NEXT:    v_writelane_b32 v40, s16, 2
; GFX1064-NEXT:    s_getpc_b64 s[16:17]
; GFX1064-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX1064-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX1064-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX1064-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX1064-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX1064-NEXT:    v_mov_b32_e32 v41, v0
; GFX1064-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1064-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1064-NEXT:    v_mov_b32_e32 v42, v1
; GFX1064-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1064-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX1064-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-NEXT:    global_load_dword v0, v[41:42], off
; GFX1064-NEXT:    s_mov_b64 s[4:5], 0
; GFX1064-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1064-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1064-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_mov_b32_e32 v3, v0
; GFX1064-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1064-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1064-NEXT:    global_atomic_cmpswap v0, v[41:42], v[2:3], off glc
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX1064-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX1064-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX1064-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1064-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX1064-NEXT:    s_clause 0x1
; GFX1064-NEXT:    buffer_load_dword v42, off, s[0:3], s33
; GFX1064-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4
; GFX1064-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1064-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1064-NEXT:    v_readlane_b32 s4, v40, 2
; GFX1064-NEXT:    s_or_saveexec_b64 s[6:7], -1
; GFX1064-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX1064-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1064-NEXT:    s_mov_b64 exec, s[6:7]
; GFX1064-NEXT:    s_addk_i32 s32, 0xfc00
; GFX1064-NEXT:    s_mov_b32 s33, s4
; GFX1064-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1032-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1032:       ; %bb.0:
; GFX1032-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1032-NEXT:    s_mov_b32 s16, s33
; GFX1032-NEXT:    s_mov_b32 s33, s32
; GFX1032-NEXT:    s_or_saveexec_b32 s17, -1
; GFX1032-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX1032-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1032-NEXT:    s_mov_b32 exec_lo, s17
; GFX1032-NEXT:    s_addk_i32 s32, 0x200
; GFX1032-NEXT:    v_writelane_b32 v40, s16, 2
; GFX1032-NEXT:    s_getpc_b64 s[16:17]
; GFX1032-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX1032-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX1032-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX1032-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX1032-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX1032-NEXT:    v_mov_b32_e32 v41, v0
; GFX1032-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1032-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1032-NEXT:    v_mov_b32_e32 v42, v1
; GFX1032-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1032-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX1032-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-NEXT:    global_load_dword v0, v[41:42], off
; GFX1032-NEXT:    s_mov_b32 s4, 0
; GFX1032-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1032-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1032-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_mov_b32_e32 v3, v0
; GFX1032-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1032-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1032-NEXT:    global_atomic_cmpswap v0, v[41:42], v[2:3], off glc
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v3
; GFX1032-NEXT:    s_or_b32 s4, vcc_lo, s4
; GFX1032-NEXT:    s_andn2_b32 exec_lo, exec_lo, s4
; GFX1032-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1032-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX1032-NEXT:    s_clause 0x1
; GFX1032-NEXT:    buffer_load_dword v42, off, s[0:3], s33
; GFX1032-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4
; GFX1032-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1032-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1032-NEXT:    v_readlane_b32 s4, v40, 2
; GFX1032-NEXT:    s_or_saveexec_b32 s5, -1
; GFX1032-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX1032-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1032-NEXT:    s_mov_b32 exec_lo, s5
; GFX1032-NEXT:    s_addk_i32 s32, 0xfe00
; GFX1032-NEXT:    s_mov_b32 s33, s4
; GFX1032-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1164-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1164:       ; %bb.0:
; GFX1164-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1164-NEXT:    s_mov_b32 s0, s33
; GFX1164-NEXT:    s_mov_b32 s33, s32
; GFX1164-NEXT:    s_or_saveexec_b64 s[2:3], -1
; GFX1164-NEXT:    scratch_store_b32 off, v40, s33 offset:8 ; 4-byte Folded Spill
; GFX1164-NEXT:    s_mov_b64 exec, s[2:3]
; GFX1164-NEXT:    s_add_i32 s32, s32, 16
; GFX1164-NEXT:    v_writelane_b32 v40, s0, 2
; GFX1164-NEXT:    s_getpc_b64 s[0:1]
; GFX1164-NEXT:    s_add_u32 s0, s0, foo@gotpcrel32@lo+4
; GFX1164-NEXT:    s_addc_u32 s1, s1, foo@gotpcrel32@hi+12
; GFX1164-NEXT:    s_clause 0x1
; GFX1164-NEXT:    scratch_store_b32 off, v41, s33 offset:4
; GFX1164-NEXT:    scratch_store_b32 off, v42, s33
; GFX1164-NEXT:    s_load_b64 s[0:1], s[0:1], 0x0
; GFX1164-NEXT:    v_mov_b32_e32 v41, v0
; GFX1164-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1164-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1164-NEXT:    v_mov_b32_e32 v42, v1
; GFX1164-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1164-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; GFX1164-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-NEXT:    global_load_b32 v0, v[41:42], off
; GFX1164-NEXT:    s_mov_b64 s[0:1], 0
; GFX1164-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1164-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1164-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_mov_b32_e32 v3, v0
; GFX1164-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1164-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1164-NEXT:    global_atomic_cmpswap_b32 v0, v[41:42], v[2:3], off glc
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX1164-NEXT:    s_or_b64 s[0:1], vcc, s[0:1]
; GFX1164-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-NEXT:    s_and_not1_b64 exec, exec, s[0:1]
; GFX1164-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1164-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX1164-NEXT:    s_clause 0x1
; GFX1164-NEXT:    scratch_load_b32 v42, off, s33
; GFX1164-NEXT:    scratch_load_b32 v41, off, s33 offset:4
; GFX1164-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1164-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1164-NEXT:    v_readlane_b32 s0, v40, 2
; GFX1164-NEXT:    s_or_saveexec_b64 s[2:3], -1
; GFX1164-NEXT:    scratch_load_b32 v40, off, s33 offset:8 ; 4-byte Folded Reload
; GFX1164-NEXT:    s_mov_b64 exec, s[2:3]
; GFX1164-NEXT:    s_add_i32 s32, s32, -16
; GFX1164-NEXT:    s_mov_b32 s33, s0
; GFX1164-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1132-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1132:       ; %bb.0:
; GFX1132-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1132-NEXT:    s_mov_b32 s0, s33
; GFX1132-NEXT:    s_mov_b32 s33, s32
; GFX1132-NEXT:    s_or_saveexec_b32 s1, -1
; GFX1132-NEXT:    scratch_store_b32 off, v40, s33 offset:8 ; 4-byte Folded Spill
; GFX1132-NEXT:    s_mov_b32 exec_lo, s1
; GFX1132-NEXT:    s_add_i32 s32, s32, 16
; GFX1132-NEXT:    v_writelane_b32 v40, s0, 2
; GFX1132-NEXT:    s_getpc_b64 s[0:1]
; GFX1132-NEXT:    s_add_u32 s0, s0, foo@gotpcrel32@lo+4
; GFX1132-NEXT:    s_addc_u32 s1, s1, foo@gotpcrel32@hi+12
; GFX1132-NEXT:    s_clause 0x1
; GFX1132-NEXT:    scratch_store_b32 off, v41, s33 offset:4
; GFX1132-NEXT:    scratch_store_b32 off, v42, s33
; GFX1132-NEXT:    s_load_b64 s[0:1], s[0:1], 0x0
; GFX1132-NEXT:    v_dual_mov_b32 v41, v0 :: v_dual_mov_b32 v42, v1
; GFX1132-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1132-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1132-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1132-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_2)
; GFX1132-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-NEXT:    global_load_b32 v0, v[41:42], off
; GFX1132-NEXT:    s_mov_b32 s0, 0
; GFX1132-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1132-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1132-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_mov_b32_e32 v3, v0
; GFX1132-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1132-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1132-NEXT:    global_atomic_cmpswap_b32 v0, v[41:42], v[2:3], off glc
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v3
; GFX1132-NEXT:    s_or_b32 s0, vcc_lo, s0
; GFX1132-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s0
; GFX1132-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1132-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX1132-NEXT:    s_clause 0x1
; GFX1132-NEXT:    scratch_load_b32 v42, off, s33
; GFX1132-NEXT:    scratch_load_b32 v41, off, s33 offset:4
; GFX1132-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1132-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1132-NEXT:    v_readlane_b32 s0, v40, 2
; GFX1132-NEXT:    s_or_saveexec_b32 s1, -1
; GFX1132-NEXT:    scratch_load_b32 v40, off, s33 offset:8 ; 4-byte Folded Reload
; GFX1132-NEXT:    s_mov_b32 exec_lo, s1
; GFX1132-NEXT:    s_add_i32 s32, s32, -16
; GFX1132-NEXT:    s_mov_b32 s33, s0
; GFX1132-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-DPP-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX9-DPP:       ; %bb.0:
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-DPP-NEXT:    s_mov_b32 s16, s33
; GFX9-DPP-NEXT:    s_mov_b32 s33, s32
; GFX9-DPP-NEXT:    s_or_saveexec_b64 s[18:19], -1
; GFX9-DPP-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX9-DPP-NEXT:    s_mov_b64 exec, s[18:19]
; GFX9-DPP-NEXT:    s_addk_i32 s32, 0x400
; GFX9-DPP-NEXT:    v_writelane_b32 v40, s16, 2
; GFX9-DPP-NEXT:    s_getpc_b64 s[16:17]
; GFX9-DPP-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX9-DPP-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX9-DPP-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX9-DPP-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX9-DPP-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX9-DPP-NEXT:    v_writelane_b32 v40, s30, 0
; GFX9-DPP-NEXT:    v_mov_b32_e32 v41, v0
; GFX9-DPP-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX9-DPP-NEXT:    v_writelane_b32 v40, s31, 1
; GFX9-DPP-NEXT:    v_mov_b32_e32 v42, v1
; GFX9-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-DPP-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX9-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX9-DPP-NEXT:    global_load_dword v0, v[41:42], off
; GFX9-DPP-NEXT:    s_mov_b64 s[4:5], 0
; GFX9-DPP-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX9-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX9-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_mov_b32_e32 v3, v0
; GFX9-DPP-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX9-DPP-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX9-DPP-NEXT:    global_atomic_cmpswap v0, v[41:42], v[2:3], off glc
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX9-DPP-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX9-DPP-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX9-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX9-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX9-DPP-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX9-DPP-NEXT:    buffer_load_dword v42, off, s[0:3], s33 ; 4-byte Folded Reload
; GFX9-DPP-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Reload
; GFX9-DPP-NEXT:    v_readlane_b32 s31, v40, 1
; GFX9-DPP-NEXT:    v_readlane_b32 s30, v40, 0
; GFX9-DPP-NEXT:    v_readlane_b32 s4, v40, 2
; GFX9-DPP-NEXT:    s_or_saveexec_b64 s[6:7], -1
; GFX9-DPP-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX9-DPP-NEXT:    s_mov_b64 exec, s[6:7]
; GFX9-DPP-NEXT:    s_addk_i32 s32, 0xfc00
; GFX9-DPP-NEXT:    s_mov_b32 s33, s4
; GFX9-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX9-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1064-DPP-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1064-DPP:       ; %bb.0:
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_mov_b32 s16, s33
; GFX1064-DPP-NEXT:    s_mov_b32 s33, s32
; GFX1064-DPP-NEXT:    s_or_saveexec_b64 s[18:19], -1
; GFX1064-DPP-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX1064-DPP-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1064-DPP-NEXT:    s_mov_b64 exec, s[18:19]
; GFX1064-DPP-NEXT:    s_addk_i32 s32, 0x400
; GFX1064-DPP-NEXT:    v_writelane_b32 v40, s16, 2
; GFX1064-DPP-NEXT:    s_getpc_b64 s[16:17]
; GFX1064-DPP-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX1064-DPP-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX1064-DPP-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX1064-DPP-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX1064-DPP-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v41, v0
; GFX1064-DPP-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1064-DPP-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v42, v1
; GFX1064-DPP-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1064-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1064-DPP-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1064-DPP-NEXT:    global_load_dword v0, v[41:42], off
; GFX1064-DPP-NEXT:    s_mov_b64 s[4:5], 0
; GFX1064-DPP-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1064-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1064-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_mov_b32_e32 v3, v0
; GFX1064-DPP-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1064-DPP-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1064-DPP-NEXT:    global_atomic_cmpswap v0, v[41:42], v[2:3], off glc
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX1064-DPP-NEXT:    s_or_b64 s[4:5], vcc, s[4:5]
; GFX1064-DPP-NEXT:    s_andn2_b64 exec, exec, s[4:5]
; GFX1064-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1064-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1064-DPP-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX1064-DPP-NEXT:    s_clause 0x1
; GFX1064-DPP-NEXT:    buffer_load_dword v42, off, s[0:3], s33
; GFX1064-DPP-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4
; GFX1064-DPP-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1064-DPP-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1064-DPP-NEXT:    v_readlane_b32 s4, v40, 2
; GFX1064-DPP-NEXT:    s_or_saveexec_b64 s[6:7], -1
; GFX1064-DPP-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX1064-DPP-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1064-DPP-NEXT:    s_mov_b64 exec, s[6:7]
; GFX1064-DPP-NEXT:    s_addk_i32 s32, 0xfc00
; GFX1064-DPP-NEXT:    s_mov_b32 s33, s4
; GFX1064-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1064-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1032-DPP-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1032-DPP:       ; %bb.0:
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_mov_b32 s16, s33
; GFX1032-DPP-NEXT:    s_mov_b32 s33, s32
; GFX1032-DPP-NEXT:    s_or_saveexec_b32 s17, -1
; GFX1032-DPP-NEXT:    buffer_store_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Spill
; GFX1032-DPP-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1032-DPP-NEXT:    s_mov_b32 exec_lo, s17
; GFX1032-DPP-NEXT:    s_addk_i32 s32, 0x200
; GFX1032-DPP-NEXT:    v_writelane_b32 v40, s16, 2
; GFX1032-DPP-NEXT:    s_getpc_b64 s[16:17]
; GFX1032-DPP-NEXT:    s_add_u32 s16, s16, foo@gotpcrel32@lo+4
; GFX1032-DPP-NEXT:    s_addc_u32 s17, s17, foo@gotpcrel32@hi+12
; GFX1032-DPP-NEXT:    buffer_store_dword v41, off, s[0:3], s33 offset:4 ; 4-byte Folded Spill
; GFX1032-DPP-NEXT:    buffer_store_dword v42, off, s[0:3], s33 ; 4-byte Folded Spill
; GFX1032-DPP-NEXT:    s_load_dwordx2 s[16:17], s[16:17], 0x0
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v41, v0
; GFX1032-DPP-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1032-DPP-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v42, v1
; GFX1032-DPP-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1032-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1032-DPP-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1032-DPP-NEXT:    global_load_dword v0, v[41:42], off
; GFX1032-DPP-NEXT:    s_mov_b32 s4, 0
; GFX1032-DPP-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1032-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1032-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_mov_b32_e32 v3, v0
; GFX1032-DPP-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1032-DPP-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1032-DPP-NEXT:    global_atomic_cmpswap v0, v[41:42], v[2:3], off glc
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v3
; GFX1032-DPP-NEXT:    s_or_b32 s4, vcc_lo, s4
; GFX1032-DPP-NEXT:    s_andn2_b32 exec_lo, exec_lo, s4
; GFX1032-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1032-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1032-DPP-NEXT:    s_or_b32 exec_lo, exec_lo, s4
; GFX1032-DPP-NEXT:    s_clause 0x1
; GFX1032-DPP-NEXT:    buffer_load_dword v42, off, s[0:3], s33
; GFX1032-DPP-NEXT:    buffer_load_dword v41, off, s[0:3], s33 offset:4
; GFX1032-DPP-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1032-DPP-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1032-DPP-NEXT:    v_readlane_b32 s4, v40, 2
; GFX1032-DPP-NEXT:    s_or_saveexec_b32 s5, -1
; GFX1032-DPP-NEXT:    buffer_load_dword v40, off, s[0:3], s33 offset:8 ; 4-byte Folded Reload
; GFX1032-DPP-NEXT:    s_waitcnt_depctr 0xffe3
; GFX1032-DPP-NEXT:    s_mov_b32 exec_lo, s5
; GFX1032-DPP-NEXT:    s_addk_i32 s32, 0xfe00
; GFX1032-DPP-NEXT:    s_mov_b32 s33, s4
; GFX1032-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1032-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1164-DPP-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1164-DPP:       ; %bb.0:
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_mov_b32 s0, s33
; GFX1164-DPP-NEXT:    s_mov_b32 s33, s32
; GFX1164-DPP-NEXT:    s_or_saveexec_b64 s[2:3], -1
; GFX1164-DPP-NEXT:    scratch_store_b32 off, v40, s33 offset:8 ; 4-byte Folded Spill
; GFX1164-DPP-NEXT:    s_mov_b64 exec, s[2:3]
; GFX1164-DPP-NEXT:    s_add_i32 s32, s32, 16
; GFX1164-DPP-NEXT:    v_writelane_b32 v40, s0, 2
; GFX1164-DPP-NEXT:    s_getpc_b64 s[0:1]
; GFX1164-DPP-NEXT:    s_add_u32 s0, s0, foo@gotpcrel32@lo+4
; GFX1164-DPP-NEXT:    s_addc_u32 s1, s1, foo@gotpcrel32@hi+12
; GFX1164-DPP-NEXT:    s_clause 0x1
; GFX1164-DPP-NEXT:    scratch_store_b32 off, v41, s33 offset:4
; GFX1164-DPP-NEXT:    scratch_store_b32 off, v42, s33
; GFX1164-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x0
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v41, v0
; GFX1164-DPP-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1164-DPP-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v42, v1
; GFX1164-DPP-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1164-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1164-DPP-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1164-DPP-NEXT:    global_load_b32 v0, v[41:42], off
; GFX1164-DPP-NEXT:    s_mov_b64 s[0:1], 0
; GFX1164-DPP-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1164-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1164-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_mov_b32_e32 v3, v0
; GFX1164-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1164-DPP-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1164-DPP-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1164-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v[41:42], v[2:3], off glc
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    v_cmp_eq_u32_e32 vcc, v0, v3
; GFX1164-DPP-NEXT:    s_or_b64 s[0:1], vcc, s[0:1]
; GFX1164-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1164-DPP-NEXT:    s_and_not1_b64 exec, exec, s[0:1]
; GFX1164-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1164-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1164-DPP-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX1164-DPP-NEXT:    s_clause 0x1
; GFX1164-DPP-NEXT:    scratch_load_b32 v42, off, s33
; GFX1164-DPP-NEXT:    scratch_load_b32 v41, off, s33 offset:4
; GFX1164-DPP-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1164-DPP-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1164-DPP-NEXT:    v_readlane_b32 s0, v40, 2
; GFX1164-DPP-NEXT:    s_or_saveexec_b64 s[2:3], -1
; GFX1164-DPP-NEXT:    scratch_load_b32 v40, off, s33 offset:8 ; 4-byte Folded Reload
; GFX1164-DPP-NEXT:    s_mov_b64 exec, s[2:3]
; GFX1164-DPP-NEXT:    s_add_i32 s32, s32, -16
; GFX1164-DPP-NEXT:    s_mov_b32 s33, s0
; GFX1164-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1164-DPP-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1132-DPP-LABEL: global_atomic_fmax_div_value_scope_agent_attr0:
; GFX1132-DPP:       ; %bb.0:
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_mov_b32 s0, s33
; GFX1132-DPP-NEXT:    s_mov_b32 s33, s32
; GFX1132-DPP-NEXT:    s_or_saveexec_b32 s1, -1
; GFX1132-DPP-NEXT:    scratch_store_b32 off, v40, s33 offset:8 ; 4-byte Folded Spill
; GFX1132-DPP-NEXT:    s_mov_b32 exec_lo, s1
; GFX1132-DPP-NEXT:    s_add_i32 s32, s32, 16
; GFX1132-DPP-NEXT:    v_writelane_b32 v40, s0, 2
; GFX1132-DPP-NEXT:    s_getpc_b64 s[0:1]
; GFX1132-DPP-NEXT:    s_add_u32 s0, s0, foo@gotpcrel32@lo+4
; GFX1132-DPP-NEXT:    s_addc_u32 s1, s1, foo@gotpcrel32@hi+12
; GFX1132-DPP-NEXT:    s_clause 0x1
; GFX1132-DPP-NEXT:    scratch_store_b32 off, v41, s33 offset:4
; GFX1132-DPP-NEXT:    scratch_store_b32 off, v42, s33
; GFX1132-DPP-NEXT:    s_load_b64 s[0:1], s[0:1], 0x0
; GFX1132-DPP-NEXT:    v_dual_mov_b32 v41, v0 :: v_dual_mov_b32 v42, v1
; GFX1132-DPP-NEXT:    v_writelane_b32 v40, s30, 0
; GFX1132-DPP-NEXT:    v_and_b32_e32 v0, 0x3ff, v31
; GFX1132-DPP-NEXT:    v_writelane_b32 v40, s31, 1
; GFX1132-DPP-NEXT:    s_waitcnt lgkmcnt(0)
; GFX1132-DPP-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_2)
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v1, v0
; GFX1132-DPP-NEXT:    global_load_b32 v0, v[41:42], off
; GFX1132-DPP-NEXT:    s_mov_b32 s0, 0
; GFX1132-DPP-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX1132-DPP-NEXT:  .LBB1_1: ; %atomicrmw.start
; GFX1132-DPP-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_mov_b32_e32 v3, v0
; GFX1132-DPP-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX1132-DPP-NEXT:    v_max_f32_e32 v0, v3, v3
; GFX1132-DPP-NEXT:    v_max_f32_e32 v2, v0, v1
; GFX1132-DPP-NEXT:    global_atomic_cmpswap_b32 v0, v[41:42], v[2:3], off glc
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    v_cmp_eq_u32_e32 vcc_lo, v0, v3
; GFX1132-DPP-NEXT:    s_or_b32 s0, vcc_lo, s0
; GFX1132-DPP-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX1132-DPP-NEXT:    s_and_not1_b32 exec_lo, exec_lo, s0
; GFX1132-DPP-NEXT:    s_cbranch_execnz .LBB1_1
; GFX1132-DPP-NEXT:  ; %bb.2: ; %atomicrmw.end
; GFX1132-DPP-NEXT:    s_or_b32 exec_lo, exec_lo, s0
; GFX1132-DPP-NEXT:    s_clause 0x1
; GFX1132-DPP-NEXT:    scratch_load_b32 v42, off, s33
; GFX1132-DPP-NEXT:    scratch_load_b32 v41, off, s33 offset:4
; GFX1132-DPP-NEXT:    v_readlane_b32 s31, v40, 1
; GFX1132-DPP-NEXT:    v_readlane_b32 s30, v40, 0
; GFX1132-DPP-NEXT:    v_readlane_b32 s0, v40, 2
; GFX1132-DPP-NEXT:    s_or_saveexec_b32 s1, -1
; GFX1132-DPP-NEXT:    scratch_load_b32 v40, off, s33 offset:8 ; 4-byte Folded Reload
; GFX1132-DPP-NEXT:    s_mov_b32 exec_lo, s1
; GFX1132-DPP-NEXT:    s_add_i32 s32, s32, -16
; GFX1132-DPP-NEXT:    s_mov_b32 s33, s0
; GFX1132-DPP-NEXT:    s_waitcnt vmcnt(0)
; GFX1132-DPP-NEXT:    s_setpc_b64 s[30:31]
  %id.x = call i32 @llvm.amdgcn.workitem.id.x()
  %divValue = call float @foo(i32 %id.x)
  %result = atomicrmw fmax ptr addrspace(1) %ptr, float %divValue syncscope("agent") monotonic, align 4
  ret float %result
}

attributes #0 = { "denormal-fp-math-f32"="preserve-sign,preserve-sign" "amdgpu-unsafe-fp-atomics"="true" }

