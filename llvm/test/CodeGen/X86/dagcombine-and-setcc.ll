; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.10.0"

; Function Attrs: nounwind
declare i32 @printf(ptr nocapture readonly, ...)

; On X86 1 is true and 0 is false, so we can't perform the combine:
; (and (setgt X,  true), (setgt Y,  true)) -> (setgt (or X, Y), true)
; This combine only works if the true value is -1.


@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
; Function Attrs: optsize ssp uwtable
define i32 @foo(i32 %a, i32 %b, ptr %c) {
; CHECK-LABEL: foo:
; CHECK:       ## %bb.0: ## %if.else429
; CHECK-NEXT:    testq %rdx, %rdx
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    cmpl $2, %edi
; CHECK-NEXT:    setl %cl
; CHECK-NEXT:    cmpl $2, %esi
; CHECK-NEXT:    setl %dl
; CHECK-NEXT:    orb %cl, %dl
; CHECK-NEXT:    testb %dl, %al
; CHECK-NEXT:    jne LBB0_2
; CHECK-NEXT:  ## %bb.1: ## %ret1
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    retq
; CHECK-NEXT:  LBB0_2: ## %ret2
; CHECK-NEXT:    movl $1, %eax
; CHECK-NEXT:    retq
if.else429:
  %cmp.i1144 = icmp eq ptr %c, null
  %cmp430 = icmp slt i32 %a, 2
  %cmp432 = icmp slt i32 %b, 2
  %or.cond710 = or i1 %cmp430, %cmp432
  %or.cond710.not = xor i1 %or.cond710, true
  %brmerge1448 = or i1 %cmp.i1144, %or.cond710.not
  br i1 %brmerge1448, label %ret1, label %ret2

ret1:
  ret i32 0

ret2:
  ret i32 1
}

define i32 @main(i32 %argc, ptr nocapture readnone %argv) {
; CHECK-LABEL: main:
; CHECK:       ## %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    leaq {{[0-9]+}}(%rsp), %rdx
; CHECK-NEXT:    movl $1, %edi
; CHECK-NEXT:    movl $2, %esi
; CHECK-NEXT:    callq _foo
; CHECK-NEXT:    leaq L_.str(%rip), %rdi
; CHECK-NEXT:    movl %eax, %esi
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq _printf
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    retq
  %res = alloca i32, align 4
  %t = call i32 @foo(i32 1, i32 2, ptr %res) #3
  %v = call i32 (ptr, ...) @printf(ptr @.str, i32 %t)
  ret i32 0
}



