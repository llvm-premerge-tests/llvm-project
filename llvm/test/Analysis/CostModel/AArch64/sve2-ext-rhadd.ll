; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes="print<cost-model>" 2>&1 -disable-output -mtriple aarch64-linux-gnu -mattr=+sve2 < %s | FileCheck %s

; SRHADD

define i8 @srhadd_i8_sext_i16(i8 %a, i8 %b, ptr %dst) {
; CHECK-LABEL: 'srhadd_i8_sext_i16'
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %sext1 = sext i8 %a to i16
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %sext2 = sext i8 %b to i16
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add1 = add i16 %sext1, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add2 = add i16 %add1, %sext2
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %lsr = lshr i16 %add2, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %trunc = trunc i16 %lsr to i8
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i8 %trunc
;
  %sext1 = sext i8 %a to i16
  %sext2 = sext i8 %b to i16
  %add1 = add i16 %sext1, 1
  %add2 = add i16 %add1, %sext2
  %lsr = lshr i16 %add2, 1
  %trunc = trunc i16 %lsr to i8
  ret i8 %trunc
}

define i16 @srhadd_i16_sext_i32(i16 %a, i16 %b, ptr %dst) {
; CHECK-LABEL: 'srhadd_i16_sext_i32'
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %sext1 = sext i16 %a to i32
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %sext2 = sext i16 %b to i32
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add1 = add nuw nsw i32 %sext1, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add2 = add nuw nsw i32 %add1, %sext2
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %lsr = lshr i32 %add2, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %trunc = trunc i32 %lsr to i16
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i16 %trunc
;
  %sext1 = sext i16 %a to i32
  %sext2 = sext i16 %b to i32
  %add1 = add nuw nsw i32 %sext1, 1
  %add2 = add nuw nsw i32 %add1, %sext2
  %lsr = lshr i32 %add2, 1
  %trunc = trunc i32 %lsr to i16
  ret i16 %trunc
}

; URHADD

define i8 @urhadd_i8_zext_i16(i8 %a, i8 %b, ptr %dst) {
; CHECK-LABEL: 'urhadd_i8_zext_i16'
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %zext1 = zext i8 %a to i16
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %zext2 = zext i8 %b to i16
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add1 = add i16 %zext1, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add2 = add i16 %add1, %zext2
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %lsr = lshr i16 %add2, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %trunc = trunc i16 %lsr to i8
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i8 %trunc
;
  %zext1 = zext i8 %a to i16
  %zext2 = zext i8 %b to i16
  %add1 = add i16 %zext1, 1
  %add2 = add i16 %add1, %zext2
  %lsr = lshr i16 %add2, 1
  %trunc = trunc i16 %lsr to i8
  ret i8 %trunc
}

define i16 @urhadd_i16_zext_i32(i16 %a, i16 %b, ptr %dst) {
; CHECK-LABEL: 'urhadd_i16_zext_i32'
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %zext1 = zext i16 %a to i32
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %zext2 = zext i16 %b to i32
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add1 = add nuw nsw i32 %zext1, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %add2 = add nuw nsw i32 %add1, %zext2
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %lsr = lshr i32 %add2, 1
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %trunc = trunc i32 %lsr to i16
; CHECK-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i16 %trunc
;
  %zext1 = zext i16 %a to i32
  %zext2 = zext i16 %b to i32
  %add1 = add nuw nsw i32 %zext1, 1
  %add2 = add nuw nsw i32 %add1, %zext2
  %lsr = lshr i32 %add2, 1
  %trunc = trunc i32 %lsr to i16
  ret i16 %trunc
}
