#!/usr/bin/env python3
#
#===- git-check-coverage - CheckCoverage Git Integration ---------*- python -*--===#
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===------------------------------------------------------------------------===#

r"""
code-coverage git integration
============================

This file provides a code-coverage integration for git. Put it somewhere in your
path and ensure that it is executable. Then, code coverage information will be
emit for a specific commit.

For further details, run:
git code-coverage -h

Requires Python 2.7 or Python 3
"""

import os
import subprocess

def create_new_temp_branch(repo_path, temp_branch_name):
    i = 1
    while True:
        new_temp_branch_name = f"{temp_branch_name}-{i}"
        try:
            subprocess.check_call(['git', '-C', repo_path, 'rev-parse', '--verify', new_temp_branch_name])
            i += 1
        except subprocess.CalledProcessError:
            return new_temp_branch_name

def remove_last_commit(temp_branch_name):
    try:
        # Get the current working directory as the repo path
        repo_path = os.getcwd()

        # Create a new temporary branch to store the removed commit
        new_temp_branch_name = create_new_temp_branch(repo_path, temp_branch_name)
        subprocess.check_call(['git', '-C', repo_path, 'checkout', '-b', new_temp_branch_name])

        # Check if the current branch has more than one commit
        commit_count = int(subprocess.check_output(['git', '-C', repo_path, 'rev-list', '--count', 'HEAD']).strip())
        if commit_count > 1:
            # Reset the branch to remove the last commit
            subprocess.check_call(['git', '-C', repo_path, 'reset', '--hard', 'HEAD~1'])
            print("Last commit removed and saved to '{}' branch.".format(new_temp_branch_name))
        else:
            print("The branch '{}' has only one commit. No commits removed.".format(temp_branch_name))

    except subprocess.CalledProcessError as e:
        print("Error:", e)

def build_llvm(build_dir, llvm_source_dir):
    try:
        # Change to the build directory
        os.chdir(build_dir)



        # Run the cmake command to configure LLVM build
        cmake_command = [
            'cmake',
            '-G', 'Ninja',
            llvm_source_dir,
            '-DCMAKE_BUILD_TYPE=Release',

            '-DLLVM_USE_LINKER=lld',
            '-DCMAKE_C_COMPILER=/usr/bin/clang',
            '-DCMAKE_CXX_COMPILER=/usr/bin/clang++',
            '-DLLVM_TARGETS_TO_BUILD=X86',
            '-DLLVM_BUILD_INSTRUMENTED_COVERAGE=ON',
            '-DLLVM_ENABLE_ASSERTIONS=ON',
            '-DLLVM_INDIVIDUAL_TEST_COVERAGE=ON',
        ]
        subprocess.check_call(cmake_command)

        # Run the ninja build command
        subprocess.check_call(['ninja'])

        # Run the ninja check command
        subprocess.check_call(['ninja', 'check-llvm'])

        print("LLVM build completed successfully.")

    except subprocess.CalledProcessError as e:
        print("Error during LLVM build:", e)


if __name__ == "__main__":
    temp_branch_name = "main"  # Change this to your base temporary branch name

    remove_last_commit(temp_branch_name)

    # Example usage:
    llvm_source_dir = '../llvm'  # Path to LLVM source directory
    build_dir = 'build'  # Path to LLVM build directory

    build_llvm(build_dir, llvm_source_dir)

