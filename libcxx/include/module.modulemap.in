// Main C++ standard library interfaces
module std_algorithm [system] {
  header "algorithm"
  export *
}
module std_any [system] {
  header "any"
  export *
}
module std_array [system] {
  header "array"
  export *
}
module std_atomic [system] {
  header "atomic"
  export *
}
module std_barrier [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  header "barrier"
  export *
}
module std_bit [system] {
  header "bit"
  export *
}
module std_bitset [system] {
  header "bitset"
  export *
}
module std_charconv [system] {
  header "charconv"
  export *
}
module std_chrono [system] {
  header "chrono"
  export *
}
module std_codecvt [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "codecvt"
  export *
}
module std_compare [system] {
  header "compare"
  export *
}
module std_complex [system] {
  header "complex"
  export *
}
module std_concepts [system] {
  header "concepts"
  export *
}
module std_condition_variable [system] {
  header "condition_variable"
  export *
}
module std_coroutine [system] {
  header "coroutine"
  export *
}
module std_deque [system] {
  header "deque"
  export *
}
module std_exception [system] {
  header "exception"
  export *
}
module std_execution [system] {
  header "execution"
  export *
}
module std_expected [system] {
  header "expected"
  export *
}
module std_filesystem [system] {
  @requires_LIBCXX_ENABLE_FILESYSTEM@
  header "filesystem"
  export *
}
module std_format [system] {
  header "format"
  export *
}
module std_forward_list [system] {
  header "forward_list"
  export *
}
module std_fstream [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  @requires_LIBCXX_ENABLE_FILESYSTEM@
  header "fstream"
  export *
}
module std_functional [system] {
  header "functional"
  export *
}
module std_future [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  header "future"
  export *
}
module std_initializer_list [system] {
  header "initializer_list"
  export *
}
module std_iomanip [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "iomanip"
  export *
}
module std_ios [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "ios"
  export *
}
module std_iosfwd [system] {
  header "iosfwd"
  export *
}
module std_iostream [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "iostream"
  export *
}
module std_istream [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "istream"
  export *
}
module std_iterator [system] {
  header "iterator"
  export *
}
module std_latch [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  header "latch"
  export *
}
module std_limits [system] {
  header "limits"
  export *
}
module std_list [system] {
  header "list"
  export *
}
module std_locale [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "locale"
  export *
}
module std_map [system] {
  header "map"
  export *
}
module std_mdspan [system] {
  header "mdspan"
  export *
}
module std_memory [system] {
  header "memory"
  export *
}
module std_memory_resource [system] {
  header "memory_resource"
  export *
}
module std_mutex [system] {
  header "mutex"
  export *
}
module std_new [system] {
  header "new"
  export *
}
module std_numbers [system] {
  header "numbers"
  export *
}
module std_numeric [system] {
  header "numeric"
  export *
}
module std_optional [system] {
  header "optional"
  export *
}
module std_ostream [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "ostream"
  export *
}
module std_print [system] {
  header "print"
  export *
}
module std_queue [system] {
  header "queue"
  export *
}
module std_random [system] {
  header "random"
  export *
}
module std_ranges [system] {
  header "ranges"
  export *
}
module std_ratio [system] {
  header "ratio"
  export *
}
module std_regex [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "regex"
  export *
}
module std_scoped_allocator [system] {
  header "scoped_allocator"
  export *
}
module std_semaphore [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  header "semaphore"
  export *
}
module std_set [system] {
  header "set"
  export *
}
module std_shared_mutex [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  header "shared_mutex"
  export std_version
}
module std_source_location [system] {
  header "source_location"
  export *
}
module std_span [system] {
  header "span"
  export "__ranges/enable_borrowed_range.h"
  export std_version
  export "__fwd/span.h"
}
module std_sstream [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "sstream"
  export *
}
module std_stack [system] {
  header "stack"
  export *
}
module std_stdexcept [system] {
  header "stdexcept"
  export *
}
module std_stop_token {
  @requires_LIBCXX_ENABLE_THREADS@
  header "stop_token"
  export *
}
module std_streambuf [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "streambuf"
  export *
}
module std_string [system] {
  header "string"
  export *
}
module std_string_view [system] {
  header "string_view"
  export *
}
module std_strstream [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "strstream"
  export *
}
module std_system_error [system] {
  header "system_error"
  export *
}
module std_thread [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  header "thread"
  export *
}
module std_tuple [system] {
  header "tuple"
  export *
}
module std_type_traits [system] {
  header "type_traits"
  export *
}
module std_typeindex [system] {
  header "typeindex"
  export *
}
module std_typeinfo [system] {
  header "typeinfo"
  export *
}
module std_unordered_map [system] {
  header "unordered_map"
  export *
}
module std_unordered_set [system] {
  header "unordered_set"
  export *
}
module std_utility [system] {
  header "utility"
  export *
}
module std_valarray [system] {
  header "valarray"
  export *
}
module std_variant [system] {
  header "variant"
  export *
}
module std_vector [system] {
  header "vector"
  export *
}
module std_version [system] {
  header "version"
  export *
}

// C standard library interface wrappers
module std_cassert [system] {
  // <cassert>'s use of NDEBUG requires textual inclusion.
  textual header "cassert"
}
module std_ccomplex [system] {
  header "ccomplex"
  export *
}
module std_cctype [system] {
  header "cctype"
  export *
}
module std_cerrno [system] {
  header "cerrno"
  export *
}
module std_cfenv [system] {
  header "cfenv"
  export *
}
module std_cfloat [system] {
  header "cfloat"
  export *
}
module std_cinttypes [system] {
  header "cinttypes"
  export *
}
module std_ciso646 [system] {
  header "ciso646"
  export *
}
module std_climits [system] {
  header "climits"
  export *
}
module std_clocale [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "clocale"
  export *
}
module std_cmath [system] {
  header "cmath"
  export *
}
module std_csetjmp [system] {
  header "csetjmp"
  export *
}
module std_csignal [system] {
  header "csignal"
  export *
}
// FIXME: <cstdalign> is missing.
module std_cstdarg [system] {
  header "cstdarg"
  export *
}
module std_cstdbool [system] {
  header "cstdbool"
  export *
}
module std_cstddef [system] {
  header "cstddef"
  export *
}
module std_cstdint [system] {
  header "cstdint"
  export *
}
module std_cstdio [system] {
  header "cstdio"
  export *
}
module std_cstdlib [system] {
  header "cstdlib"
  export *
}
module std_cstring [system] {
  header "cstring"
  export *
}
module std_ctgmath [system] {
  header "ctgmath"
  export *
}
module std_ctime [system] {
  header "ctime"
  export *
}
module std_cuchar [system] {
  header "cuchar"
  export *
}
module std_cwchar [system] {
  @requires_LIBCXX_ENABLE_WIDE_CHARACTERS@
  header "cwchar"
  export *
}
module std_cwctype [system] {
  @requires_LIBCXX_ENABLE_WIDE_CHARACTERS@
  header "cwctype"
  export *
}

// C standard library interfaces augmented/replaced in C++
// <assert.h> provided by C library.
module std_complex_h [system] {
  header "complex.h"
  export *
}
module std_ctype_h [system] {
  header "ctype.h"
  export *
}
module std_errno_h [system] {
  header "errno.h"
  export *
}
module std_fenv_h [system] {
  header "fenv.h"
  export *
}
module std_float_h [system] {
  header "float.h"
  export *
}
module std_inttypes_h [system] {
  header "inttypes.h"
  export *
}
// <iso646.h> provided by compiler.
module std_limits_h [system] {
  header "limits.h"
  export *
}
module std_locale_h [system] {
  @requires_LIBCXX_ENABLE_LOCALIZATION@
  header "locale.h"
  export *
}
module std_math_h [system] {
  header "math.h"
  export *
}
module std_setjmp_h [system] {
  header "setjmp.h"
  export *
}
// <signal.h> provided by C library.
// FIXME: <stdalign.h> is missing.
// <stdarg.h> provided by compiler.
module std_stdatomic_h [system] {
  @requires_LIBCXX_ENABLE_THREADS@
  requires cplusplus23
  header "stdatomic.h"
  export *
}
module std_stdbool_h [system] {
  // <stdbool.h>'s __bool_true_false_are_defined macro requires textual inclusion.
  textual header "stdbool.h"
  export *
}
module std_stddef_h [system] {
  // <stddef.h>'s __need_* macros require textual inclusion.
  textual header "stddef.h"
  export *
}
module std_stdint_h [system] {
  header "stdint.h"
  export *
}
module std_stdio_h [system] {
  // <stdio.h>'s __need_* macros require textual inclusion.
  textual header "stdio.h"
  export *
}
module std_stdlib_h [system] {
  // <stdlib.h>'s __need_* macros require textual inclusion.
  textual header "stdlib.h"
  export *
}
module std_string_h [system] {
  header "string.h"
  export *
}
module std_tgmath_h [system] {
  header "tgmath.h"
  export *
}
module std_uchar_h [system] {
  header "uchar.h"
  export *
}
// <time.h> provided by C library.
module std_wchar_h [system] {
  @requires_LIBCXX_ENABLE_WIDE_CHARACTERS@
  // <wchar.h>'s __need_* macros require textual inclusion.
  textual header "wchar.h"
  export *
}
module std_wctype_h [system] {
  @requires_LIBCXX_ENABLE_WIDE_CHARACTERS@
  header "wctype.h"
  export *
}

// Experimental C++ standard library interfaces
module std_experimental [system] {
  requires cplusplus11

  module deque {
    header "experimental/deque"
    export *
  }
  module forward_list {
    header "experimental/forward_list"
    export *
  }
  module iterator {
    header "experimental/iterator"
    export *
  }
  module list {
    header "experimental/list"
    export *
  }
  module map {
    header "experimental/map"
    export *
  }
  module memory_resource {
    header "experimental/memory_resource"
    export *
  }
  module propagate_const {
    header "experimental/propagate_const"
    export *
  }
  module regex {
    @requires_LIBCXX_ENABLE_LOCALIZATION@
    header "experimental/regex"
    export *
  }
  module simd {
    header "experimental/simd"
    export *
  }
  module set {
    header "experimental/set"
    export *
  }
  module string {
    header "experimental/string"
    export *
  }
  module type_traits {
    header "experimental/type_traits"
    export *
  }
  module unordered_map {
    header "experimental/unordered_map"
    export *
  }
  module unordered_set {
    header "experimental/unordered_set"
    export *
  }
  module utility {
    header "experimental/utility"
    export *
  }
  module vector {
    header "experimental/vector"
    export *
  }
  module __config {
    textual header "experimental/__config"
    export *
  }
  // FIXME these should be private
  module __memory {
    header "experimental/__memory"
    export *
  }
}

// Convenience method to get all of the above modules in a single import statement.
// Importing only the needed modules is likely to be more performant.
module std [system] {
  header "__std_clang_module"
  export *
}

// Implementation detail headers that are private to libc++. These modules
// must not be directly imported.
