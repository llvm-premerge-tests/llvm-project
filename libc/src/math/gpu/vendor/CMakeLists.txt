find_package(AMDDeviceLibs QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
if(AMDDeviceLibs_FOUND)
  message(STATUS "Found the ROCm device library. Implementations falling back "
                 "to the vendor libraries will be resolved statically.")
  get_target_property(ocml_path ocml IMPORTED_LOCATION)
  list(APPEND bitcode_link_flags
       "SHELL:-Xclang -mlink-builtin-bitcode -Xclang ${ocml_path}")
else()
  message(STATUS "Could not find the ROCm device library. Unimplemented "
                 "functions will be an external reference to the vendor libraries.")
endif()

find_package(CUDAToolkit QUIET)
if(CUDAToolkit_FOUND)
  set(libdevice_path ${CUDAToolkit_BIN_DIR}/../nvvm/libdevice/libdevice.10.bc)
  if (EXISTS ${libdevice_path})
    message(STATUS "Found the CUDA device library. Implementations falling back "
                   "to the vendor libraries will be resolved statically.")
    list(APPEND bitcode_link_flags
         "SHELL:-Xclang -mlink-builtin-bitcode -Xclang ${libdevice_path}")
  endif()
else()
  message(STATUS "Could not find the ROCm device library. Unimplemented "
                 "functions will be an external reference to the vendor libraries.")
endif()

# FIXME: We need a way to pass the library to only the NVTPX / AMDGPU build.
# This shouldn't cause issues because we only link in needed symbols, but it
# will link in identity metadata from both libraries. This silences the warning.
list(APPEND bitcode_link_flags "-Wno-linker-warnings")

function(add_math_entrypoint_gpu_vendor_object name)
  # If the user did not specify to use vendor implementations of the math
  # functions, we check if a built-in or a generic implementation exists. If 
  # the do not, we have to rely on the vendor version.
  if(NOT ${LIBC_GPU_VENDOR_MATH})
    get_filename_component(generic_file_path
      "${CMAKE_CURRENT_LIST_DIR}/../../generic/${name}.cpp" ABSOLUTE)
    get_filename_component(builtin_file_path
      "${CMAKE_CURRENT_LIST_DIR}/../${name}.cpp" ABSOLUTE)
    if ((EXISTS ${generic_file_path}) OR (EXISTS ${builtin_file_path}))
      return()
    endif()
  endif()

  add_entrypoint_object(
    ${name}
    SRCS
      ${name}.cpp
    HDRS
      ../../${name}.h
    COMPILE_OPTIONS
      ${bitcode_link_flags}
      -O2
  )
endfunction()

add_math_entrypoint_gpu_vendor_object(acos)
add_math_entrypoint_gpu_vendor_object(acosf)
add_math_entrypoint_gpu_vendor_object(acosh)
add_math_entrypoint_gpu_vendor_object(acoshf)
add_math_entrypoint_gpu_vendor_object(asin)
add_math_entrypoint_gpu_vendor_object(asinf)
add_math_entrypoint_gpu_vendor_object(asinh)
add_math_entrypoint_gpu_vendor_object(asinhf)
add_math_entrypoint_gpu_vendor_object(atan)
add_math_entrypoint_gpu_vendor_object(atanf)
add_math_entrypoint_gpu_vendor_object(atan2)
add_math_entrypoint_gpu_vendor_object(atan2f)
add_math_entrypoint_gpu_vendor_object(atanh)
add_math_entrypoint_gpu_vendor_object(atanhf)
add_math_entrypoint_gpu_vendor_object(ceil)
add_math_entrypoint_gpu_vendor_object(ceilf)
add_math_entrypoint_gpu_vendor_object(copysign)
add_math_entrypoint_gpu_vendor_object(copysignf)
add_math_entrypoint_gpu_vendor_object(cos)
add_math_entrypoint_gpu_vendor_object(cosf)
add_math_entrypoint_gpu_vendor_object(cosh)
add_math_entrypoint_gpu_vendor_object(coshf)
add_math_entrypoint_gpu_vendor_object(erf)
add_math_entrypoint_gpu_vendor_object(erff)
add_math_entrypoint_gpu_vendor_object(exp)
add_math_entrypoint_gpu_vendor_object(exp10)
add_math_entrypoint_gpu_vendor_object(exp10f)
add_math_entrypoint_gpu_vendor_object(exp2)
add_math_entrypoint_gpu_vendor_object(exp2f)
add_math_entrypoint_gpu_vendor_object(expf)
add_math_entrypoint_gpu_vendor_object(expm1)
add_math_entrypoint_gpu_vendor_object(expm1f)
add_math_entrypoint_gpu_vendor_object(fabs)
add_math_entrypoint_gpu_vendor_object(fabsf)
add_math_entrypoint_gpu_vendor_object(fdim)
add_math_entrypoint_gpu_vendor_object(fdimf)
add_math_entrypoint_gpu_vendor_object(fma)
add_math_entrypoint_gpu_vendor_object(fmaf)
add_math_entrypoint_gpu_vendor_object(fmax)
add_math_entrypoint_gpu_vendor_object(fmaxf)
add_math_entrypoint_gpu_vendor_object(fmin)
add_math_entrypoint_gpu_vendor_object(fminf)
add_math_entrypoint_gpu_vendor_object(fmod)
add_math_entrypoint_gpu_vendor_object(fmodf)
add_math_entrypoint_gpu_vendor_object(floor)
add_math_entrypoint_gpu_vendor_object(floorf)
add_math_entrypoint_gpu_vendor_object(frexp)
add_math_entrypoint_gpu_vendor_object(frexpf)
add_math_entrypoint_gpu_vendor_object(hypot)
add_math_entrypoint_gpu_vendor_object(hypotf)
add_math_entrypoint_gpu_vendor_object(ilogb)
add_math_entrypoint_gpu_vendor_object(ilogbf)
add_math_entrypoint_gpu_vendor_object(ldexp)
add_math_entrypoint_gpu_vendor_object(ldexpf)
add_math_entrypoint_gpu_vendor_object(llrint)
add_math_entrypoint_gpu_vendor_object(llrintf)
add_math_entrypoint_gpu_vendor_object(llround)
add_math_entrypoint_gpu_vendor_object(llroundf)
add_math_entrypoint_gpu_vendor_object(log10)
add_math_entrypoint_gpu_vendor_object(log10f)
add_math_entrypoint_gpu_vendor_object(log1p)
add_math_entrypoint_gpu_vendor_object(log1pf)
add_math_entrypoint_gpu_vendor_object(log2)
add_math_entrypoint_gpu_vendor_object(log2f)
add_math_entrypoint_gpu_vendor_object(logb)
add_math_entrypoint_gpu_vendor_object(logbf)
add_math_entrypoint_gpu_vendor_object(log)
add_math_entrypoint_gpu_vendor_object(logf)
add_math_entrypoint_gpu_vendor_object(lrint)
add_math_entrypoint_gpu_vendor_object(lrintf)
add_math_entrypoint_gpu_vendor_object(lround)
add_math_entrypoint_gpu_vendor_object(lroundf)
add_math_entrypoint_gpu_vendor_object(modf)
add_math_entrypoint_gpu_vendor_object(modff)
add_math_entrypoint_gpu_vendor_object(nearbyint)
add_math_entrypoint_gpu_vendor_object(nearbyintf)
add_math_entrypoint_gpu_vendor_object(nextafter)
add_math_entrypoint_gpu_vendor_object(nextafterf)
add_math_entrypoint_gpu_vendor_object(pow)
add_math_entrypoint_gpu_vendor_object(powf)
add_math_entrypoint_gpu_vendor_object(remainder)
add_math_entrypoint_gpu_vendor_object(remainderf)
add_math_entrypoint_gpu_vendor_object(remquo)
add_math_entrypoint_gpu_vendor_object(remquof)
add_math_entrypoint_gpu_vendor_object(rint)
add_math_entrypoint_gpu_vendor_object(rintf)
add_math_entrypoint_gpu_vendor_object(round)
add_math_entrypoint_gpu_vendor_object(roundf)
add_math_entrypoint_gpu_vendor_object(scalbn)
add_math_entrypoint_gpu_vendor_object(scalbnf)
add_math_entrypoint_gpu_vendor_object(sin)
add_math_entrypoint_gpu_vendor_object(sinf)
add_math_entrypoint_gpu_vendor_object(sinh)
add_math_entrypoint_gpu_vendor_object(sinhf)
add_math_entrypoint_gpu_vendor_object(sincos)
add_math_entrypoint_gpu_vendor_object(sincosf)
add_math_entrypoint_gpu_vendor_object(sqrt)
add_math_entrypoint_gpu_vendor_object(sqrtf)
add_math_entrypoint_gpu_vendor_object(tan)
add_math_entrypoint_gpu_vendor_object(tanf)
add_math_entrypoint_gpu_vendor_object(tanh)
add_math_entrypoint_gpu_vendor_object(tanhf)
add_math_entrypoint_gpu_vendor_object(tgammaf)
add_math_entrypoint_gpu_vendor_object(tgamma)
add_math_entrypoint_gpu_vendor_object(trunc)
add_math_entrypoint_gpu_vendor_object(truncf)
