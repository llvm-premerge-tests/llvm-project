// RUN: mlir-tblgen -gen-python-enum-bindings %s -I %S/../../include | FileCheck %s

include "mlir/IR/EnumAttr.td"

// CHECK: Autogenerated by mlir-tblgen; don't manually edit.

// CHECK: from enum import IntEnum, Enum
// CHECK: from ._ods_common import _cext as _ods_cext
// CHECK: from ..ir import register_attribute_builder
// CHECK: _ods_ir = _ods_cext.ir

def One : I32EnumAttrCase<"CaseOne", 1, "one">;
def Two : I32EnumAttrCase<"CaseTwo", 2, "two">;

def MyEnum : I32EnumAttr<"MyEnum", "An example 32-bit enum", [One, Two]>;
// CHECK-LABEL: class MyEnum(IntEnum):
// CHECK:     """An example 32-bit enum"""

// CHECK:     CASE_ONE = 1
// CHECK:     CASE_TWO = 2

def One64 : I64EnumAttrCase<"CaseOne64", 1, "one">;
def Two64 : I64EnumAttrCase<"CaseTwo64", 2, "two">;

def MyEnum64 : I64EnumAttr<"MyEnum64", "An example 64-bit enum", [One64, Two64]>;
// CHECK: @register_attribute_builder("MyEnum")
// CHECK: def _my_enum(x, context):
// CHECK:     return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

// CHECK-LABEL: class MyEnum64(IntEnum):
// CHECK:     """An example 64-bit enum"""

// CHECK:     CASE_ONE64 = 1
// CHECK:     CASE_TWO64 = 2

// CHECK: @register_attribute_builder("MyEnum64")
// CHECK: def _my_enum64(x, context):
// CHECK:     return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))
