// RUN: mlir-tblgen -gen-python-enum-bindings %s -I %S/../../include | FileCheck %s

include "mlir/IR/EnumAttr.td"

def Test_Dialect : Dialect {
  let name = "TestDialect";
  let cppNamespace = "::test";
}

// CHECK: Autogenerated by mlir-tblgen; don't manually edit.

// CHECK: from enum import IntEnum, auto
// CHECK: from ._ods_common import _cext as _ods_cext
// CHECK: from ..ir import register_attribute_builder
// CHECK: _ods_ir = _ods_cext.ir

def One : I32EnumAttrCase<"CaseOne", 1, "one">;
def Two : I32EnumAttrCase<"CaseTwo", 2, "two">;
def NegOne : I32EnumAttrCase<"CaseNegOne", -1, "negone">;

def MyEnum : I32EnumAttr<"MyEnum", "An example 32-bit enum", [One, Two, NegOne]>;
// CHECK-LABEL: class MyEnum(IntEnum):
// CHECK:     """An example 32-bit enum"""

// CHECK:     CaseOne = 1
// CHECK:     CaseTwo = 2
// CHECK:     CaseNegOne = auto()

// CHECK:     def __str__(self):
// CHECK:         if self is MyEnum.CaseOne:
// CHECK:             return "one"
// CHECK:         if self is MyEnum.CaseTwo:
// CHECK:             return "two"
// CHECK:         if self is MyEnum.CaseNegOne:
// CHECK:             return "negone"
// CHECK:         assert False, "Unknown MyEnum enum entry."

// CHECK: @register_attribute_builder("MyEnum")
// CHECK: def _myenum(x, context):
// CHECK:     return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(32, context=context), int(x))

def TestMyEnum_Attr : EnumAttr<Test_Dialect, MyEnum, "enum">;

def One64 : I64EnumAttrCase<"CaseOne64", 1, "one">;
def Two64 : I64EnumAttrCase<"CaseTwo64", 2, "two">;

def MyEnum64 : I64EnumAttr<"MyEnum64", "An example 64-bit enum", [One64, Two64]>;
// CHECK-LABEL: class MyEnum64(IntEnum):
// CHECK:     """An example 64-bit enum"""

// CHECK:     CaseOne64 = 1
// CHECK:     CaseTwo64 = 2

// CHECK:     def __str__(self):
// CHECK:         if self is MyEnum64.CaseOne64:
// CHECK:             return "one"
// CHECK:         if self is MyEnum64.CaseTwo64:
// CHECK:             return "two"
// CHECK:         assert False, "Unknown MyEnum64 enum entry."

// CHECK: @register_attribute_builder("MyEnum64")
// CHECK: def _myenum64(x, context):
// CHECK:     return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

// CHECK: @register_attribute_builder("TestMyEnum_Attr")
// CHECK: def _testmyenum_attr(x, context):
// CHECK:     return _ods_ir.Attribute.parse(f'#TestDialect<enum {x}>', context=context)

