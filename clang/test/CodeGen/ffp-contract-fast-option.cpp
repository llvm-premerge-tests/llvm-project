// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -O3 -ffp-contract=fast -triple %itanium_abi_triple -emit-llvm -o - %s | FileCheck %s

// CHECK-LABEL: @_Z13fp_contract_1fff(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = tail call contract float @llvm.fmuladd.f32(float [[A:%.*]], float [[B:%.*]], float [[C:%.*]])
// CHECK-NEXT:    ret float [[TMP0]]
//
float fp_contract_1(float a, float b, float c) {
  return a * b + c;
}

// CHECK-LABEL: @_Z13fp_contract_2fff(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[NEG:%.*]] = fneg contract float [[C:%.*]]
// CHECK-NEXT:    [[TMP0:%.*]] = tail call contract float @llvm.fmuladd.f32(float [[A:%.*]], float [[B:%.*]], float [[NEG]])
// CHECK-NEXT:    ret float [[TMP0]]
//
float fp_contract_2(float a, float b, float c) {
  return a * b - c;
}

// CHECK-LABEL: @_Z13fp_contract_3Pfff(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[A:%.*]], align 4, !tbaa [[TBAA2:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = tail call contract float @llvm.fmuladd.f32(float [[B:%.*]], float [[C:%.*]], float [[TMP0]])
// CHECK-NEXT:    store float [[TMP1]], ptr [[A]], align 4, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void fp_contract_3(float *a, float b, float c) {
  a[0] += b * c;
}

// CHECK-LABEL: @_Z13fp_contract_4Pfff(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[A:%.*]], align 4, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[NEG:%.*]] = fneg contract float [[B:%.*]]
// CHECK-NEXT:    [[TMP1:%.*]] = tail call contract float @llvm.fmuladd.f32(float [[NEG]], float [[C:%.*]], float [[TMP0]])
// CHECK-NEXT:    store float [[TMP1]], ptr [[A]], align 4, !tbaa [[TBAA2]]
// CHECK-NEXT:    ret void
//
void fp_contract_4(float *a, float b, float c) {
  a[0] -= b * c;
}
