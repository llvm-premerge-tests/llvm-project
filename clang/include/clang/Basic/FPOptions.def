//===--- FPOptions.def - Floating Point Options database --------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// This file defines the Floating Point language options. Users of this file
//  must define the OPTION macro to make use of this information.
#ifndef OPTION
#  error Define the OPTION macro to handle floating point language options
#endif

#define SIMPLE_OPTION(name, type, width, previousName) \
  OPTION(name, type, static_cast<type>, static_cast<type>, width, previousName)

// OPTION(name, type, width, previousName)
SIMPLE_OPTION(FPContractMode, LangOptions::FPModeKind, 2, First)
SIMPLE_OPTION(RoundingMath, bool, 1, FPContractMode)
OPTION(ConstRoundingMode, LangOptions::RoundingMode, llvm::encodeRoundingMode, llvm::decodeRoundingMode, 3, RoundingMath)
SIMPLE_OPTION(SpecifiedExceptionMode, LangOptions::FPExceptionModeKind, 2, ConstRoundingMode)
SIMPLE_OPTION(AllowFEnvAccess, bool, 1, SpecifiedExceptionMode)
SIMPLE_OPTION(AllowFPReassociate, bool, 1, AllowFEnvAccess)
SIMPLE_OPTION(NoHonorNaNs, bool, 1, AllowFPReassociate)
SIMPLE_OPTION(NoHonorInfs, bool, 1, NoHonorNaNs)
SIMPLE_OPTION(NoSignedZero, bool, 1, NoHonorInfs)
SIMPLE_OPTION(AllowReciprocal, bool, 1, NoSignedZero)
SIMPLE_OPTION(AllowApproxFunc, bool, 1, AllowReciprocal)
SIMPLE_OPTION(FPEvalMethod, LangOptions::FPEvalMethodKind, 2, AllowApproxFunc)
SIMPLE_OPTION(Float16ExcessPrecision, LangOptions::ExcessPrecisionKind, 2, FPEvalMethod)
SIMPLE_OPTION(BFloat16ExcessPrecision, LangOptions::ExcessPrecisionKind, 2, FPEvalMethod)

#undef SIMPLE_OPTION
#undef OPTION
